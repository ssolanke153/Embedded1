
INTERRUPTIN C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059f  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000520  00000000  00000000  00000757  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000224  00000000  00000000  00000c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d4  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f1  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "avr/interrupt.h"


int main(void)
{
    DDRB |= 0x20;
  6c:	bd 9a       	sbi	0x17, 5	; 23
	
	TCNT0 = 00;
  6e:	12 be       	out	0x32, r1	; 50
	TCCR0 = 0x05;
  70:	85 e0       	ldi	r24, 0x05	; 5
  72:	83 bf       	out	0x33, r24	; 51
	
	TIMSK = (1<<TOIE0);
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	89 bf       	out	0x39, r24	; 57
	
	sei();
  78:	78 94       	sei
	
	DDRC = 0x00;
  7a:	14 ba       	out	0x14, r1	; 20
	DDRD = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	81 bb       	out	0x11, r24	; 17
	
	
	
    while (1) 
    {
		PORTD = PORTC;
  80:	85 b3       	in	r24, 0x15	; 21
  82:	82 bb       	out	0x12, r24	; 18
  84:	fd cf       	rjmp	.-6      	; 0x80 <main+0x14>

00000086 <__vector_11>:
		
    }
}

ISR (TIMER0_OVF_vect)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	2f 93       	push	r18
  92:	3f 93       	push	r19
  94:	8f 93       	push	r24
  96:	9f 93       	push	r25
	unsigned int z,i;
	TCNT0 = 00;
  98:	12 be       	out	0x32, r1	; 50
	PORTB ^= 0x20;
  9a:	98 b3       	in	r25, 0x18	; 24
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	89 27       	eor	r24, r25
  a0:	88 bb       	out	0x18, r24	; 24
  a2:	20 e6       	ldi	r18, 0x60	; 96
  a4:	3a ee       	ldi	r19, 0xEA	; 234
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <__vector_11+0x2c>
  a8:	01 97       	sbiw	r24, 0x01	; 1
	for(z=0;z<60000;z++)
	{
		for(i=0;i<532;i++)
  aa:	f1 f7       	brne	.-4      	; 0xa8 <__vector_11+0x22>
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	31 09       	sbc	r19, r1
ISR (TIMER0_OVF_vect)
{
	unsigned int z,i;
	TCNT0 = 00;
	PORTB ^= 0x20;
	for(z=0;z<60000;z++)
  b0:	19 f0       	breq	.+6      	; 0xb8 <__vector_11+0x32>
		
    }
}

ISR (TIMER0_OVF_vect)
{
  b2:	84 e1       	ldi	r24, 0x14	; 20
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	f8 cf       	rjmp	.-16     	; 0xa8 <__vector_11+0x22>
		for(i=0;i<532;i++)
		{
			
		}
	}
}
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	3f 91       	pop	r19
  be:	2f 91       	pop	r18
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
