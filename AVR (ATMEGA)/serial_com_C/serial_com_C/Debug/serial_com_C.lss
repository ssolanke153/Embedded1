
serial_com_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c5  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055c  00000000  00000000  00000749  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000203  00000000  00000000  00000ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002dc  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 47 00 	jmp	0x8e	; 0x8e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <usart_init>:
#include <avr/io.h>


void usart_init(void)
{
	UCSRB = (1<<TXEN);
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ1) | (1<<UCSZ0) | (1<<URSEL);
  70:	86 e8       	ldi	r24, 0x86	; 134
  72:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33;
  74:	83 e3       	ldi	r24, 0x33	; 51
  76:	89 b9       	out	0x09, r24	; 9
  78:	08 95       	ret

0000007a <usart_send>:
}

void usart_send(unsigned char ch)
{
	while(!(UCSRA & (1<<UDRE)));
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <usart_send>
	UDR = ch;
  7e:	8c b9       	out	0x0c, r24	; 12
  80:	08 95       	ret

00000082 <main>:
}


int main(void)
{
     usart_init();
  82:	0e 94 36 00 	call	0x6c	; 0x6c <usart_init>
    while (1) 
    {
		usart_send('G');
  86:	87 e4       	ldi	r24, 0x47	; 71
  88:	0e 94 3d 00 	call	0x7a	; 0x7a <usart_send>
  8c:	fc cf       	rjmp	.-8      	; 0x86 <main+0x4>

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
