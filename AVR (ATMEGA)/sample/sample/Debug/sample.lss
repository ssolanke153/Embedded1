
sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c55  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  00000ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fe  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ce  00000000  00000000  00001ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  64:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCDSendCmd4BIT>:

	LCDSendCmd(0x28);  //function set, 4 line, 8-bit, character size=5x7
	LCDSendCmd(0x02 );
	LCDOn();    //turn on the LCD
	LCDSendCmd(0x06);
	LCDSendCmd(DDRAM_PTR);  //set DDRAM Address
  6c:	80 ff       	sbrs	r24, 0
  6e:	02 c0       	rjmp	.+4      	; 0x74 <LCDSendCmd4BIT+0x8>
  70:	ac 9a       	sbi	0x15, 4	; 21
  72:	01 c0       	rjmp	.+2      	; 0x76 <LCDSendCmd4BIT+0xa>
  74:	ac 98       	cbi	0x15, 4	; 21
  76:	81 ff       	sbrs	r24, 1
  78:	02 c0       	rjmp	.+4      	; 0x7e <LCDSendCmd4BIT+0x12>
  7a:	ad 9a       	sbi	0x15, 5	; 21
  7c:	01 c0       	rjmp	.+2      	; 0x80 <LCDSendCmd4BIT+0x14>
  7e:	ad 98       	cbi	0x15, 5	; 21
  80:	82 ff       	sbrs	r24, 2
  82:	02 c0       	rjmp	.+4      	; 0x88 <LCDSendCmd4BIT+0x1c>
  84:	ae 9a       	sbi	0x15, 6	; 21
  86:	01 c0       	rjmp	.+2      	; 0x8a <LCDSendCmd4BIT+0x1e>
  88:	ae 98       	cbi	0x15, 6	; 21
  8a:	83 ff       	sbrs	r24, 3
  8c:	02 c0       	rjmp	.+4      	; 0x92 <LCDSendCmd4BIT+0x26>
  8e:	af 9a       	sbi	0x15, 7	; 21
  90:	01 c0       	rjmp	.+2      	; 0x94 <LCDSendCmd4BIT+0x28>
  92:	af 98       	cbi	0x15, 7	; 21
  94:	96 9a       	sbi	0x12, 6	; 18
  96:	96 98       	cbi	0x12, 6	; 18
  98:	8f e9       	ldi	r24, 0x9F	; 159
  9a:	9f e0       	ldi	r25, 0x0F	; 15
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCDSendCmd4BIT+0x30>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCDSendCmd4BIT+0x36>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <LCDSendCmd>:
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	94 98       	cbi	0x12, 4	; 18
  ac:	82 95       	swap	r24
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	0e 94 36 00 	call	0x6c	; 0x6c <LCDSendCmd4BIT>
  b4:	8c 2f       	mov	r24, r28
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <LCDSendCmd4BIT>
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <LCDInit>:
  be:	8c 9a       	sbi	0x11, 4	; 17
  c0:	8d 9a       	sbi	0x11, 5	; 17
  c2:	8e 9a       	sbi	0x11, 6	; 17
  c4:	a4 9a       	sbi	0x14, 4	; 20
  c6:	a5 9a       	sbi	0x14, 5	; 20
  c8:	a6 9a       	sbi	0x14, 6	; 20
  ca:	a7 9a       	sbi	0x14, 7	; 20
  cc:	94 98       	cbi	0x12, 4	; 18
  ce:	96 98       	cbi	0x12, 6	; 18
  d0:	2f e7       	ldi	r18, 0x7F	; 127
  d2:	89 ea       	ldi	r24, 0xA9	; 169
  d4:	93 e0       	ldi	r25, 0x03	; 3
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <LCDInit+0x18>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCDInit+0x22>
  e0:	00 00       	nop
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 36 00 	call	0x6c	; 0x6c <LCDSendCmd4BIT>
  e8:	2f e7       	ldi	r18, 0x7F	; 127
  ea:	89 ea       	ldi	r24, 0xA9	; 169
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <LCDInit+0x30>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCDInit+0x3a>
  f8:	00 00       	nop
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 36 00 	call	0x6c	; 0x6c <LCDSendCmd4BIT>
 100:	2f e7       	ldi	r18, 0x7F	; 127
 102:	89 ea       	ldi	r24, 0xA9	; 169
 104:	93 e0       	ldi	r25, 0x03	; 3
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <LCDInit+0x48>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCDInit+0x52>
 110:	00 00       	nop
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	0e 94 36 00 	call	0x6c	; 0x6c <LCDSendCmd4BIT>
 118:	2f e7       	ldi	r18, 0x7F	; 127
 11a:	89 ea       	ldi	r24, 0xA9	; 169
 11c:	93 e0       	ldi	r25, 0x03	; 3
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <LCDInit+0x60>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCDInit+0x6a>
 128:	00 00       	nop
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 36 00 	call	0x6c	; 0x6c <LCDSendCmd4BIT>
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDSendCmd>
 136:	8c e0       	ldi	r24, 0x0C	; 12
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDSendCmd>
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDSendCmd>
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDSendCmd>
 148:	08 95       	ret

0000014a <LCDSendData>:
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
 14e:	94 9a       	sbi	0x12, 4	; 18
 150:	82 95       	swap	r24
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	0e 94 36 00 	call	0x6c	; 0x6c <LCDSendCmd4BIT>
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 36 00 	call	0x6c	; 0x6c <LCDSendCmd4BIT>
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <main>:


int main(void)
{
	char d=0;
	LCDInit();
 162:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDInit>
	_delay_ms(2);
}

void LCDPutchar(char c)
{
	LCDSendData(c);
 166:	82 e3       	ldi	r24, 0x32	; 50
 168:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDSendData>
 16c:	fc cf       	rjmp	.-8      	; 0x166 <main+0x4>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
