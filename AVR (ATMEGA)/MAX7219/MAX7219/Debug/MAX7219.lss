
MAX7219.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000292  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000292  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080a  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000630  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000388  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024d  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001bcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  7a:	0c 94 47 01 	jmp	0x28e	; 0x28e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <spiSendByte>:
char digitsInUse = 3;

void spiSendByte (char databyte)
{
    // Copy data into the SPI data register
    SPDR = databyte;
  82:	8f b9       	out	0x0f, r24	; 15
    // Wait until transfer is complete
    while (!(SPSR & (1 << SPIF)));
  84:	77 9b       	sbis	0x0e, 7	; 14
  86:	fe cf       	rjmp	.-4      	; 0x84 <spiSendByte+0x2>
}
  88:	08 95       	ret

0000008a <MAX7219_writeData>:

void MAX7219_writeData(char data_register, char data)
{
  8a:	cf 93       	push	r28
  8c:	c6 2f       	mov	r28, r22
    MAX7219_LOAD0;
  8e:	c4 98       	cbi	0x18, 4	; 24
        // Send the register where the data will be stored
        spiSendByte(data_register);
  90:	0e 94 41 00 	call	0x82	; 0x82 <spiSendByte>
        // Send the data to be stored
        spiSendByte(data);
  94:	8c 2f       	mov	r24, r28
  96:	0e 94 41 00 	call	0x82	; 0x82 <spiSendByte>
    MAX7219_LOAD1;
  9a:	c4 9a       	sbi	0x18, 4	; 24
}
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <MAX7219_clearDisplay>:

void MAX7219_clearDisplay() 
{
  a0:	cf 93       	push	r28
    char i = digitsInUse;
  a2:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    // Loop until 0, but don't run for zero
    do {
        // Set each display in use to blank
        MAX7219_writeData(i, MAX7219_CHAR_BLANK);
  a6:	6f e0       	ldi	r22, 0x0F	; 15
  a8:	8c 2f       	mov	r24, r28
  aa:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
    } while (--i);
  ae:	c1 50       	subi	r28, 0x01	; 1
  b0:	d1 f7       	brne	.-12     	; 0xa6 <MAX7219_clearDisplay+0x6>
}
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <MAX7219_displayNumber>:

void MAX7219_displayNumber(volatile long number) 
{
  b6:	cf 92       	push	r12
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	00 d0       	rcall	.+0      	; 0xc8 <MAX7219_displayNumber+0x12>
  c8:	00 d0       	rcall	.+0      	; 0xca <MAX7219_displayNumber+0x14>
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	69 83       	std	Y+1, r22	; 0x01
  d0:	7a 83       	std	Y+2, r23	; 0x02
  d2:	8b 83       	std	Y+3, r24	; 0x03
  d4:	9c 83       	std	Y+4, r25	; 0x04
    char negative = 0;

    // Convert negative to positive.
    // Keep a record that it was negative so we can
    // sign it again on the display.
    if (number < 0) {
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	ab 81       	ldd	r26, Y+3	; 0x03
  dc:	bc 81       	ldd	r27, Y+4	; 0x04
  de:	bb 23       	and	r27, r27
  e0:	8c f4       	brge	.+34     	; 0x104 <MAX7219_displayNumber+0x4e>
        negative = 1;
        number *= -1;
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	ab 81       	ldd	r26, Y+3	; 0x03
  e8:	bc 81       	ldd	r27, Y+4	; 0x04
  ea:	b0 95       	com	r27
  ec:	a0 95       	com	r26
  ee:	90 95       	com	r25
  f0:	81 95       	neg	r24
  f2:	9f 4f       	sbci	r25, 0xFF	; 255
  f4:	af 4f       	sbci	r26, 0xFF	; 255
  f6:	bf 4f       	sbci	r27, 0xFF	; 255
  f8:	89 83       	std	Y+1, r24	; 0x01
  fa:	9a 83       	std	Y+2, r25	; 0x02
  fc:	ab 83       	std	Y+3, r26	; 0x03
  fe:	bc 83       	std	Y+4, r27	; 0x04

    // Convert negative to positive.
    // Keep a record that it was negative so we can
    // sign it again on the display.
    if (number < 0) {
        negative = 1;
 100:	01 e0       	ldi	r16, 0x01	; 1
 102:	01 c0       	rjmp	.+2      	; 0x106 <MAX7219_displayNumber+0x50>
    } while (--i);
}

void MAX7219_displayNumber(volatile long number) 
{
    char negative = 0;
 104:	00 e0       	ldi	r16, 0x00	; 0
    if (number < 0) {
        negative = 1;
        number *= -1;
    }

    MAX7219_clearDisplay();
 106:	0e 94 50 00 	call	0xa0	; 0xa0 <MAX7219_clearDisplay>

    // If number = 0, only show one zero then exit
    if (number == 0) {
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	ab 81       	ldd	r26, Y+3	; 0x03
 110:	bc 81       	ldd	r27, Y+4	; 0x04
 112:	89 2b       	or	r24, r25
 114:	8a 2b       	or	r24, r26
 116:	8b 2b       	or	r24, r27
 118:	29 f4       	brne	.+10     	; 0x124 <MAX7219_displayNumber+0x6e>
        MAX7219_writeData(MAX7219_DIGIT0, 0);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
        return;
 122:	2e c0       	rjmp	.+92     	; 0x180 <MAX7219_displayNumber+0xca>
 124:	10 e0       	ldi	r17, 0x00	; 0
    // does not work without it. Not sure why.
    char i = 0; 
    
    // Loop until number is 0.
    do {
        MAX7219_writeData(++i, number % 10);
 126:	0f 2e       	mov	r0, r31
 128:	fa e0       	ldi	r31, 0x0A	; 10
 12a:	cf 2e       	mov	r12, r31
 12c:	d1 2c       	mov	r13, r1
 12e:	e1 2c       	mov	r14, r1
 130:	f1 2c       	mov	r15, r1
 132:	f0 2d       	mov	r31, r0
 134:	69 81       	ldd	r22, Y+1	; 0x01
 136:	7a 81       	ldd	r23, Y+2	; 0x02
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	9c 81       	ldd	r25, Y+4	; 0x04
 13c:	1f 5f       	subi	r17, 0xFF	; 255
 13e:	a7 01       	movw	r20, r14
 140:	96 01       	movw	r18, r12
 142:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodsi4>
 146:	81 2f       	mov	r24, r17
 148:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
        // Actually divide by 10 now.
        number /= 10;
 14c:	69 81       	ldd	r22, Y+1	; 0x01
 14e:	7a 81       	ldd	r23, Y+2	; 0x02
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	9c 81       	ldd	r25, Y+4	; 0x04
 154:	a7 01       	movw	r20, r14
 156:	96 01       	movw	r18, r12
 158:	0e 94 06 01 	call	0x20c	; 0x20c <__divmodsi4>
 15c:	29 83       	std	Y+1, r18	; 0x01
 15e:	3a 83       	std	Y+2, r19	; 0x02
 160:	4b 83       	std	Y+3, r20	; 0x03
 162:	5c 83       	std	Y+4, r21	; 0x04
    } while (number);
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	ab 81       	ldd	r26, Y+3	; 0x03
 16a:	bc 81       	ldd	r27, Y+4	; 0x04
 16c:	89 2b       	or	r24, r25
 16e:	8a 2b       	or	r24, r26
 170:	8b 2b       	or	r24, r27
 172:	01 f7       	brne	.-64     	; 0x134 <MAX7219_displayNumber+0x7e>

    // Bear in mind that if you only have three digits, and
    // try to display something like "-256" all that will display
    // will be "256" because it needs an extra fourth digit to
    // display the sign.
    if (negative) {
 174:	00 23       	and	r16, r16
 176:	21 f0       	breq	.+8      	; 0x180 <MAX7219_displayNumber+0xca>
        MAX7219_writeData(i, MAX7219_CHAR_NEGATIVE);
 178:	6a e0       	ldi	r22, 0x0A	; 10
 17a:	81 2f       	mov	r24, r17
 17c:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
    }
}
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	08 95       	ret

0000019a <main>:

int main(void)
{
    // SCK MOSI CS/LOAD/SS
    DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) | (1 << PIN_SS);
 19a:	87 b3       	in	r24, 0x17	; 23
 19c:	80 6b       	ori	r24, 0xB0	; 176
 19e:	87 bb       	out	0x17, r24	; 23

    // SPI Enable, Master mode
    SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
 1a0:	8d b1       	in	r24, 0x0d	; 13
 1a2:	82 65       	ori	r24, 0x52	; 82
 1a4:	8d b9       	out	0x0d, r24	; 13

    // Decode mode to "Font Code-B"
    MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
 1a6:	6f ef       	ldi	r22, 0xFF	; 255
 1a8:	89 e0       	ldi	r24, 0x09	; 9
 1aa:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>

    // Scan limit runs from 0.
    MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, digitsInUse - 1);
 1ae:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b2:	61 50       	subi	r22, 0x01	; 1
 1b4:	8b e0       	ldi	r24, 0x0B	; 11
 1b6:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
    MAX7219_writeData(MAX7219_MODE_INTENSITY, 8);
 1ba:	68 e0       	ldi	r22, 0x08	; 8
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
    MAX7219_writeData(MAX7219_MODE_POWER, ON);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	8c e0       	ldi	r24, 0x0C	; 12
 1c6:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>

    int i = 100;
    while(1)
    {
        MAX7219_displayNumber(--i);
 1ca:	63 e6       	ldi	r22, 0x63	; 99
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 5b 00 	call	0xb6	; 0xb6 <MAX7219_displayNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	9c e9       	ldi	r25, 0x9C	; 156
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x40>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x46>
 1e0:	00 00       	nop
 1e2:	c3 e6       	ldi	r28, 0x63	; 99
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	21 97       	sbiw	r28, 0x01	; 1
 1e8:	be 01       	movw	r22, r28
 1ea:	0d 2e       	mov	r0, r29
 1ec:	00 0c       	add	r0, r0
 1ee:	88 0b       	sbc	r24, r24
 1f0:	99 0b       	sbc	r25, r25
 1f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <MAX7219_displayNumber>
 1f6:	8f e3       	ldi	r24, 0x3F	; 63
 1f8:	9c e9       	ldi	r25, 0x9C	; 156
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x60>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x66>
 200:	00 00       	nop
        _delay_ms(10);

        if (i == 0) {
 202:	20 97       	sbiw	r28, 0x00	; 0
 204:	81 f7       	brne	.-32     	; 0x1e6 <main+0x4c>
            i = 999;
 206:	c7 ee       	ldi	r28, 0xE7	; 231
 208:	d3 e0       	ldi	r29, 0x03	; 3
 20a:	ed cf       	rjmp	.-38     	; 0x1e6 <main+0x4c>

0000020c <__divmodsi4>:
 20c:	05 2e       	mov	r0, r21
 20e:	97 fb       	bst	r25, 7
 210:	1e f4       	brtc	.+6      	; 0x218 <__divmodsi4+0xc>
 212:	00 94       	com	r0
 214:	0e 94 1d 01 	call	0x23a	; 0x23a <__negsi2>
 218:	57 fd       	sbrc	r21, 7
 21a:	07 d0       	rcall	.+14     	; 0x22a <__divmodsi4_neg2>
 21c:	0e 94 25 01 	call	0x24a	; 0x24a <__udivmodsi4>
 220:	07 fc       	sbrc	r0, 7
 222:	03 d0       	rcall	.+6      	; 0x22a <__divmodsi4_neg2>
 224:	4e f4       	brtc	.+18     	; 0x238 <__divmodsi4_exit>
 226:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__negsi2>

0000022a <__divmodsi4_neg2>:
 22a:	50 95       	com	r21
 22c:	40 95       	com	r20
 22e:	30 95       	com	r19
 230:	21 95       	neg	r18
 232:	3f 4f       	sbci	r19, 0xFF	; 255
 234:	4f 4f       	sbci	r20, 0xFF	; 255
 236:	5f 4f       	sbci	r21, 0xFF	; 255

00000238 <__divmodsi4_exit>:
 238:	08 95       	ret

0000023a <__negsi2>:
 23a:	90 95       	com	r25
 23c:	80 95       	com	r24
 23e:	70 95       	com	r23
 240:	61 95       	neg	r22
 242:	7f 4f       	sbci	r23, 0xFF	; 255
 244:	8f 4f       	sbci	r24, 0xFF	; 255
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	08 95       	ret

0000024a <__udivmodsi4>:
 24a:	a1 e2       	ldi	r26, 0x21	; 33
 24c:	1a 2e       	mov	r1, r26
 24e:	aa 1b       	sub	r26, r26
 250:	bb 1b       	sub	r27, r27
 252:	fd 01       	movw	r30, r26
 254:	0d c0       	rjmp	.+26     	; 0x270 <__udivmodsi4_ep>

00000256 <__udivmodsi4_loop>:
 256:	aa 1f       	adc	r26, r26
 258:	bb 1f       	adc	r27, r27
 25a:	ee 1f       	adc	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	a2 17       	cp	r26, r18
 260:	b3 07       	cpc	r27, r19
 262:	e4 07       	cpc	r30, r20
 264:	f5 07       	cpc	r31, r21
 266:	20 f0       	brcs	.+8      	; 0x270 <__udivmodsi4_ep>
 268:	a2 1b       	sub	r26, r18
 26a:	b3 0b       	sbc	r27, r19
 26c:	e4 0b       	sbc	r30, r20
 26e:	f5 0b       	sbc	r31, r21

00000270 <__udivmodsi4_ep>:
 270:	66 1f       	adc	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	88 1f       	adc	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	1a 94       	dec	r1
 27a:	69 f7       	brne	.-38     	; 0x256 <__udivmodsi4_loop>
 27c:	60 95       	com	r22
 27e:	70 95       	com	r23
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	9b 01       	movw	r18, r22
 286:	ac 01       	movw	r20, r24
 288:	bd 01       	movw	r22, r26
 28a:	cf 01       	movw	r24, r30
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
