
TFT_DISPLAY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e0  00800100  0000055e  000005d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f56  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005da  00000000  00000000  00002009  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  000025e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043b  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bd6  00000000  00000000  00002c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000037e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3e       	cpi	r26, 0xE0	; 224
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
  8e:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <sendcmd>:



void sendcmd(unsigned char cmd)
{
	PORTB &= ~(1<<SS);
  96:	2c 98       	cbi	0x05, 4	; 5
	PORTD &= ~(1<<DCX);
  98:	59 98       	cbi	0x0b, 1	; 11
	SPDR = cmd;
  9a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  9c:	0d b4       	in	r0, 0x2d	; 45
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <sendcmd+0x6>
	PORTB |= (1<<SS);
  a2:	2c 9a       	sbi	0x05, 4	; 5
  a4:	08 95       	ret

000000a6 <sendata>:
	
}

void sendata(unsigned char data)
{
	PORTB &= ~(1<<SS);
  a6:	2c 98       	cbi	0x05, 4	; 5
	PORTB |= (1<<DCX);
  a8:	29 9a       	sbi	0x05, 1	; 5
	SPDR = data;
  aa:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  ac:	0d b4       	in	r0, 0x2d	; 45
  ae:	07 fe       	sbrs	r0, 7
  b0:	fd cf       	rjmp	.-6      	; 0xac <sendata+0x6>
	PORTB |= (1<<SS);
  b2:	2c 9a       	sbi	0x05, 4	; 5
  b4:	08 95       	ret

000000b6 <rst>:
}

void rst()
{
	PORTB &= ~(1<<0);
  b6:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f ec       	ldi	r24, 0xCF	; 207
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <rst+0x6>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <rst+0xc>
  c2:	00 00       	nop
	_delay_ms(1);
	
	PORTB |= (1<<0);
  c4:	28 9a       	sbi	0x05, 0	; 5
  c6:	9f e7       	ldi	r25, 0x7F	; 127
  c8:	2a e1       	ldi	r18, 0x1A	; 26
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	20 40       	sbci	r18, 0x00	; 0
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <rst+0x16>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <rst+0x20>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <writeword>:
	_delay_ms(250);
}

void writeword(int w)
{
  da:	cf 93       	push	r28
  dc:	c8 2f       	mov	r28, r24
	sendata(w>>8);
  de:	89 2f       	mov	r24, r25
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <sendata>
	sendata(w & 0xFF);
  e4:	8c 2f       	mov	r24, r28
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <sendata>
}
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <SetAddrwindow>:

void SetAddrwindow(byte x0, byte y0, byte x1, byte y1)
{
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	08 2f       	mov	r16, r24
  f8:	d6 2f       	mov	r29, r22
  fa:	14 2f       	mov	r17, r20
  fc:	c2 2f       	mov	r28, r18
	sendcmd(CASET);
  fe:	8a e2       	ldi	r24, 0x2A	; 42
 100:	0e 94 4b 00 	call	0x96	; 0x96 <sendcmd>
	writeword(x0);
 104:	80 2f       	mov	r24, r16
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 6d 00 	call	0xda	; 0xda <writeword>
	writeword(x1);
 10c:	81 2f       	mov	r24, r17
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 6d 00 	call	0xda	; 0xda <writeword>
	sendcmd(RASET);
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	0e 94 4b 00 	call	0x96	; 0x96 <sendcmd>
	writeword(y0);
 11a:	8d 2f       	mov	r24, r29
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 6d 00 	call	0xda	; 0xda <writeword>
	writeword(y1);
 122:	8c 2f       	mov	r24, r28
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 6d 00 	call	0xda	; 0xda <writeword>
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <write565>:



void write565(int data, unsigned int count)
{
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	08 2f       	mov	r16, r24
 13e:	19 2f       	mov	r17, r25
 140:	eb 01       	movw	r28, r22
	sendcmd(RAMWR);
 142:	8c e2       	ldi	r24, 0x2C	; 44
 144:	0e 94 4b 00 	call	0x96	; 0x96 <sendcmd>
	
	for (;count>0;count--)
 148:	20 97       	sbiw	r28, 0x00	; 0
 14a:	41 f0       	breq	.+16     	; 0x15c <write565+0x28>
	{
		sendata(data>>8);
 14c:	81 2f       	mov	r24, r17
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <sendata>
		sendata(data&0xFF);
 152:	80 2f       	mov	r24, r16
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <sendata>

void write565(int data, unsigned int count)
{
	sendcmd(RAMWR);
	
	for (;count>0;count--)
 158:	21 97       	sbiw	r28, 0x01	; 1
 15a:	c1 f7       	brne	.-16     	; 0x14c <write565+0x18>
	{
		sendata(data>>8);
		sendata(data&0xFF);
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <DrawPixel>:


void DrawPixel(byte x, byte y, int color)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ea 01       	movw	r28, r20
	SetAddrwindow(x,y,x,y);
 16c:	26 2f       	mov	r18, r22
 16e:	48 2f       	mov	r20, r24
 170:	0e 94 77 00 	call	0xee	; 0xee <SetAddrwindow>
	write565(color, 1);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	ce 01       	movw	r24, r28
 17a:	0e 94 9a 00 	call	0x134	; 0x134 <write565>
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <Line>:

void Line (int x0, int y0, int x1, int y1, int color)
{
 184:	2f 92       	push	r2
 186:	3f 92       	push	r3
 188:	4f 92       	push	r4
 18a:	5f 92       	push	r5
 18c:	6f 92       	push	r6
 18e:	7f 92       	push	r7
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <Line+0x26>
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <Line+0x28>
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <Line+0x2a>
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	9e 83       	std	Y+6, r25	; 0x06
 1b4:	8d 83       	std	Y+5, r24	; 0x05
 1b6:	7b 01       	movw	r14, r22
 1b8:	6a 01       	movw	r12, r20
 1ba:	3c 83       	std	Y+4, r19	; 0x04
 1bc:	2b 83       	std	Y+3, r18	; 0x03
 1be:	1a 83       	std	Y+2, r17	; 0x02
 1c0:	09 83       	std	Y+1, r16	; 0x01
	int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;     
 1c2:	ca 01       	movw	r24, r20
 1c4:	2d 81       	ldd	r18, Y+5	; 0x05
 1c6:	3e 81       	ldd	r19, Y+6	; 0x06
 1c8:	82 1b       	sub	r24, r18
 1ca:	93 0b       	sbc	r25, r19
 1cc:	1c 01       	movw	r2, r24
 1ce:	22 f4       	brpl	.+8      	; 0x1d8 <Line+0x54>
 1d0:	22 24       	eor	r2, r2
 1d2:	33 24       	eor	r3, r3
 1d4:	28 1a       	sub	r2, r24
 1d6:	39 0a       	sbc	r3, r25
 1d8:	8d 81       	ldd	r24, Y+5	; 0x05
 1da:	9e 81       	ldd	r25, Y+6	; 0x06
 1dc:	8c 15       	cp	r24, r12
 1de:	9d 05       	cpc	r25, r13
 1e0:	24 f0       	brlt	.+8      	; 0x1ea <Line+0x66>
 1e2:	44 24       	eor	r4, r4
 1e4:	4a 94       	dec	r4
 1e6:	54 2c       	mov	r5, r4
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <Line+0x6c>
 1ea:	44 24       	eor	r4, r4
 1ec:	43 94       	inc	r4
 1ee:	51 2c       	mov	r5, r1
	int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;     
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	9c 81       	ldd	r25, Y+4	; 0x04
 1f4:	8e 19       	sub	r24, r14
 1f6:	9f 09       	sbc	r25, r15
 1f8:	8c 01       	movw	r16, r24
 1fa:	22 f4       	brpl	.+8      	; 0x204 <Line+0x80>
 1fc:	00 27       	eor	r16, r16
 1fe:	11 27       	eor	r17, r17
 200:	08 1b       	sub	r16, r24
 202:	19 0b       	sbc	r17, r25
 204:	2b 81       	ldd	r18, Y+3	; 0x03
 206:	3c 81       	ldd	r19, Y+4	; 0x04
 208:	e2 16       	cp	r14, r18
 20a:	f3 06       	cpc	r15, r19
 20c:	24 f0       	brlt	.+8      	; 0x216 <Line+0x92>
 20e:	66 24       	eor	r6, r6
 210:	6a 94       	dec	r6
 212:	76 2c       	mov	r7, r6
 214:	03 c0       	rjmp	.+6      	; 0x21c <Line+0x98>
 216:	66 24       	eor	r6, r6
 218:	63 94       	inc	r6
 21a:	71 2c       	mov	r7, r1
	int err = (dx>dy ? dx : -dy)/2, e2;         
 21c:	02 15       	cp	r16, r2
 21e:	13 05       	cpc	r17, r3
 220:	7c f0       	brlt	.+30     	; 0x240 <Line+0xbc>
 222:	88 24       	eor	r8, r8
 224:	99 24       	eor	r9, r9
 226:	80 1a       	sub	r8, r16
 228:	91 0a       	sbc	r9, r17
 22a:	1a f4       	brpl	.+6      	; 0x232 <Line+0xae>
 22c:	3f ef       	ldi	r19, 0xFF	; 255
 22e:	83 1a       	sub	r8, r19
 230:	93 0a       	sbc	r9, r19
 232:	95 94       	asr	r9
 234:	87 94       	ror	r8
		   if (x0==x1 && y0==y1) 
		   {
			   break;
			}         
			e2 = err;         
			if (e2 >-dx) { 
 236:	aa 24       	eor	r10, r10
 238:	bb 24       	eor	r11, r11
 23a:	a2 18       	sub	r10, r2
 23c:	b3 08       	sbc	r11, r3
 23e:	0a c0       	rjmp	.+20     	; 0x254 <Line+0xd0>

void Line (int x0, int y0, int x1, int y1, int color)
{
	int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;     
	int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;     
	int err = (dx>dy ? dx : -dy)/2, e2;         
 240:	41 01       	movw	r8, r2
 242:	33 20       	and	r3, r3
 244:	1c f4       	brge	.+6      	; 0x24c <Line+0xc8>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	88 1a       	sub	r8, r24
 24a:	98 0a       	sbc	r9, r24
 24c:	95 94       	asr	r9
 24e:	87 94       	ror	r8
 250:	f2 cf       	rjmp	.-28     	; 0x236 <Line+0xb2>
 252:	4c 01       	movw	r8, r24
	for(;;)
	
	   {         
		   DrawPixel(x0,y0,color);         
 254:	49 81       	ldd	r20, Y+1	; 0x01
 256:	5a 81       	ldd	r21, Y+2	; 0x02
 258:	6e 2d       	mov	r22, r14
 25a:	8d 81       	ldd	r24, Y+5	; 0x05
 25c:	0e 94 b3 00 	call	0x166	; 0x166 <DrawPixel>
		   if (x0==x1 && y0==y1) 
 260:	2d 81       	ldd	r18, Y+5	; 0x05
 262:	3e 81       	ldd	r19, Y+6	; 0x06
 264:	2c 15       	cp	r18, r12
 266:	3d 05       	cpc	r19, r13
 268:	29 f4       	brne	.+10     	; 0x274 <Line+0xf0>
 26a:	8b 81       	ldd	r24, Y+3	; 0x03
 26c:	9c 81       	ldd	r25, Y+4	; 0x04
 26e:	e8 16       	cp	r14, r24
 270:	f9 06       	cpc	r15, r25
 272:	b9 f0       	breq	.+46     	; 0x2a2 <Line+0x11e>
		   {
			   break;
			}         
			e2 = err;         
			if (e2 >-dx) { 
 274:	a8 14       	cp	r10, r8
 276:	b9 04       	cpc	r11, r9
 278:	54 f4       	brge	.+20     	; 0x28e <Line+0x10a>
				err -= dy; x0 += sx; 
 27a:	c4 01       	movw	r24, r8
 27c:	80 1b       	sub	r24, r16
 27e:	91 0b       	sbc	r25, r17
 280:	2d 81       	ldd	r18, Y+5	; 0x05
 282:	3e 81       	ldd	r19, Y+6	; 0x06
 284:	24 0d       	add	r18, r4
 286:	35 1d       	adc	r19, r5
 288:	3e 83       	std	Y+6, r19	; 0x06
 28a:	2d 83       	std	Y+5, r18	; 0x05
 28c:	01 c0       	rjmp	.+2      	; 0x290 <Line+0x10c>
 28e:	c4 01       	movw	r24, r8
				}   
			if (e2 < dy) 
 290:	80 16       	cp	r8, r16
 292:	91 06       	cpc	r9, r17
 294:	f4 f6       	brge	.-68     	; 0x252 <Line+0xce>
			{ 
				err += dx; y0 += sy; 
 296:	4c 01       	movw	r8, r24
 298:	82 0c       	add	r8, r2
 29a:	93 1c       	adc	r9, r3
 29c:	e6 0c       	add	r14, r6
 29e:	f7 1c       	adc	r15, r7
 2a0:	d9 cf       	rjmp	.-78     	; 0x254 <Line+0xd0>
				}    
			} 
				 
	
}
 2a2:	26 96       	adiw	r28, 0x06	; 6
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	cf 90       	pop	r12
 2be:	bf 90       	pop	r11
 2c0:	af 90       	pop	r10
 2c2:	9f 90       	pop	r9
 2c4:	8f 90       	pop	r8
 2c6:	7f 90       	pop	r7
 2c8:	6f 90       	pop	r6
 2ca:	5f 90       	pop	r5
 2cc:	4f 90       	pop	r4
 2ce:	3f 90       	pop	r3
 2d0:	2f 90       	pop	r2
 2d2:	08 95       	ret

000002d4 <ClearScreen>:

void ClearScreen()
{
	SetAddrwindow(0,0,XMAX, YMAX);
 2d4:	2f e9       	ldi	r18, 0x9F	; 159
 2d6:	4f e7       	ldi	r20, 0x7F	; 127
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 77 00 	call	0xee	; 0xee <SetAddrwindow>
	sendcmd(RAMWR);
 2e0:	8c e2       	ldi	r24, 0x2C	; 44
 2e2:	0e 94 4b 00 	call	0x96	; 0x96 <sendcmd>
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 ea       	ldi	r25, 0xA0	; 160
	
	for (unsigned int i = 40960; i>0; --i)
	{
		SPDR = 0;
 2ea:	1e bc       	out	0x2e, r1	; 46
		while(!(SPSR & 0x80));
 2ec:	0d b4       	in	r0, 0x2d	; 45
 2ee:	07 fe       	sbrs	r0, 7
 2f0:	fd cf       	rjmp	.-6      	; 0x2ec <ClearScreen+0x18>
 2f2:	01 97       	sbiw	r24, 0x01	; 1
void ClearScreen()
{
	SetAddrwindow(0,0,XMAX, YMAX);
	sendcmd(RAMWR);
	
	for (unsigned int i = 40960; i>0; --i)
 2f4:	d1 f7       	brne	.-12     	; 0x2ea <ClearScreen+0x16>
	{
		SPDR = 0;
		while(!(SPSR & 0x80));
	}
}
 2f6:	08 95       	ret

000002f8 <LineTest>:


void LineTest()
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
	ClearScreen();
 300:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ClearScreen>
	int x,y, x0=64, y0=80;
	
	for (x=0;x<XMAX;x+=2)
 304:	c0 e0       	ldi	r28, 0x00	; 0
 306:	d0 e0       	ldi	r29, 0x00	; 0
	{
		 Line(x0,y0,x,0,YELLOW);
 308:	00 ee       	ldi	r16, 0xE0	; 224
 30a:	1f ef       	ldi	r17, 0xFF	; 255
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	ae 01       	movw	r20, r28
 312:	60 e5       	ldi	r22, 0x50	; 80
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 c2 00 	call	0x184	; 0x184 <Line>
void LineTest()
{
	ClearScreen();
	int x,y, x0=64, y0=80;
	
	for (x=0;x<XMAX;x+=2)
 31e:	22 96       	adiw	r28, 0x02	; 2
 320:	c0 38       	cpi	r28, 0x80	; 128
 322:	d1 05       	cpc	r29, r1
 324:	89 f7       	brne	.-30     	; 0x308 <LineTest+0x10>
 326:	c0 e0       	ldi	r28, 0x00	; 0
 328:	d0 e0       	ldi	r29, 0x00	; 0
		 Line(x0,y0,x,0,YELLOW);
	}
	
	 for (y=0;y<YMAX;y+=2) 
	 {
		 Line(x0,y0,XMAX,y,CYAN);
 32a:	0f ef       	ldi	r16, 0xFF	; 255
 32c:	17 e0       	ldi	r17, 0x07	; 7
 32e:	9e 01       	movw	r18, r28
 330:	4f e7       	ldi	r20, 0x7F	; 127
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	60 e5       	ldi	r22, 0x50	; 80
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	80 e4       	ldi	r24, 0x40	; 64
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 c2 00 	call	0x184	; 0x184 <Line>
	for (x=0;x<XMAX;x+=2)
	{
		 Line(x0,y0,x,0,YELLOW);
	}
	
	 for (y=0;y<YMAX;y+=2) 
 340:	22 96       	adiw	r28, 0x02	; 2
 342:	c0 3a       	cpi	r28, 0xA0	; 160
 344:	d1 05       	cpc	r29, r1
 346:	89 f7       	brne	.-30     	; 0x32a <LineTest+0x32>
 348:	cf e7       	ldi	r28, 0x7F	; 127
 34a:	d0 e0       	ldi	r29, 0x00	; 0
	 {
		 Line(x0,y0,XMAX,y,CYAN);
		 }     
	for (x=XMAX;x>0;x-=2)
	 {
		Line(x0,y0,x,YMAX,YELLOW);  
 34c:	00 ee       	ldi	r16, 0xE0	; 224
 34e:	1f ef       	ldi	r17, 0xFF	; 255
 350:	2f e9       	ldi	r18, 0x9F	; 159
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	ae 01       	movw	r20, r28
 356:	60 e5       	ldi	r22, 0x50	; 80
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	80 e4       	ldi	r24, 0x40	; 64
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 c2 00 	call	0x184	; 0x184 <Line>
	
	 for (y=0;y<YMAX;y+=2) 
	 {
		 Line(x0,y0,XMAX,y,CYAN);
		 }     
	for (x=XMAX;x>0;x-=2)
 362:	22 97       	sbiw	r28, 0x02	; 2
 364:	cf 3f       	cpi	r28, 0xFF	; 255
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	d2 07       	cpc	r29, r18
 36a:	81 f7       	brne	.-32     	; 0x34c <LineTest+0x54>
 36c:	cf e9       	ldi	r28, 0x9F	; 159
 36e:	d0 e0       	ldi	r29, 0x00	; 0
	 {
		Line(x0,y0,x,YMAX,YELLOW);  
	  }   
	for (y=YMAX;y>0;y-=2) 
	{
		Line(x0,y0,0,y,CYAN);
 370:	0f ef       	ldi	r16, 0xFF	; 255
 372:	17 e0       	ldi	r17, 0x07	; 7
 374:	9e 01       	movw	r18, r28
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	60 e5       	ldi	r22, 0x50	; 80
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 e4       	ldi	r24, 0x40	; 64
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 c2 00 	call	0x184	; 0x184 <Line>
		 }     
	for (x=XMAX;x>0;x-=2)
	 {
		Line(x0,y0,x,YMAX,YELLOW);  
	  }   
	for (y=YMAX;y>0;y-=2) 
 386:	22 97       	sbiw	r28, 0x02	; 2
 388:	cf 3f       	cpi	r28, 0xFF	; 255
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	d8 07       	cpc	r29, r24
 38e:	81 f7       	brne	.-32     	; 0x370 <LineTest+0x78>
 390:	9f ef       	ldi	r25, 0xFF	; 255
 392:	23 ed       	ldi	r18, 0xD3	; 211
 394:	80 e3       	ldi	r24, 0x30	; 48
 396:	91 50       	subi	r25, 0x01	; 1
 398:	20 40       	sbci	r18, 0x00	; 0
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <LineTest+0x9e>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LineTest+0xa8>
 3a0:	00 00       	nop
		Line(x0,y0,0,y,CYAN);
	}     
	_delay_ms(2000); 
	
	
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <Putch>:

void Putch(char ch, byte x, byte y, int color)
{
 3ac:	9f 92       	push	r9
 3ae:	af 92       	push	r10
 3b0:	bf 92       	push	r11
 3b2:	cf 92       	push	r12
 3b4:	df 92       	push	r13
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	c8 2f       	mov	r28, r24
 3c4:	86 2f       	mov	r24, r22
 3c6:	64 2f       	mov	r22, r20
 3c8:	b2 2e       	mov	r11, r18
 3ca:	c3 2e       	mov	r12, r19
	int pixel;
	byte row, col, bit, data, mask = 0x01;
	SetAddrwindow(x,y,x+4,y+6);
 3cc:	26 e0       	ldi	r18, 0x06	; 6
 3ce:	24 0f       	add	r18, r20
 3d0:	44 e0       	ldi	r20, 0x04	; 4
 3d2:	48 0f       	add	r20, r24
 3d4:	0e 94 77 00 	call	0xee	; 0xee <SetAddrwindow>
	sendcmd(RAMWR);
 3d8:	8c e2       	ldi	r24, 0x2C	; 44
 3da:	0e 94 4b 00 	call	0x96	; 0x96 <sendcmd>
 3de:	8c 2f       	mov	r24, r28
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	80 97       	sbiw	r24, 0x20	; 32
 3e4:	7c 01       	movw	r14, r24
 3e6:	ee 0c       	add	r14, r14
 3e8:	ff 1c       	adc	r15, r15
 3ea:	ee 0c       	add	r14, r14
 3ec:	ff 1c       	adc	r15, r15
 3ee:	8e 0d       	add	r24, r14
 3f0:	9f 1d       	adc	r25, r15
 3f2:	9c 01       	movw	r18, r24
 3f4:	20 50       	subi	r18, 0x00	; 0
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	79 01       	movw	r14, r18
 3fa:	0f 2e       	mov	r0, r31
 3fc:	f7 e0       	ldi	r31, 0x07	; 7
 3fe:	df 2e       	mov	r13, r31
 400:	f0 2d       	mov	r31, r0
}

void Putch(char ch, byte x, byte y, int color)
{
	int pixel;
	byte row, col, bit, data, mask = 0x01;
 402:	d1 e0       	ldi	r29, 0x01	; 1
			data = pgm_read_byte(&(FONT_CHARS[ch-32][col]));
			bit = data & mask;
			
			if (bit==0)
			{
				pixel = BLACK;
 404:	91 2c       	mov	r9, r1
 406:	a1 2c       	mov	r10, r1
 408:	14 c0       	rjmp	.+40     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
	
	for (row =0;row<7;row++)
	{
		for (col=0; col<5;col++)
		{
			data = pgm_read_byte(&(FONT_CHARS[ch-32][col]));
 40a:	f8 01       	movw	r30, r16
 40c:	84 91       	lpm	r24, Z
			bit = data & mask;
			
			if (bit==0)
 40e:	8d 23       	and	r24, r29
 410:	19 f0       	breq	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			{
				pixel = BLACK;
				
			}
			else{
				pixel=color;
 412:	8b 2d       	mov	r24, r11
 414:	9c 2d       	mov	r25, r12
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			data = pgm_read_byte(&(FONT_CHARS[ch-32][col]));
			bit = data & mask;
			
			if (bit==0)
			{
				pixel = BLACK;
 418:	89 2d       	mov	r24, r9
 41a:	9a 2d       	mov	r25, r10
				
			}
			else{
				pixel=color;
			}
			writeword(pixel);
 41c:	0e 94 6d 00 	call	0xda	; 0xda <writeword>
 420:	c1 50       	subi	r28, 0x01	; 1
 422:	0f 5f       	subi	r16, 0xFF	; 255
 424:	1f 4f       	sbci	r17, 0xFF	; 255
	SetAddrwindow(x,y,x+4,y+6);
	sendcmd(RAMWR);
	
	for (row =0;row<7;row++)
	{
		for (col=0; col<5;col++)
 426:	c1 11       	cpse	r28, r1
 428:	f0 cf       	rjmp	.-32     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			else{
				pixel=color;
			}
			writeword(pixel);
		}
		mask <<=1;
 42a:	dd 0f       	add	r29, r29
 42c:	da 94       	dec	r13
	int pixel;
	byte row, col, bit, data, mask = 0x01;
	SetAddrwindow(x,y,x+4,y+6);
	sendcmd(RAMWR);
	
	for (row =0;row<7;row++)
 42e:	dd 20       	and	r13, r13
 430:	19 f0       	breq	.+6      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
	
	
}

void Putch(char ch, byte x, byte y, int color)
{
 432:	87 01       	movw	r16, r14
 434:	c5 e0       	ldi	r28, 0x05	; 5
 436:	e9 cf       	rjmp	.-46     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			}
			writeword(pixel);
		}
		mask <<=1;
	}
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	df 90       	pop	r13
 446:	cf 90       	pop	r12
 448:	bf 90       	pop	r11
 44a:	af 90       	pop	r10
 44c:	9f 90       	pop	r9
 44e:	08 95       	ret

00000450 <PortraitChars>:




void PortraitChars()
{
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
  ClearScreen();
 45c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ClearScreen>
  
  for (int i=420;i>0;i--)
 460:	c4 ea       	ldi	r28, 0xA4	; 164
 462:	d1 e0       	ldi	r29, 0x01	; 1
  {
	  byte x = i % 21;
	  byte y = i/21;
	  char ascii = (i % 96) +32;
	  Putch(ascii, x*6, y*8, CYAN);
 464:	0f 2e       	mov	r0, r31
 466:	f5 e1       	ldi	r31, 0x15	; 21
 468:	ef 2e       	mov	r14, r31
 46a:	f1 2c       	mov	r15, r1
 46c:	f0 2d       	mov	r31, r0
 46e:	00 e6       	ldi	r16, 0x60	; 96
 470:	10 e0       	ldi	r17, 0x00	; 0
 472:	ce 01       	movw	r24, r28
 474:	b7 01       	movw	r22, r14
 476:	0e 94 85 02 	call	0x50a	; 0x50a <__divmodhi4>
 47a:	46 2f       	mov	r20, r22
 47c:	44 0f       	add	r20, r20
 47e:	44 0f       	add	r20, r20
 480:	44 0f       	add	r20, r20
 482:	e8 2f       	mov	r30, r24
 484:	ee 0f       	add	r30, r30
 486:	8e 0f       	add	r24, r30
 488:	e8 2f       	mov	r30, r24
 48a:	ee 0f       	add	r30, r30
 48c:	ce 01       	movw	r24, r28
 48e:	b8 01       	movw	r22, r16
 490:	0e 94 85 02 	call	0x50a	; 0x50a <__divmodhi4>
 494:	2f ef       	ldi	r18, 0xFF	; 255
 496:	37 e0       	ldi	r19, 0x07	; 7
 498:	6e 2f       	mov	r22, r30
 49a:	80 5e       	subi	r24, 0xE0	; 224
 49c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Putch>

void PortraitChars()
{
  ClearScreen();
  
  for (int i=420;i>0;i--)
 4a0:	21 97       	sbiw	r28, 0x01	; 1
 4a2:	39 f7       	brne	.-50     	; 0x472 <PortraitChars+0x22>
 4a4:	2f ef       	ldi	r18, 0xFF	; 255
 4a6:	83 ed       	ldi	r24, 0xD3	; 211
 4a8:	90 e3       	ldi	r25, 0x30	; 48
 4aa:	21 50       	subi	r18, 0x01	; 1
 4ac:	80 40       	sbci	r24, 0x00	; 0
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <PortraitChars+0x5a>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <PortraitChars+0x64>
 4b4:	00 00       	nop
	  byte y = i/21;
	  char ascii = (i % 96) +32;
	  Putch(ascii, x*6, y*8, CYAN);
  }
  _delay_ms(2000);
}
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	ff 90       	pop	r15
 4c0:	ef 90       	pop	r14
 4c2:	08 95       	ret

000004c4 <main>:

int main(void)
{
	DDRB |= (1<<SS) | (1<<MOSI) | (1<<SCL) | (1<<DCX);;
 4c4:	84 b1       	in	r24, 0x04	; 4
 4c6:	82 6b       	ori	r24, 0xB2	; 178
 4c8:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 4ca:	81 e5       	ldi	r24, 0x51	; 81
 4cc:	8c bd       	out	0x2c, r24	; 44
	
	rst();
 4ce:	0e 94 5b 00 	call	0xb6	; 0xb6 <rst>
	sendcmd(0x11); //sleep out
 4d2:	81 e1       	ldi	r24, 0x11	; 17
 4d4:	0e 94 4b 00 	call	0x96	; 0x96 <sendcmd>
 4d8:	2f e7       	ldi	r18, 0x7F	; 127
 4da:	89 ea       	ldi	r24, 0xA9	; 169
 4dc:	93 e0       	ldi	r25, 0x03	; 3
 4de:	21 50       	subi	r18, 0x01	; 1
 4e0:	80 40       	sbci	r24, 0x00	; 0
 4e2:	90 40       	sbci	r25, 0x00	; 0
 4e4:	e1 f7       	brne	.-8      	; 0x4de <main+0x1a>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <main+0x24>
 4e8:	00 00       	nop
	_delay_ms(150);
	sendcmd(0x29); //display on
 4ea:	89 e2       	ldi	r24, 0x29	; 41
 4ec:	0e 94 4b 00 	call	0x96	; 0x96 <sendcmd>
	sendcmd(0x2D); //color mode on 
 4f0:	8d e2       	ldi	r24, 0x2D	; 45
 4f2:	0e 94 4b 00 	call	0x96	; 0x96 <sendcmd>
	sendata(0x05); // mode = 5
 4f6:	85 e0       	ldi	r24, 0x05	; 5
 4f8:	0e 94 53 00 	call	0xa6	; 0xa6 <sendata>
	PortraitChars();
 4fc:	0e 94 28 02 	call	0x450	; 0x450 <PortraitChars>
	LineTest();
 500:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LineTest>
	
	
	
	
     
}
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	08 95       	ret

0000050a <__divmodhi4>:
 50a:	97 fb       	bst	r25, 7
 50c:	07 2e       	mov	r0, r23
 50e:	16 f4       	brtc	.+4      	; 0x514 <__divmodhi4+0xa>
 510:	00 94       	com	r0
 512:	07 d0       	rcall	.+14     	; 0x522 <__divmodhi4_neg1>
 514:	77 fd       	sbrc	r23, 7
 516:	09 d0       	rcall	.+18     	; 0x52a <__divmodhi4_neg2>
 518:	0e 94 99 02 	call	0x532	; 0x532 <__udivmodhi4>
 51c:	07 fc       	sbrc	r0, 7
 51e:	05 d0       	rcall	.+10     	; 0x52a <__divmodhi4_neg2>
 520:	3e f4       	brtc	.+14     	; 0x530 <__divmodhi4_exit>

00000522 <__divmodhi4_neg1>:
 522:	90 95       	com	r25
 524:	81 95       	neg	r24
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	08 95       	ret

0000052a <__divmodhi4_neg2>:
 52a:	70 95       	com	r23
 52c:	61 95       	neg	r22
 52e:	7f 4f       	sbci	r23, 0xFF	; 255

00000530 <__divmodhi4_exit>:
 530:	08 95       	ret

00000532 <__udivmodhi4>:
 532:	aa 1b       	sub	r26, r26
 534:	bb 1b       	sub	r27, r27
 536:	51 e1       	ldi	r21, 0x11	; 17
 538:	07 c0       	rjmp	.+14     	; 0x548 <__udivmodhi4_ep>

0000053a <__udivmodhi4_loop>:
 53a:	aa 1f       	adc	r26, r26
 53c:	bb 1f       	adc	r27, r27
 53e:	a6 17       	cp	r26, r22
 540:	b7 07       	cpc	r27, r23
 542:	10 f0       	brcs	.+4      	; 0x548 <__udivmodhi4_ep>
 544:	a6 1b       	sub	r26, r22
 546:	b7 0b       	sbc	r27, r23

00000548 <__udivmodhi4_ep>:
 548:	88 1f       	adc	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	5a 95       	dec	r21
 54e:	a9 f7       	brne	.-22     	; 0x53a <__udivmodhi4_loop>
 550:	80 95       	com	r24
 552:	90 95       	com	r25
 554:	bc 01       	movw	r22, r24
 556:	cd 01       	movw	r24, r26
 558:	08 95       	ret

0000055a <_exit>:
 55a:	f8 94       	cli

0000055c <__stop_program>:
 55c:	ff cf       	rjmp	.-2      	; 0x55c <__stop_program>
