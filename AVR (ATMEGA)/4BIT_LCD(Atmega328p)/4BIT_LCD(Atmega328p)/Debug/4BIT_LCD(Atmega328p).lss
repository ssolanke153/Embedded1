
4BIT_LCD(Atmega328p).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a49  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ef  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036f  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002dc  00000000  00000000  00001b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001e31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  88:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <lcd_sendata>:


void lcd_sendata(unsigned char data)
{
	
	PORTB= data;
  90:	85 b9       	out	0x05, r24	; 5
	PORTC |=(1<<2);
  92:	42 9a       	sbi	0x08, 2	; 8
	PORTC &= ~(1<<2);
  94:	42 98       	cbi	0x08, 2	; 8
  96:	08 95       	ret

00000098 <lcd_data>:
	 	 
 }


void lcd_data(unsigned char data)
{
  98:	cf 93       	push	r28
  9a:	c8 2f       	mov	r28, r24
  PORTC |= (1<<0);
  9c:	40 9a       	sbi	0x08, 0	; 8
  lcd_sendata(data>>4);
  9e:	82 95       	swap	r24
  a0:	8f 70       	andi	r24, 0x0F	; 15
  a2:	0e 94 48 00 	call	0x90	; 0x90 <lcd_sendata>
  lcd_sendata(data);
  a6:	8c 2f       	mov	r24, r28
  a8:	0e 94 48 00 	call	0x90	; 0x90 <lcd_sendata>
  
}
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <lcd_cmd>:

void lcd_cmd(unsigned char data)
{
  b0:	cf 93       	push	r28
  b2:	c8 2f       	mov	r28, r24
	PORTC &= ~(1<<0);
  b4:	40 98       	cbi	0x08, 0	; 8
	lcd_sendata(data<<4);
  b6:	82 95       	swap	r24
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	0e 94 48 00 	call	0x90	; 0x90 <lcd_sendata>
	lcd_sendata(data);
  be:	8c 2f       	mov	r24, r28
  c0:	0e 94 48 00 	call	0x90	; 0x90 <lcd_sendata>
}
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <lcd_init>:
	 return 0;
 }

 void lcd_init()
 {
	 DDRC = DDRB = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	87 b9       	out	0x07, r24	; 7

	 PORTC &= ~(1<<0);
  ce:	40 98       	cbi	0x08, 0	; 8
	 PORTC &= ~(1<<1);
  d0:	41 98       	cbi	0x08, 1	; 8
	 PORTC |= (1<<2);
  d2:	42 9a       	sbi	0x08, 2	; 8
	 PORTC &=(1<<2);
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	84 70       	andi	r24, 0x04	; 4
  d8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e1       	ldi	r24, 0x1F	; 31
  dc:	9e e4       	ldi	r25, 0x4E	; 78
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_init+0x16>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_init+0x1c>
  e4:	00 00       	nop
	 _delay_ms(10);
	 lcd_cmd(0x04);
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
  ec:	8f e1       	ldi	r24, 0x1F	; 31
  ee:	9e e4       	ldi	r25, 0x4E	; 78
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_init+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_init+0x2e>
  f6:	00 00       	nop
	 _delay_ms(10);
	 lcd_cmd(0x028);
  f8:	88 e2       	ldi	r24, 0x28	; 40
  fa:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
  fe:	8f e1       	ldi	r24, 0x1F	; 31
 100:	9e e4       	ldi	r25, 0x4E	; 78
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_init+0x3a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_init+0x40>
 108:	00 00       	nop
	 _delay_ms(10);
	 lcd_cmd(0x38);
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
 110:	8f e1       	ldi	r24, 0x1F	; 31
 112:	9e e4       	ldi	r25, 0x4E	; 78
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_init+0x4c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_init+0x52>
 11a:	00 00       	nop
	 _delay_ms(10);
	 lcd_cmd(0x01);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
 122:	8f e1       	ldi	r24, 0x1F	; 31
 124:	9e e4       	ldi	r25, 0x4E	; 78
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x5e>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x64>
 12c:	00 00       	nop
	 _delay_ms(10);
	 lcd_cmd(0x80);
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	9e e4       	ldi	r25, 0x4E	; 78
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init+0x70>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init+0x76>
 13e:	00 00       	nop
	 _delay_ms(10);
	 lcd_cmd(0x0C);
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
 146:	8f e1       	ldi	r24, 0x1F	; 31
 148:	9e e4       	ldi	r25, 0x4E	; 78
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0x82>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_init+0x88>
 150:	00 00       	nop
	 _delay_ms(10);
	 lcd_cmd(0x06);
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_cmd>
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	9e e4       	ldi	r25, 0x4E	; 78
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_init+0x94>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_init+0x9a>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <main>:
 
unsigned char data;
 int main()
 {

	 lcd_init();
 166:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_init>
	 lcd_data('S');
 16a:	83 e5       	ldi	r24, 0x53	; 83
 16c:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_data>
	 
	 return 0;
 }
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
