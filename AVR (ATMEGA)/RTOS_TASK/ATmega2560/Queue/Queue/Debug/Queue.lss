
Queue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800200  0000258e  00002622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000258e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000af  008002cc  008002cc  000026ee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000274c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006329  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017df  00000000  00000000  00008f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033a9  00000000  00000000  0000a734  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f48  00000000  00000000  0000dae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e1b  00000000  00000000  0000ea28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005794  00000000  00000000  00010843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  00015fd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
       2:	00 00       	nop
       4:	b2 c0       	rjmp	.+356    	; 0x16a <__bad_interrupt>
       6:	00 00       	nop
       8:	b0 c0       	rjmp	.+352    	; 0x16a <__bad_interrupt>
       a:	00 00       	nop
       c:	ae c0       	rjmp	.+348    	; 0x16a <__bad_interrupt>
       e:	00 00       	nop
      10:	ac c0       	rjmp	.+344    	; 0x16a <__bad_interrupt>
      12:	00 00       	nop
      14:	aa c0       	rjmp	.+340    	; 0x16a <__bad_interrupt>
      16:	00 00       	nop
      18:	a8 c0       	rjmp	.+336    	; 0x16a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a6 c0       	rjmp	.+332    	; 0x16a <__bad_interrupt>
      1e:	00 00       	nop
      20:	a4 c0       	rjmp	.+328    	; 0x16a <__bad_interrupt>
      22:	00 00       	nop
      24:	a2 c0       	rjmp	.+324    	; 0x16a <__bad_interrupt>
      26:	00 00       	nop
      28:	a0 c0       	rjmp	.+320    	; 0x16a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9e c0       	rjmp	.+316    	; 0x16a <__bad_interrupt>
      2e:	00 00       	nop
      30:	1f c2       	rjmp	.+1086   	; 0x470 <__vector_12>
      32:	00 00       	nop
      34:	9a c0       	rjmp	.+308    	; 0x16a <__bad_interrupt>
      36:	00 00       	nop
      38:	98 c0       	rjmp	.+304    	; 0x16a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	96 c0       	rjmp	.+300    	; 0x16a <__bad_interrupt>
      3e:	00 00       	nop
      40:	94 c0       	rjmp	.+296    	; 0x16a <__bad_interrupt>
      42:	00 00       	nop
      44:	92 c0       	rjmp	.+292    	; 0x16a <__bad_interrupt>
      46:	00 00       	nop
      48:	90 c0       	rjmp	.+288    	; 0x16a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8e c0       	rjmp	.+284    	; 0x16a <__bad_interrupt>
      4e:	00 00       	nop
      50:	8c c0       	rjmp	.+280    	; 0x16a <__bad_interrupt>
      52:	00 00       	nop
      54:	8a c0       	rjmp	.+276    	; 0x16a <__bad_interrupt>
      56:	00 00       	nop
      58:	88 c0       	rjmp	.+272    	; 0x16a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	86 c0       	rjmp	.+268    	; 0x16a <__bad_interrupt>
      5e:	00 00       	nop
      60:	84 c0       	rjmp	.+264    	; 0x16a <__bad_interrupt>
      62:	00 00       	nop
      64:	82 c0       	rjmp	.+260    	; 0x16a <__bad_interrupt>
      66:	00 00       	nop
      68:	80 c0       	rjmp	.+256    	; 0x16a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7e c0       	rjmp	.+252    	; 0x16a <__bad_interrupt>
      6e:	00 00       	nop
      70:	7c c0       	rjmp	.+248    	; 0x16a <__bad_interrupt>
      72:	00 00       	nop
      74:	7a c0       	rjmp	.+244    	; 0x16a <__bad_interrupt>
      76:	00 00       	nop
      78:	78 c0       	rjmp	.+240    	; 0x16a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	76 c0       	rjmp	.+236    	; 0x16a <__bad_interrupt>
      7e:	00 00       	nop
      80:	74 c0       	rjmp	.+232    	; 0x16a <__bad_interrupt>
      82:	00 00       	nop
      84:	72 c0       	rjmp	.+228    	; 0x16a <__bad_interrupt>
      86:	00 00       	nop
      88:	70 c0       	rjmp	.+224    	; 0x16a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6e c0       	rjmp	.+220    	; 0x16a <__bad_interrupt>
      8e:	00 00       	nop
      90:	6c c0       	rjmp	.+216    	; 0x16a <__bad_interrupt>
      92:	00 00       	nop
      94:	6a c0       	rjmp	.+212    	; 0x16a <__bad_interrupt>
      96:	00 00       	nop
      98:	68 c0       	rjmp	.+208    	; 0x16a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	66 c0       	rjmp	.+204    	; 0x16a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	64 c0       	rjmp	.+200    	; 0x16a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	62 c0       	rjmp	.+196    	; 0x16a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	60 c0       	rjmp	.+192    	; 0x16a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5e c0       	rjmp	.+188    	; 0x16a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5c c0       	rjmp	.+184    	; 0x16a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5a c0       	rjmp	.+180    	; 0x16a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	58 c0       	rjmp	.+176    	; 0x16a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	56 c0       	rjmp	.+172    	; 0x16a <__bad_interrupt>
      be:	00 00       	nop
      c0:	54 c0       	rjmp	.+168    	; 0x16a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	52 c0       	rjmp	.+164    	; 0x16a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	50 c0       	rjmp	.+160    	; 0x16a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4e c0       	rjmp	.+156    	; 0x16a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4c c0       	rjmp	.+152    	; 0x16a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4a c0       	rjmp	.+148    	; 0x16a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	48 c0       	rjmp	.+144    	; 0x16a <__bad_interrupt>
      da:	00 00       	nop
      dc:	46 c0       	rjmp	.+140    	; 0x16a <__bad_interrupt>
      de:	00 00       	nop
      e0:	44 c0       	rjmp	.+136    	; 0x16a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6e 0d       	add	r22, r14
      e6:	6e 0d       	add	r22, r14
      e8:	6e 0d       	add	r22, r14
      ea:	95 0d       	add	r25, r5
      ec:	9d 0d       	add	r25, r13
      ee:	ab 0d       	add	r26, r11
      f0:	6e 0d       	add	r22, r14
      f2:	6e 0d       	add	r22, r14
      f4:	95 0d       	add	r25, r5
      f6:	9d 0d       	add	r25, r13

000000f8 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
      f8:	ba d5       	rcall	.+2932   	; 0xc6e <prvCheckTasksWaitingTermination>
      fa:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <pxReadyTasksLists>
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	08 f0       	brcs	.+2      	; 0x104 <prvIdleTask+0xc>
     102:	f3 d0       	rcall	.+486    	; 0x2ea <vPortYield>
     104:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vApplicationIdleHook>
     108:	f7 cf       	rjmp	.-18     	; 0xf8 <prvIdleTask>

0000010a <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	1f 92       	push	r1
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	ce 01       	movw	r24, r28
     116:	01 96       	adiw	r24, 0x01	; 1
     118:	0e 94 84 0b 	call	0x1708	; 0x1708 <prvGetNextExpireTime>
     11c:	69 81       	ldd	r22, Y+1	; 0x01
     11e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <prvProcessTimerOrBlockTask>
     122:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <prvProcessReceivedCommands>
     126:	f6 cf       	rjmp	.-20     	; 0x114 <prvTimerTask+0xa>

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf ef       	ldi	r28, 0xFF	; 255
     12e:	d1 e2       	ldi	r29, 0x21	; 33
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61
     134:	00 e0       	ldi	r16, 0x00	; 0
     136:	0c bf       	out	0x3c, r16	; 60

00000138 <__do_copy_data>:
     138:	12 e0       	ldi	r17, 0x02	; 2
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	ee e8       	ldi	r30, 0x8E	; 142
     140:	f5 e2       	ldi	r31, 0x25	; 37
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	ac 3c       	cpi	r26, 0xCC	; 204
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	23 e0       	ldi	r18, 0x03	; 3
     154:	ac ec       	ldi	r26, 0xCC	; 204
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	ab 37       	cpi	r26, 0x7B	; 123
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <main>
     166:	0c 94 c5 12 	jmp	0x258a	; 0x258a <_exit>

0000016a <__bad_interrupt>:
     16a:	4a cf       	rjmp	.-364    	; 0x0 <__vectors>

0000016c <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     16c:	fc 01       	movw	r30, r24
     16e:	03 96       	adiw	r24, 0x03	; 3
     170:	92 83       	std	Z+2, r25	; 0x02
     172:	81 83       	std	Z+1, r24	; 0x01
     174:	2f ef       	ldi	r18, 0xFF	; 255
     176:	3f ef       	ldi	r19, 0xFF	; 255
     178:	34 83       	std	Z+4, r19	; 0x04
     17a:	23 83       	std	Z+3, r18	; 0x03
     17c:	96 83       	std	Z+6, r25	; 0x06
     17e:	85 83       	std	Z+5, r24	; 0x05
     180:	90 87       	std	Z+8, r25	; 0x08
     182:	87 83       	std	Z+7, r24	; 0x07
     184:	10 82       	st	Z, r1
     186:	08 95       	ret

00000188 <vListInitialiseItem>:
     188:	fc 01       	movw	r30, r24
     18a:	11 86       	std	Z+9, r1	; 0x09
     18c:	10 86       	std	Z+8, r1	; 0x08
     18e:	08 95       	ret

00000190 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     196:	48 81       	ld	r20, Y
     198:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     19a:	4f 3f       	cpi	r20, 0xFF	; 255
     19c:	2f ef       	ldi	r18, 0xFF	; 255
     19e:	52 07       	cpc	r21, r18
     1a0:	21 f4       	brne	.+8      	; 0x1aa <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     1a2:	fc 01       	movw	r30, r24
     1a4:	a7 81       	ldd	r26, Z+7	; 0x07
     1a6:	b0 85       	ldd	r27, Z+8	; 0x08
     1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     1aa:	dc 01       	movw	r26, r24
     1ac:	13 96       	adiw	r26, 0x03	; 3
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <vListInsert+0x22>
     1b0:	df 01       	movw	r26, r30
     1b2:	12 96       	adiw	r26, 0x02	; 2
     1b4:	ed 91       	ld	r30, X+
     1b6:	fc 91       	ld	r31, X
     1b8:	13 97       	sbiw	r26, 0x03	; 3
     1ba:	20 81       	ld	r18, Z
     1bc:	31 81       	ldd	r19, Z+1	; 0x01
     1be:	42 17       	cp	r20, r18
     1c0:	53 07       	cpc	r21, r19
     1c2:	b0 f7       	brcc	.-20     	; 0x1b0 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     1c4:	12 96       	adiw	r26, 0x02	; 2
     1c6:	ed 91       	ld	r30, X+
     1c8:	fc 91       	ld	r31, X
     1ca:	13 97       	sbiw	r26, 0x03	; 3
     1cc:	fb 83       	std	Y+3, r31	; 0x03
     1ce:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     1d0:	d5 83       	std	Z+5, r29	; 0x05
     1d2:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     1d4:	bd 83       	std	Y+5, r27	; 0x05
     1d6:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     1d8:	13 96       	adiw	r26, 0x03	; 3
     1da:	dc 93       	st	X, r29
     1dc:	ce 93       	st	-X, r28
     1de:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     1e0:	99 87       	std	Y+9, r25	; 0x09
     1e2:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 81       	ld	r18, Z
     1e8:	2f 5f       	subi	r18, 0xFF	; 255
     1ea:	20 83       	st	Z, r18
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     1f8:	a0 85       	ldd	r26, Z+8	; 0x08
     1fa:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     1fc:	c2 81       	ldd	r28, Z+2	; 0x02
     1fe:	d3 81       	ldd	r29, Z+3	; 0x03
     200:	84 81       	ldd	r24, Z+4	; 0x04
     202:	95 81       	ldd	r25, Z+5	; 0x05
     204:	9d 83       	std	Y+5, r25	; 0x05
     206:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     208:	c4 81       	ldd	r28, Z+4	; 0x04
     20a:	d5 81       	ldd	r29, Z+5	; 0x05
     20c:	82 81       	ldd	r24, Z+2	; 0x02
     20e:	93 81       	ldd	r25, Z+3	; 0x03
     210:	9b 83       	std	Y+3, r25	; 0x03
     212:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     214:	11 96       	adiw	r26, 0x01	; 1
     216:	8d 91       	ld	r24, X+
     218:	9c 91       	ld	r25, X
     21a:	12 97       	sbiw	r26, 0x02	; 2
     21c:	e8 17       	cp	r30, r24
     21e:	f9 07       	cpc	r31, r25
     220:	31 f4       	brne	.+12     	; 0x22e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     222:	84 81       	ldd	r24, Z+4	; 0x04
     224:	95 81       	ldd	r25, Z+5	; 0x05
     226:	12 96       	adiw	r26, 0x02	; 2
     228:	9c 93       	st	X, r25
     22a:	8e 93       	st	-X, r24
     22c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     22e:	11 86       	std	Z+9, r1	; 0x09
     230:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     232:	8c 91       	ld	r24, X
     234:	81 50       	subi	r24, 0x01	; 1
     236:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     238:	8c 91       	ld	r24, X
}
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     240:	a8 95       	wdr
     242:	90 ec       	ldi	r25, 0xC0	; 192
     244:	88 e1       	ldi	r24, 0x18	; 24
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	a8 95       	wdr
     24c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     250:	0f be       	out	0x3f, r0	; 63
     252:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     256:	08 95       	ret

00000258 <pxPortInitialiseStack>:
     258:	fc 01       	movw	r30, r24
     25a:	60 83       	st	Z, r22
     25c:	31 97       	sbiw	r30, 0x01	; 1
     25e:	70 83       	st	Z, r23
     260:	31 97       	sbiw	r30, 0x01	; 1
     262:	10 82       	st	Z, r1
     264:	31 97       	sbiw	r30, 0x01	; 1
     266:	10 82       	st	Z, r1
     268:	31 97       	sbiw	r30, 0x01	; 1
     26a:	20 e8       	ldi	r18, 0x80	; 128
     26c:	20 83       	st	Z, r18
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	10 82       	st	Z, r1
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	10 82       	st	Z, r1
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	10 82       	st	Z, r1
     27a:	77 97       	sbiw	r30, 0x17	; 23
     27c:	40 83       	st	Z, r20
     27e:	31 97       	sbiw	r30, 0x01	; 1
     280:	50 83       	st	Z, r21
     282:	86 97       	sbiw	r24, 0x26	; 38
     284:	08 95       	ret

00000286 <xPortStartScheduler>:
     286:	dc df       	rcall	.-72     	; 0x240 <prvSetupTimerInterrupt>
     288:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <pxCurrentTCB>
     28c:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     290:	cd 91       	ld	r28, X+
     292:	cd bf       	out	0x3d, r28	; 61
     294:	dd 91       	ld	r29, X+
     296:	de bf       	out	0x3e, r29	; 62
     298:	ff 91       	pop	r31
     29a:	ef 91       	pop	r30
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	bf 91       	pop	r27
     2a2:	af 91       	pop	r26
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	7f 91       	pop	r23
     2aa:	6f 91       	pop	r22
     2ac:	5f 91       	pop	r21
     2ae:	4f 91       	pop	r20
     2b0:	3f 91       	pop	r19
     2b2:	2f 91       	pop	r18
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	ff 90       	pop	r15
     2ba:	ef 90       	pop	r14
     2bc:	df 90       	pop	r13
     2be:	cf 90       	pop	r12
     2c0:	bf 90       	pop	r11
     2c2:	af 90       	pop	r10
     2c4:	9f 90       	pop	r9
     2c6:	8f 90       	pop	r8
     2c8:	7f 90       	pop	r7
     2ca:	6f 90       	pop	r6
     2cc:	5f 90       	pop	r5
     2ce:	4f 90       	pop	r4
     2d0:	3f 90       	pop	r3
     2d2:	2f 90       	pop	r2
     2d4:	1f 90       	pop	r1
     2d6:	0f 90       	pop	r0
     2d8:	0c be       	out	0x3c, r0	; 60
     2da:	0f 90       	pop	r0
     2dc:	0b be       	out	0x3b, r0	; 59
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	08 95       	ret
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	08 95       	ret

000002ea <vPortYield>:
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	0f 92       	push	r0
     2f2:	0b b6       	in	r0, 0x3b	; 59
     2f4:	0f 92       	push	r0
     2f6:	0c b6       	in	r0, 0x3c	; 60
     2f8:	0f 92       	push	r0
     2fa:	1f 92       	push	r1
     2fc:	11 24       	eor	r1, r1
     2fe:	2f 92       	push	r2
     300:	3f 92       	push	r3
     302:	4f 92       	push	r4
     304:	5f 92       	push	r5
     306:	6f 92       	push	r6
     308:	7f 92       	push	r7
     30a:	8f 92       	push	r8
     30c:	9f 92       	push	r9
     30e:	af 92       	push	r10
     310:	bf 92       	push	r11
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	2f 93       	push	r18
     320:	3f 93       	push	r19
     322:	4f 93       	push	r20
     324:	5f 93       	push	r21
     326:	6f 93       	push	r22
     328:	7f 93       	push	r23
     32a:	8f 93       	push	r24
     32c:	9f 93       	push	r25
     32e:	af 93       	push	r26
     330:	bf 93       	push	r27
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ef 93       	push	r30
     338:	ff 93       	push	r31
     33a:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <pxCurrentTCB>
     33e:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     342:	0d b6       	in	r0, 0x3d	; 61
     344:	0d 92       	st	X+, r0
     346:	0e b6       	in	r0, 0x3e	; 62
     348:	0d 92       	st	X+, r0
     34a:	b6 d7       	rcall	.+3948   	; 0x12b8 <vTaskSwitchContext>
     34c:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <pxCurrentTCB>
     350:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     354:	cd 91       	ld	r28, X+
     356:	cd bf       	out	0x3d, r28	; 61
     358:	dd 91       	ld	r29, X+
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	ff 91       	pop	r31
     35e:	ef 91       	pop	r30
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	bf 91       	pop	r27
     366:	af 91       	pop	r26
     368:	9f 91       	pop	r25
     36a:	8f 91       	pop	r24
     36c:	7f 91       	pop	r23
     36e:	6f 91       	pop	r22
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	bf 90       	pop	r11
     386:	af 90       	pop	r10
     388:	9f 90       	pop	r9
     38a:	8f 90       	pop	r8
     38c:	7f 90       	pop	r7
     38e:	6f 90       	pop	r6
     390:	5f 90       	pop	r5
     392:	4f 90       	pop	r4
     394:	3f 90       	pop	r3
     396:	2f 90       	pop	r2
     398:	1f 90       	pop	r1
     39a:	0f 90       	pop	r0
     39c:	0c be       	out	0x3c, r0	; 60
     39e:	0f 90       	pop	r0
     3a0:	0b be       	out	0x3b, r0	; 59
     3a2:	0f 90       	pop	r0
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	0f 90       	pop	r0
     3a8:	08 95       	ret

000003aa <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	0f 92       	push	r0
     3b2:	0b b6       	in	r0, 0x3b	; 59
     3b4:	0f 92       	push	r0
     3b6:	0c b6       	in	r0, 0x3c	; 60
     3b8:	0f 92       	push	r0
     3ba:	1f 92       	push	r1
     3bc:	11 24       	eor	r1, r1
     3be:	2f 92       	push	r2
     3c0:	3f 92       	push	r3
     3c2:	4f 92       	push	r4
     3c4:	5f 92       	push	r5
     3c6:	6f 92       	push	r6
     3c8:	7f 92       	push	r7
     3ca:	8f 92       	push	r8
     3cc:	9f 92       	push	r9
     3ce:	af 92       	push	r10
     3d0:	bf 92       	push	r11
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	2f 93       	push	r18
     3e0:	3f 93       	push	r19
     3e2:	4f 93       	push	r20
     3e4:	5f 93       	push	r21
     3e6:	6f 93       	push	r22
     3e8:	7f 93       	push	r23
     3ea:	8f 93       	push	r24
     3ec:	9f 93       	push	r25
     3ee:	af 93       	push	r26
     3f0:	bf 93       	push	r27
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	ef 93       	push	r30
     3f8:	ff 93       	push	r31
     3fa:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <pxCurrentTCB>
     3fe:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     402:	0d b6       	in	r0, 0x3d	; 61
     404:	0d 92       	st	X+, r0
     406:	0e b6       	in	r0, 0x3e	; 62
     408:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     40a:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     40c:	58 d5       	rcall	.+2736   	; 0xebe <xTaskIncrementTick>
     40e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     410:	53 d7       	rcall	.+3750   	; 0x12b8 <vTaskSwitchContext>
     412:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     416:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     41a:	cd 91       	ld	r28, X+
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	dd 91       	ld	r29, X+
     420:	de bf       	out	0x3e, r29	; 62
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	bf 91       	pop	r27
     42c:	af 91       	pop	r26
     42e:	9f 91       	pop	r25
     430:	8f 91       	pop	r24
     432:	7f 91       	pop	r23
     434:	6f 91       	pop	r22
     436:	5f 91       	pop	r21
     438:	4f 91       	pop	r20
     43a:	3f 91       	pop	r19
     43c:	2f 91       	pop	r18
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	bf 90       	pop	r11
     44c:	af 90       	pop	r10
     44e:	9f 90       	pop	r9
     450:	8f 90       	pop	r8
     452:	7f 90       	pop	r7
     454:	6f 90       	pop	r6
     456:	5f 90       	pop	r5
     458:	4f 90       	pop	r4
     45a:	3f 90       	pop	r3
     45c:	2f 90       	pop	r2
     45e:	1f 90       	pop	r1
     460:	0f 90       	pop	r0
     462:	0c be       	out	0x3c, r0	; 60
     464:	0f 90       	pop	r0
     466:	0b be       	out	0x3b, r0	; 59
     468:	0f 90       	pop	r0
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	0f 90       	pop	r0
     46e:	08 95       	ret

00000470 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     470:	9c df       	rcall	.-200    	; 0x3aa <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     472:	18 95       	reti

00000474 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
    void * pvReturn;

    vTaskSuspendAll();
     47a:	11 d5       	rcall	.+2594   	; 0xe9e <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     47c:	ce 01       	movw	r24, r28
     47e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     482:	ec 01       	movw	r28, r24
     484:	35 d6       	rcall	.+3178   	; 0x10f0 <xTaskResumeAll>
            }
        }
    #endif
*/
    return pvReturn;
}
     486:	ce 01       	movw	r24, r28
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
    if( pv )
     492:	00 97       	sbiw	r24, 0x00	; 0
     494:	31 f0       	breq	.+12     	; 0x4a2 <vPortFree+0x14>
     496:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     498:	02 d5       	rcall	.+2564   	; 0xe9e <vTaskSuspendAll>
        {
            free( pv );
     49a:	ce 01       	movw	r24, r28
     49c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     4a0:	27 d6       	rcall	.+3150   	; 0x10f0 <xTaskResumeAll>
    }
}
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	0f 92       	push	r0
     4ae:	fc 01       	movw	r30, r24
     4b0:	82 8d       	ldd	r24, Z+26	; 0x1a
     4b2:	81 11       	cpse	r24, r1
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <prvIsQueueEmpty+0x12>
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <prvIsQueueEmpty+0x14>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0f 90       	pop	r0
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	08 95       	ret

000004c2 <prvIsQueueFull>:
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	0f 92       	push	r0
     4c8:	fc 01       	movw	r30, r24
     4ca:	22 8d       	ldd	r18, Z+26	; 0x1a
     4cc:	83 8d       	ldd	r24, Z+27	; 0x1b
     4ce:	28 13       	cpse	r18, r24
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <prvIsQueueFull+0x14>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <prvIsQueueFull+0x16>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	08 95       	ret

000004de <prvCopyDataToQueue>:
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	ec 01       	movw	r28, r24
     4e8:	04 2f       	mov	r16, r20
     4ea:	1a 8d       	ldd	r17, Y+26	; 0x1a
     4ec:	4c 8d       	ldd	r20, Y+28	; 0x1c
     4ee:	41 11       	cpse	r20, r1
     4f0:	0c c0       	rjmp	.+24     	; 0x50a <prvCopyDataToQueue+0x2c>
     4f2:	88 81       	ld	r24, Y
     4f4:	99 81       	ldd	r25, Y+1	; 0x01
     4f6:	89 2b       	or	r24, r25
     4f8:	09 f0       	breq	.+2      	; 0x4fc <prvCopyDataToQueue+0x1e>
     4fa:	42 c0       	rjmp	.+132    	; 0x580 <prvCopyDataToQueue+0xa2>
     4fc:	8c 81       	ldd	r24, Y+4	; 0x04
     4fe:	9d 81       	ldd	r25, Y+5	; 0x05
     500:	0e 94 21 0b 	call	0x1642	; 0x1642 <xTaskPriorityDisinherit>
     504:	1d 82       	std	Y+5, r1	; 0x05
     506:	1c 82       	std	Y+4, r1	; 0x04
     508:	42 c0       	rjmp	.+132    	; 0x58e <prvCopyDataToQueue+0xb0>
     50a:	01 11       	cpse	r16, r1
     50c:	17 c0       	rjmp	.+46     	; 0x53c <prvCopyDataToQueue+0x5e>
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	8a 81       	ldd	r24, Y+2	; 0x02
     512:	9b 81       	ldd	r25, Y+3	; 0x03
     514:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <memcpy>
     518:	2c 8d       	ldd	r18, Y+28	; 0x1c
     51a:	8a 81       	ldd	r24, Y+2	; 0x02
     51c:	9b 81       	ldd	r25, Y+3	; 0x03
     51e:	82 0f       	add	r24, r18
     520:	91 1d       	adc	r25, r1
     522:	9b 83       	std	Y+3, r25	; 0x03
     524:	8a 83       	std	Y+2, r24	; 0x02
     526:	2c 81       	ldd	r18, Y+4	; 0x04
     528:	3d 81       	ldd	r19, Y+5	; 0x05
     52a:	82 17       	cp	r24, r18
     52c:	93 07       	cpc	r25, r19
     52e:	50 f1       	brcs	.+84     	; 0x584 <prvCopyDataToQueue+0xa6>
     530:	88 81       	ld	r24, Y
     532:	99 81       	ldd	r25, Y+1	; 0x01
     534:	9b 83       	std	Y+3, r25	; 0x03
     536:	8a 83       	std	Y+2, r24	; 0x02
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	29 c0       	rjmp	.+82     	; 0x58e <prvCopyDataToQueue+0xb0>
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	8e 81       	ldd	r24, Y+6	; 0x06
     540:	9f 81       	ldd	r25, Y+7	; 0x07
     542:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <memcpy>
     546:	8c 8d       	ldd	r24, Y+28	; 0x1c
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	91 95       	neg	r25
     54c:	81 95       	neg	r24
     54e:	91 09       	sbc	r25, r1
     550:	2e 81       	ldd	r18, Y+6	; 0x06
     552:	3f 81       	ldd	r19, Y+7	; 0x07
     554:	28 0f       	add	r18, r24
     556:	39 1f       	adc	r19, r25
     558:	3f 83       	std	Y+7, r19	; 0x07
     55a:	2e 83       	std	Y+6, r18	; 0x06
     55c:	48 81       	ld	r20, Y
     55e:	59 81       	ldd	r21, Y+1	; 0x01
     560:	24 17       	cp	r18, r20
     562:	35 07       	cpc	r19, r21
     564:	30 f4       	brcc	.+12     	; 0x572 <prvCopyDataToQueue+0x94>
     566:	2c 81       	ldd	r18, Y+4	; 0x04
     568:	3d 81       	ldd	r19, Y+5	; 0x05
     56a:	82 0f       	add	r24, r18
     56c:	93 1f       	adc	r25, r19
     56e:	9f 83       	std	Y+7, r25	; 0x07
     570:	8e 83       	std	Y+6, r24	; 0x06
     572:	02 30       	cpi	r16, 0x02	; 2
     574:	49 f4       	brne	.+18     	; 0x588 <prvCopyDataToQueue+0xaa>
     576:	11 23       	and	r17, r17
     578:	49 f0       	breq	.+18     	; 0x58c <prvCopyDataToQueue+0xae>
     57a:	11 50       	subi	r17, 0x01	; 1
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	07 c0       	rjmp	.+14     	; 0x58e <prvCopyDataToQueue+0xb0>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	05 c0       	rjmp	.+10     	; 0x58e <prvCopyDataToQueue+0xb0>
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	03 c0       	rjmp	.+6      	; 0x58e <prvCopyDataToQueue+0xb0>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	01 c0       	rjmp	.+2      	; 0x58e <prvCopyDataToQueue+0xb0>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	1f 5f       	subi	r17, 0xFF	; 255
     590:	1a 8f       	std	Y+26, r17	; 0x1a
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	08 95       	ret

0000059c <prvCopyDataFromQueue>:
     59c:	fc 01       	movw	r30, r24
     59e:	44 8d       	ldd	r20, Z+28	; 0x1c
     5a0:	44 23       	and	r20, r20
     5a2:	a9 f0       	breq	.+42     	; 0x5ce <prvCopyDataFromQueue+0x32>
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	26 81       	ldd	r18, Z+6	; 0x06
     5a8:	37 81       	ldd	r19, Z+7	; 0x07
     5aa:	24 0f       	add	r18, r20
     5ac:	35 1f       	adc	r19, r21
     5ae:	37 83       	std	Z+7, r19	; 0x07
     5b0:	26 83       	std	Z+6, r18	; 0x06
     5b2:	84 81       	ldd	r24, Z+4	; 0x04
     5b4:	95 81       	ldd	r25, Z+5	; 0x05
     5b6:	28 17       	cp	r18, r24
     5b8:	39 07       	cpc	r19, r25
     5ba:	20 f0       	brcs	.+8      	; 0x5c4 <prvCopyDataFromQueue+0x28>
     5bc:	80 81       	ld	r24, Z
     5be:	91 81       	ldd	r25, Z+1	; 0x01
     5c0:	97 83       	std	Z+7, r25	; 0x07
     5c2:	86 83       	std	Z+6, r24	; 0x06
     5c4:	cb 01       	movw	r24, r22
     5c6:	66 81       	ldd	r22, Z+6	; 0x06
     5c8:	77 81       	ldd	r23, Z+7	; 0x07
     5ca:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <memcpy>
     5ce:	08 95       	ret

000005d0 <prvUnlockQueue>:
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	ec 01       	movw	r28, r24
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	0f 92       	push	r0
     5de:	1e 8d       	ldd	r17, Y+30	; 0x1e
     5e0:	0a c0       	rjmp	.+20     	; 0x5f6 <prvUnlockQueue+0x26>
     5e2:	89 89       	ldd	r24, Y+17	; 0x11
     5e4:	88 23       	and	r24, r24
     5e6:	49 f0       	breq	.+18     	; 0x5fa <prvUnlockQueue+0x2a>
     5e8:	ce 01       	movw	r24, r28
     5ea:	41 96       	adiw	r24, 0x11	; 17
     5ec:	12 d7       	rcall	.+3620   	; 0x1412 <xTaskRemoveFromEventList>
     5ee:	81 11       	cpse	r24, r1
     5f0:	0e 94 0f 0b 	call	0x161e	; 0x161e <vTaskMissedYield>
     5f4:	11 50       	subi	r17, 0x01	; 1
     5f6:	11 16       	cp	r1, r17
     5f8:	a4 f3       	brlt	.-24     	; 0x5e2 <prvUnlockQueue+0x12>
     5fa:	8f ef       	ldi	r24, 0xFF	; 255
     5fc:	8e 8f       	std	Y+30, r24	; 0x1e
     5fe:	0f 90       	pop	r0
     600:	0f be       	out	0x3f, r0	; 63
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	0f 92       	push	r0
     608:	1d 8d       	ldd	r17, Y+29	; 0x1d
     60a:	0a c0       	rjmp	.+20     	; 0x620 <prvUnlockQueue+0x50>
     60c:	88 85       	ldd	r24, Y+8	; 0x08
     60e:	88 23       	and	r24, r24
     610:	49 f0       	breq	.+18     	; 0x624 <prvUnlockQueue+0x54>
     612:	ce 01       	movw	r24, r28
     614:	08 96       	adiw	r24, 0x08	; 8
     616:	fd d6       	rcall	.+3578   	; 0x1412 <xTaskRemoveFromEventList>
     618:	81 11       	cpse	r24, r1
     61a:	0e 94 0f 0b 	call	0x161e	; 0x161e <vTaskMissedYield>
     61e:	11 50       	subi	r17, 0x01	; 1
     620:	11 16       	cp	r1, r17
     622:	a4 f3       	brlt	.-24     	; 0x60c <prvUnlockQueue+0x3c>
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	8d 8f       	std	Y+29, r24	; 0x1d
     628:	0f 90       	pop	r0
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	08 95       	ret

00000634 <xQueueGenericReset>:
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	ec 01       	movw	r28, r24
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	0f 92       	push	r0
     640:	e8 81       	ld	r30, Y
     642:	f9 81       	ldd	r31, Y+1	; 0x01
     644:	8b 8d       	ldd	r24, Y+27	; 0x1b
     646:	2c 8d       	ldd	r18, Y+28	; 0x1c
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	82 9f       	mul	r24, r18
     64e:	a0 01       	movw	r20, r0
     650:	83 9f       	mul	r24, r19
     652:	50 0d       	add	r21, r0
     654:	92 9f       	mul	r25, r18
     656:	50 0d       	add	r21, r0
     658:	11 24       	eor	r1, r1
     65a:	4e 0f       	add	r20, r30
     65c:	5f 1f       	adc	r21, r31
     65e:	5d 83       	std	Y+5, r21	; 0x05
     660:	4c 83       	std	Y+4, r20	; 0x04
     662:	1a 8e       	std	Y+26, r1	; 0x1a
     664:	fb 83       	std	Y+3, r31	; 0x03
     666:	ea 83       	std	Y+2, r30	; 0x02
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	28 9f       	mul	r18, r24
     66c:	a0 01       	movw	r20, r0
     66e:	29 9f       	mul	r18, r25
     670:	50 0d       	add	r21, r0
     672:	38 9f       	mul	r19, r24
     674:	50 0d       	add	r21, r0
     676:	11 24       	eor	r1, r1
     678:	cf 01       	movw	r24, r30
     67a:	84 0f       	add	r24, r20
     67c:	95 1f       	adc	r25, r21
     67e:	9f 83       	std	Y+7, r25	; 0x07
     680:	8e 83       	std	Y+6, r24	; 0x06
     682:	8f ef       	ldi	r24, 0xFF	; 255
     684:	8d 8f       	std	Y+29, r24	; 0x1d
     686:	8e 8f       	std	Y+30, r24	; 0x1e
     688:	61 11       	cpse	r22, r1
     68a:	0a c0       	rjmp	.+20     	; 0x6a0 <xQueueGenericReset+0x6c>
     68c:	88 85       	ldd	r24, Y+8	; 0x08
     68e:	88 23       	and	r24, r24
     690:	69 f0       	breq	.+26     	; 0x6ac <xQueueGenericReset+0x78>
     692:	ce 01       	movw	r24, r28
     694:	08 96       	adiw	r24, 0x08	; 8
     696:	bd d6       	rcall	.+3450   	; 0x1412 <xTaskRemoveFromEventList>
     698:	88 23       	and	r24, r24
     69a:	41 f0       	breq	.+16     	; 0x6ac <xQueueGenericReset+0x78>
     69c:	26 de       	rcall	.-948    	; 0x2ea <vPortYield>
     69e:	06 c0       	rjmp	.+12     	; 0x6ac <xQueueGenericReset+0x78>
     6a0:	ce 01       	movw	r24, r28
     6a2:	08 96       	adiw	r24, 0x08	; 8
     6a4:	63 dd       	rcall	.-1338   	; 0x16c <vListInitialise>
     6a6:	ce 01       	movw	r24, r28
     6a8:	41 96       	adiw	r24, 0x11	; 17
     6aa:	60 dd       	rcall	.-1344   	; 0x16c <vListInitialise>
     6ac:	0f 90       	pop	r0
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <prvInitialiseNewQueue>:
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	f8 01       	movw	r30, r16
     6be:	61 11       	cpse	r22, r1
     6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <prvInitialiseNewQueue+0x10>
     6c2:	11 83       	std	Z+1, r17	; 0x01
     6c4:	00 83       	st	Z, r16
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <prvInitialiseNewQueue+0x14>
     6c8:	51 83       	std	Z+1, r21	; 0x01
     6ca:	40 83       	st	Z, r20
     6cc:	83 8f       	std	Z+27, r24	; 0x1b
     6ce:	64 8f       	std	Z+28, r22	; 0x1c
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	cf 01       	movw	r24, r30
     6d4:	af df       	rcall	.-162    	; 0x634 <xQueueGenericReset>
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	08 95       	ret

000006dc <xQueueGenericCreate>:
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	f8 2e       	mov	r15, r24
     6ec:	e6 2e       	mov	r14, r22
     6ee:	d4 2e       	mov	r13, r20
     6f0:	86 9f       	mul	r24, r22
     6f2:	c0 01       	movw	r24, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	4f 96       	adiw	r24, 0x1f	; 31
     6f8:	bd de       	rcall	.-646    	; 0x474 <pvPortMalloc>
     6fa:	ec 01       	movw	r28, r24
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	41 f0       	breq	.+16     	; 0x710 <xQueueGenericCreate+0x34>
     700:	8c 01       	movw	r16, r24
     702:	2d 2d       	mov	r18, r13
     704:	ac 01       	movw	r20, r24
     706:	41 5e       	subi	r20, 0xE1	; 225
     708:	5f 4f       	sbci	r21, 0xFF	; 255
     70a:	6e 2d       	mov	r22, r14
     70c:	8f 2d       	mov	r24, r15
     70e:	d4 df       	rcall	.-88     	; 0x6b8 <prvInitialiseNewQueue>
     710:	ce 01       	movw	r24, r28
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	df 90       	pop	r13
     720:	08 95       	ret

00000722 <xQueueGenericSend>:
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	00 d0       	rcall	.+0      	; 0x734 <xQueueGenericSend+0x12>
     734:	1f 92       	push	r1
     736:	1f 92       	push	r1
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	8c 01       	movw	r16, r24
     73e:	7b 01       	movw	r14, r22
     740:	5d 83       	std	Y+5, r21	; 0x05
     742:	4c 83       	std	Y+4, r20	; 0x04
     744:	c2 2e       	mov	r12, r18
     746:	d1 2c       	mov	r13, r1
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	0f 92       	push	r0
     74e:	f8 01       	movw	r30, r16
     750:	92 8d       	ldd	r25, Z+26	; 0x1a
     752:	83 8d       	ldd	r24, Z+27	; 0x1b
     754:	98 17       	cp	r25, r24
     756:	18 f0       	brcs	.+6      	; 0x75e <xQueueGenericSend+0x3c>
     758:	f2 e0       	ldi	r31, 0x02	; 2
     75a:	cf 12       	cpse	r12, r31
     75c:	15 c0       	rjmp	.+42     	; 0x788 <xQueueGenericSend+0x66>
     75e:	4c 2d       	mov	r20, r12
     760:	b7 01       	movw	r22, r14
     762:	c8 01       	movw	r24, r16
     764:	bc de       	rcall	.-648    	; 0x4de <prvCopyDataToQueue>
     766:	f8 01       	movw	r30, r16
     768:	91 89       	ldd	r25, Z+17	; 0x11
     76a:	99 23       	and	r25, r25
     76c:	39 f0       	breq	.+14     	; 0x77c <xQueueGenericSend+0x5a>
     76e:	c8 01       	movw	r24, r16
     770:	41 96       	adiw	r24, 0x11	; 17
     772:	4f d6       	rcall	.+3230   	; 0x1412 <xTaskRemoveFromEventList>
     774:	88 23       	and	r24, r24
     776:	21 f0       	breq	.+8      	; 0x780 <xQueueGenericSend+0x5e>
     778:	b8 dd       	rcall	.-1168   	; 0x2ea <vPortYield>
     77a:	02 c0       	rjmp	.+4      	; 0x780 <xQueueGenericSend+0x5e>
     77c:	81 11       	cpse	r24, r1
     77e:	b5 dd       	rcall	.-1174   	; 0x2ea <vPortYield>
     780:	0f 90       	pop	r0
     782:	0f be       	out	0x3f, r0	; 63
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	41 c0       	rjmp	.+130    	; 0x80a <xQueueGenericSend+0xe8>
     788:	8c 81       	ldd	r24, Y+4	; 0x04
     78a:	9d 81       	ldd	r25, Y+5	; 0x05
     78c:	89 2b       	or	r24, r25
     78e:	21 f4       	brne	.+8      	; 0x798 <xQueueGenericSend+0x76>
     790:	0f 90       	pop	r0
     792:	0f be       	out	0x3f, r0	; 63
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	39 c0       	rjmp	.+114    	; 0x80a <xQueueGenericSend+0xe8>
     798:	d1 10       	cpse	r13, r1
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <xQueueGenericSend+0x84>
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	f5 d6       	rcall	.+3562   	; 0x158c <vTaskInternalSetTimeOutState>
     7a2:	dd 24       	eor	r13, r13
     7a4:	d3 94       	inc	r13
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	79 d3       	rcall	.+1778   	; 0xe9e <vTaskSuspendAll>
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	0f 92       	push	r0
     7b2:	f8 01       	movw	r30, r16
     7b4:	85 8d       	ldd	r24, Z+29	; 0x1d
     7b6:	8f 3f       	cpi	r24, 0xFF	; 255
     7b8:	09 f4       	brne	.+2      	; 0x7bc <xQueueGenericSend+0x9a>
     7ba:	15 8e       	std	Z+29, r1	; 0x1d
     7bc:	f8 01       	movw	r30, r16
     7be:	86 8d       	ldd	r24, Z+30	; 0x1e
     7c0:	8f 3f       	cpi	r24, 0xFF	; 255
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <xQueueGenericSend+0xa4>
     7c4:	16 8e       	std	Z+30, r1	; 0x1e
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	be 01       	movw	r22, r28
     7cc:	6c 5f       	subi	r22, 0xFC	; 252
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	ce 01       	movw	r24, r28
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	e6 d6       	rcall	.+3532   	; 0x15a2 <xTaskCheckForTimeOut>
     7d6:	81 11       	cpse	r24, r1
     7d8:	14 c0       	rjmp	.+40     	; 0x802 <xQueueGenericSend+0xe0>
     7da:	c8 01       	movw	r24, r16
     7dc:	72 de       	rcall	.-796    	; 0x4c2 <prvIsQueueFull>
     7de:	88 23       	and	r24, r24
     7e0:	61 f0       	breq	.+24     	; 0x7fa <xQueueGenericSend+0xd8>
     7e2:	6c 81       	ldd	r22, Y+4	; 0x04
     7e4:	7d 81       	ldd	r23, Y+5	; 0x05
     7e6:	c8 01       	movw	r24, r16
     7e8:	08 96       	adiw	r24, 0x08	; 8
     7ea:	ba d5       	rcall	.+2932   	; 0x1360 <vTaskPlaceOnEventList>
     7ec:	c8 01       	movw	r24, r16
     7ee:	f0 de       	rcall	.-544    	; 0x5d0 <prvUnlockQueue>
     7f0:	7f d4       	rcall	.+2302   	; 0x10f0 <xTaskResumeAll>
     7f2:	81 11       	cpse	r24, r1
     7f4:	a9 cf       	rjmp	.-174    	; 0x748 <xQueueGenericSend+0x26>
     7f6:	79 dd       	rcall	.-1294   	; 0x2ea <vPortYield>
     7f8:	a7 cf       	rjmp	.-178    	; 0x748 <xQueueGenericSend+0x26>
     7fa:	c8 01       	movw	r24, r16
     7fc:	e9 de       	rcall	.-558    	; 0x5d0 <prvUnlockQueue>
     7fe:	78 d4       	rcall	.+2288   	; 0x10f0 <xTaskResumeAll>
     800:	a3 cf       	rjmp	.-186    	; 0x748 <xQueueGenericSend+0x26>
     802:	c8 01       	movw	r24, r16
     804:	e5 de       	rcall	.-566    	; 0x5d0 <prvUnlockQueue>
     806:	74 d4       	rcall	.+2280   	; 0x10f0 <xTaskResumeAll>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	08 95       	ret

00000826 <xQueueGenericSendFromISR>:
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	8a 01       	movw	r16, r20
     834:	fc 01       	movw	r30, r24
     836:	52 8d       	ldd	r21, Z+26	; 0x1a
     838:	33 8d       	ldd	r19, Z+27	; 0x1b
     83a:	53 17       	cp	r21, r19
     83c:	10 f0       	brcs	.+4      	; 0x842 <xQueueGenericSendFromISR+0x1c>
     83e:	22 30       	cpi	r18, 0x02	; 2
     840:	f1 f4       	brne	.+60     	; 0x87e <xQueueGenericSendFromISR+0x58>
     842:	42 2f       	mov	r20, r18
     844:	78 01       	movw	r14, r16
     846:	ec 01       	movw	r28, r24
     848:	1e 8d       	ldd	r17, Y+30	; 0x1e
     84a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     84c:	ce 01       	movw	r24, r28
     84e:	47 de       	rcall	.-882    	; 0x4de <prvCopyDataToQueue>
     850:	1f 3f       	cpi	r17, 0xFF	; 255
     852:	79 f4       	brne	.+30     	; 0x872 <xQueueGenericSendFromISR+0x4c>
     854:	89 89       	ldd	r24, Y+17	; 0x11
     856:	88 23       	and	r24, r24
     858:	a1 f0       	breq	.+40     	; 0x882 <xQueueGenericSendFromISR+0x5c>
     85a:	ce 01       	movw	r24, r28
     85c:	41 96       	adiw	r24, 0x11	; 17
     85e:	d9 d5       	rcall	.+2994   	; 0x1412 <xTaskRemoveFromEventList>
     860:	88 23       	and	r24, r24
     862:	89 f0       	breq	.+34     	; 0x886 <xQueueGenericSendFromISR+0x60>
     864:	e1 14       	cp	r14, r1
     866:	f1 04       	cpc	r15, r1
     868:	81 f0       	breq	.+32     	; 0x88a <xQueueGenericSendFromISR+0x64>
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	f7 01       	movw	r30, r14
     86e:	80 83       	st	Z, r24
     870:	0d c0       	rjmp	.+26     	; 0x88c <xQueueGenericSendFromISR+0x66>
     872:	ff 24       	eor	r15, r15
     874:	f3 94       	inc	r15
     876:	f1 0e       	add	r15, r17
     878:	fe 8e       	std	Y+30, r15	; 0x1e
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	07 c0       	rjmp	.+14     	; 0x88c <xQueueGenericSendFromISR+0x66>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	05 c0       	rjmp	.+10     	; 0x88c <xQueueGenericSendFromISR+0x66>
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	03 c0       	rjmp	.+6      	; 0x88c <xQueueGenericSendFromISR+0x66>
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	01 c0       	rjmp	.+2      	; 0x88c <xQueueGenericSendFromISR+0x66>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	08 95       	ret

0000089a <xQueueReceive>:
     89a:	cf 92       	push	r12
     89c:	df 92       	push	r13
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <xQueueReceive+0x12>
     8ac:	1f 92       	push	r1
     8ae:	1f 92       	push	r1
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	8c 01       	movw	r16, r24
     8b6:	6b 01       	movw	r12, r22
     8b8:	5d 83       	std	Y+5, r21	; 0x05
     8ba:	4c 83       	std	Y+4, r20	; 0x04
     8bc:	e1 2c       	mov	r14, r1
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	0f 92       	push	r0
     8c4:	f8 01       	movw	r30, r16
     8c6:	f2 8c       	ldd	r15, Z+26	; 0x1a
     8c8:	ff 20       	and	r15, r15
     8ca:	91 f0       	breq	.+36     	; 0x8f0 <xQueueReceive+0x56>
     8cc:	b6 01       	movw	r22, r12
     8ce:	c8 01       	movw	r24, r16
     8d0:	65 de       	rcall	.-822    	; 0x59c <prvCopyDataFromQueue>
     8d2:	fa 94       	dec	r15
     8d4:	f8 01       	movw	r30, r16
     8d6:	f2 8e       	std	Z+26, r15	; 0x1a
     8d8:	80 85       	ldd	r24, Z+8	; 0x08
     8da:	88 23       	and	r24, r24
     8dc:	29 f0       	breq	.+10     	; 0x8e8 <xQueueReceive+0x4e>
     8de:	c8 01       	movw	r24, r16
     8e0:	08 96       	adiw	r24, 0x08	; 8
     8e2:	97 d5       	rcall	.+2862   	; 0x1412 <xTaskRemoveFromEventList>
     8e4:	81 11       	cpse	r24, r1
     8e6:	01 dd       	rcall	.-1534   	; 0x2ea <vPortYield>
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	46 c0       	rjmp	.+140    	; 0x97c <xQueueReceive+0xe2>
     8f0:	8c 81       	ldd	r24, Y+4	; 0x04
     8f2:	9d 81       	ldd	r25, Y+5	; 0x05
     8f4:	89 2b       	or	r24, r25
     8f6:	21 f4       	brne	.+8      	; 0x900 <xQueueReceive+0x66>
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	3e c0       	rjmp	.+124    	; 0x97c <xQueueReceive+0xe2>
     900:	e1 10       	cpse	r14, r1
     902:	05 c0       	rjmp	.+10     	; 0x90e <xQueueReceive+0x74>
     904:	ce 01       	movw	r24, r28
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	41 d6       	rcall	.+3202   	; 0x158c <vTaskInternalSetTimeOutState>
     90a:	ee 24       	eor	r14, r14
     90c:	e3 94       	inc	r14
     90e:	0f 90       	pop	r0
     910:	0f be       	out	0x3f, r0	; 63
     912:	c5 d2       	rcall	.+1418   	; 0xe9e <vTaskSuspendAll>
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	0f 92       	push	r0
     91a:	f8 01       	movw	r30, r16
     91c:	85 8d       	ldd	r24, Z+29	; 0x1d
     91e:	8f 3f       	cpi	r24, 0xFF	; 255
     920:	09 f4       	brne	.+2      	; 0x924 <xQueueReceive+0x8a>
     922:	15 8e       	std	Z+29, r1	; 0x1d
     924:	f8 01       	movw	r30, r16
     926:	86 8d       	ldd	r24, Z+30	; 0x1e
     928:	8f 3f       	cpi	r24, 0xFF	; 255
     92a:	09 f4       	brne	.+2      	; 0x92e <xQueueReceive+0x94>
     92c:	16 8e       	std	Z+30, r1	; 0x1e
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	be 01       	movw	r22, r28
     934:	6c 5f       	subi	r22, 0xFC	; 252
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	32 d6       	rcall	.+3172   	; 0x15a2 <xTaskCheckForTimeOut>
     93e:	81 11       	cpse	r24, r1
     940:	14 c0       	rjmp	.+40     	; 0x96a <xQueueReceive+0xd0>
     942:	c8 01       	movw	r24, r16
     944:	b1 dd       	rcall	.-1182   	; 0x4a8 <prvIsQueueEmpty>
     946:	88 23       	and	r24, r24
     948:	61 f0       	breq	.+24     	; 0x962 <xQueueReceive+0xc8>
     94a:	6c 81       	ldd	r22, Y+4	; 0x04
     94c:	7d 81       	ldd	r23, Y+5	; 0x05
     94e:	c8 01       	movw	r24, r16
     950:	41 96       	adiw	r24, 0x11	; 17
     952:	06 d5       	rcall	.+2572   	; 0x1360 <vTaskPlaceOnEventList>
     954:	c8 01       	movw	r24, r16
     956:	3c de       	rcall	.-904    	; 0x5d0 <prvUnlockQueue>
     958:	cb d3       	rcall	.+1942   	; 0x10f0 <xTaskResumeAll>
     95a:	81 11       	cpse	r24, r1
     95c:	b0 cf       	rjmp	.-160    	; 0x8be <xQueueReceive+0x24>
     95e:	c5 dc       	rcall	.-1654   	; 0x2ea <vPortYield>
     960:	ae cf       	rjmp	.-164    	; 0x8be <xQueueReceive+0x24>
     962:	c8 01       	movw	r24, r16
     964:	35 de       	rcall	.-918    	; 0x5d0 <prvUnlockQueue>
     966:	c4 d3       	rcall	.+1928   	; 0x10f0 <xTaskResumeAll>
     968:	aa cf       	rjmp	.-172    	; 0x8be <xQueueReceive+0x24>
     96a:	c8 01       	movw	r24, r16
     96c:	31 de       	rcall	.-926    	; 0x5d0 <prvUnlockQueue>
     96e:	c0 d3       	rcall	.+1920   	; 0x10f0 <xTaskResumeAll>
     970:	c8 01       	movw	r24, r16
     972:	9a dd       	rcall	.-1228   	; 0x4a8 <prvIsQueueEmpty>
     974:	88 23       	and	r24, r24
     976:	09 f4       	brne	.+2      	; 0x97a <xQueueReceive+0xe0>
     978:	a2 cf       	rjmp	.-188    	; 0x8be <xQueueReceive+0x24>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	08 95       	ret

00000998 <uxQueueMessagesWaiting>:
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	0f 92       	push	r0
     99e:	fc 01       	movw	r30, r24
     9a0:	82 8d       	ldd	r24, Z+26	; 0x1a
     9a2:	0f 90       	pop	r0
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	08 95       	ret

000009a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	0f 92       	push	r0
     9b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9b6:	8f 3f       	cpi	r24, 0xFF	; 255
     9b8:	09 f4       	brne	.+2      	; 0x9bc <vQueueWaitForMessageRestricted+0x14>
     9ba:	1d 8e       	std	Y+29, r1	; 0x1d
     9bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9be:	8f 3f       	cpi	r24, 0xFF	; 255
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <vQueueWaitForMessageRestricted+0x1c>
     9c2:	1e 8e       	std	Y+30, r1	; 0x1e
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     9c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9ca:	81 11       	cpse	r24, r1
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     9ce:	ce 01       	movw	r24, r28
     9d0:	41 96       	adiw	r24, 0x11	; 17
     9d2:	d7 d4       	rcall	.+2478   	; 0x1382 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     9d4:	ce 01       	movw	r24, r28
     9d6:	fc dd       	rcall	.-1032   	; 0x5d0 <prvUnlockQueue>
    }
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <prvResetNextTaskUnblockTime>:
     9de:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <pxDelayedTaskList>
     9e2:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <pxDelayedTaskList+0x1>
     9e6:	80 81       	ld	r24, Z
     9e8:	81 11       	cpse	r24, r1
     9ea:	07 c0       	rjmp	.+14     	; 0x9fa <prvResetNextTaskUnblockTime+0x1c>
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	9f ef       	ldi	r25, 0xFF	; 255
     9f0:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <xNextTaskUnblockTime+0x1>
     9f4:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <xNextTaskUnblockTime>
     9f8:	08 95       	ret
     9fa:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <pxDelayedTaskList>
     9fe:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <pxDelayedTaskList+0x1>
     a02:	05 80       	ldd	r0, Z+5	; 0x05
     a04:	f6 81       	ldd	r31, Z+6	; 0x06
     a06:	e0 2d       	mov	r30, r0
     a08:	80 81       	ld	r24, Z
     a0a:	91 81       	ldd	r25, Z+1	; 0x01
     a0c:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <xNextTaskUnblockTime+0x1>
     a10:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <xNextTaskUnblockTime>
     a14:	08 95       	ret

00000a16 <prvDeleteTCB>:
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	ec 01       	movw	r28, r24
     a1c:	8f 89       	ldd	r24, Y+23	; 0x17
     a1e:	98 8d       	ldd	r25, Y+24	; 0x18
     a20:	36 dd       	rcall	.-1428   	; 0x48e <vPortFree>
     a22:	ce 01       	movw	r24, r28
     a24:	34 dd       	rcall	.-1432   	; 0x48e <vPortFree>
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <prvInitialiseNewTask>:
     a2c:	4f 92       	push	r4
     a2e:	5f 92       	push	r5
     a30:	6f 92       	push	r6
     a32:	7f 92       	push	r7
     a34:	8f 92       	push	r8
     a36:	9f 92       	push	r9
     a38:	af 92       	push	r10
     a3a:	bf 92       	push	r11
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	2c 01       	movw	r4, r24
     a4c:	5b 01       	movw	r10, r22
     a4e:	4a 01       	movw	r8, r20
     a50:	39 01       	movw	r6, r18
     a52:	e6 01       	movw	r28, r12
     a54:	65 ea       	ldi	r22, 0xA5	; 165
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	8f 89       	ldd	r24, Y+23	; 0x17
     a5a:	98 8d       	ldd	r25, Y+24	; 0x18
     a5c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <memset>
     a60:	8f 89       	ldd	r24, Y+23	; 0x17
     a62:	98 8d       	ldd	r25, Y+24	; 0x18
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	82 1a       	sub	r8, r18
     a68:	91 08       	sbc	r9, r1
     a6a:	88 0e       	add	r8, r24
     a6c:	99 1e       	adc	r9, r25
     a6e:	a1 14       	cp	r10, r1
     a70:	b1 04       	cpc	r11, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <prvInitialiseNewTask+0x6a>
     a74:	15 c0       	rjmp	.+42     	; 0xaa0 <prvInitialiseNewTask+0x74>
     a76:	82 2f       	mov	r24, r18
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	f5 01       	movw	r30, r10
     a7c:	e8 0f       	add	r30, r24
     a7e:	f9 1f       	adc	r31, r25
     a80:	30 81       	ld	r19, Z
     a82:	de 01       	movw	r26, r28
     a84:	a8 0f       	add	r26, r24
     a86:	b9 1f       	adc	r27, r25
     a88:	59 96       	adiw	r26, 0x19	; 25
     a8a:	3c 93       	st	X, r19
     a8c:	80 81       	ld	r24, Z
     a8e:	88 23       	and	r24, r24
     a90:	29 f0       	breq	.+10     	; 0xa9c <prvInitialiseNewTask+0x70>
     a92:	2f 5f       	subi	r18, 0xFF	; 255
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <prvInitialiseNewTask+0x6c>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	28 30       	cpi	r18, 0x08	; 8
     a9a:	68 f3       	brcs	.-38     	; 0xa76 <prvInitialiseNewTask+0x4a>
     a9c:	18 a2       	std	Y+32, r1	; 0x20
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <prvInitialiseNewTask+0x76>
     aa0:	19 8e       	std	Y+25, r1	; 0x19
     aa2:	04 30       	cpi	r16, 0x04	; 4
     aa4:	08 f0       	brcs	.+2      	; 0xaa8 <prvInitialiseNewTask+0x7c>
     aa6:	03 e0       	ldi	r16, 0x03	; 3
     aa8:	0e 8b       	std	Y+22, r16	; 0x16
     aaa:	09 a3       	std	Y+33, r16	; 0x21
     aac:	1a a2       	std	Y+34, r1	; 0x22
     aae:	ce 01       	movw	r24, r28
     ab0:	02 96       	adiw	r24, 0x02	; 2
     ab2:	6a db       	rcall	.-2348   	; 0x188 <vListInitialiseItem>
     ab4:	ce 01       	movw	r24, r28
     ab6:	0c 96       	adiw	r24, 0x0c	; 12
     ab8:	67 db       	rcall	.-2354   	; 0x188 <vListInitialiseItem>
     aba:	d9 87       	std	Y+9, r29	; 0x09
     abc:	c8 87       	std	Y+8, r28	; 0x08
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	80 1b       	sub	r24, r16
     ac4:	91 09       	sbc	r25, r1
     ac6:	9d 87       	std	Y+13, r25	; 0x0d
     ac8:	8c 87       	std	Y+12, r24	; 0x0c
     aca:	db 8b       	std	Y+19, r29	; 0x13
     acc:	ca 8b       	std	Y+18, r28	; 0x12
     ace:	84 e0       	ldi	r24, 0x04	; 4
     ad0:	fe 01       	movw	r30, r28
     ad2:	b3 96       	adiw	r30, 0x23	; 35
     ad4:	df 01       	movw	r26, r30
     ad6:	1d 92       	st	X+, r1
     ad8:	8a 95       	dec	r24
     ada:	e9 f7       	brne	.-6      	; 0xad6 <prvInitialiseNewTask+0xaa>
     adc:	1f a2       	std	Y+39, r1	; 0x27
     ade:	a3 01       	movw	r20, r6
     ae0:	b2 01       	movw	r22, r4
     ae2:	c4 01       	movw	r24, r8
     ae4:	b9 db       	rcall	.-2190   	; 0x258 <pxPortInitialiseStack>
     ae6:	99 83       	std	Y+1, r25	; 0x01
     ae8:	88 83       	st	Y, r24
     aea:	e1 14       	cp	r14, r1
     aec:	f1 04       	cpc	r15, r1
     aee:	19 f0       	breq	.+6      	; 0xaf6 <prvInitialiseNewTask+0xca>
     af0:	f7 01       	movw	r30, r14
     af2:	d1 83       	std	Z+1, r29	; 0x01
     af4:	c0 83       	st	Z, r28
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	9f 90       	pop	r9
     b0a:	8f 90       	pop	r8
     b0c:	7f 90       	pop	r7
     b0e:	6f 90       	pop	r6
     b10:	5f 90       	pop	r5
     b12:	4f 90       	pop	r4
     b14:	08 95       	ret

00000b16 <prvInitialiseTaskLists>:
     b16:	cf 93       	push	r28
     b18:	c0 e0       	ldi	r28, 0x00	; 0
     b1a:	0f c0       	rjmp	.+30     	; 0xb3a <prvInitialiseTaskLists+0x24>
     b1c:	8c 2f       	mov	r24, r28
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	9c 01       	movw	r18, r24
     b22:	22 0f       	add	r18, r18
     b24:	33 1f       	adc	r19, r19
     b26:	22 0f       	add	r18, r18
     b28:	33 1f       	adc	r19, r19
     b2a:	22 0f       	add	r18, r18
     b2c:	33 1f       	adc	r19, r19
     b2e:	82 0f       	add	r24, r18
     b30:	93 1f       	adc	r25, r19
     b32:	83 5f       	subi	r24, 0xF3	; 243
     b34:	9c 4f       	sbci	r25, 0xFC	; 252
     b36:	1a db       	rcall	.-2508   	; 0x16c <vListInitialise>
     b38:	cf 5f       	subi	r28, 0xFF	; 255
     b3a:	c4 30       	cpi	r28, 0x04	; 4
     b3c:	78 f3       	brcs	.-34     	; 0xb1c <prvInitialiseTaskLists+0x6>
     b3e:	84 e0       	ldi	r24, 0x04	; 4
     b40:	93 e0       	ldi	r25, 0x03	; 3
     b42:	14 db       	rcall	.-2520   	; 0x16c <vListInitialise>
     b44:	8b ef       	ldi	r24, 0xFB	; 251
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	11 db       	rcall	.-2526   	; 0x16c <vListInitialise>
     b4a:	8e ee       	ldi	r24, 0xEE	; 238
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	0e db       	rcall	.-2532   	; 0x16c <vListInitialise>
     b50:	85 ee       	ldi	r24, 0xE5	; 229
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	0b db       	rcall	.-2538   	; 0x16c <vListInitialise>
     b56:	8b ed       	ldi	r24, 0xDB	; 219
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	08 db       	rcall	.-2544   	; 0x16c <vListInitialise>
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <pxDelayedTaskList+0x1>
     b64:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <pxDelayedTaskList>
     b68:	8b ef       	ldi	r24, 0xFB	; 251
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <pxOverflowDelayedTaskList+0x1>
     b70:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <pxOverflowDelayedTaskList>
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <prvAddNewTaskToReadyList>:
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	0f 92       	push	r0
     b84:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <uxCurrentNumberOfTasks>
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <uxCurrentNumberOfTasks>
     b8e:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <pxCurrentTCB>
     b92:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     b96:	89 2b       	or	r24, r25
     b98:	51 f4       	brne	.+20     	; 0xbae <prvAddNewTaskToReadyList+0x36>
     b9a:	d0 93 32 03 	sts	0x0332, r29	; 0x800332 <pxCurrentTCB+0x1>
     b9e:	c0 93 31 03 	sts	0x0331, r28	; 0x800331 <pxCurrentTCB>
     ba2:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <uxCurrentNumberOfTasks>
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	91 f4       	brne	.+36     	; 0xbce <prvAddNewTaskToReadyList+0x56>
     baa:	b5 df       	rcall	.-150    	; 0xb16 <prvInitialiseTaskLists>
     bac:	10 c0       	rjmp	.+32     	; 0xbce <prvAddNewTaskToReadyList+0x56>
     bae:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xSchedulerRunning>
     bb2:	81 11       	cpse	r24, r1
     bb4:	0c c0       	rjmp	.+24     	; 0xbce <prvAddNewTaskToReadyList+0x56>
     bb6:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <pxCurrentTCB>
     bba:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     bbe:	96 89       	ldd	r25, Z+22	; 0x16
     bc0:	8e 89       	ldd	r24, Y+22	; 0x16
     bc2:	89 17       	cp	r24, r25
     bc4:	20 f0       	brcs	.+8      	; 0xbce <prvAddNewTaskToReadyList+0x56>
     bc6:	d0 93 32 03 	sts	0x0332, r29	; 0x800332 <pxCurrentTCB+0x1>
     bca:	c0 93 31 03 	sts	0x0331, r28	; 0x800331 <pxCurrentTCB>
     bce:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <uxTaskNumber>
     bd2:	8f 5f       	subi	r24, 0xFF	; 255
     bd4:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <uxTaskNumber>
     bd8:	8e 89       	ldd	r24, Y+22	; 0x16
     bda:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <uxTopReadyPriority>
     bde:	98 17       	cp	r25, r24
     be0:	10 f4       	brcc	.+4      	; 0xbe6 <prvAddNewTaskToReadyList+0x6e>
     be2:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <uxTopReadyPriority>
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	fc 01       	movw	r30, r24
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	8e 0f       	add	r24, r30
     bf8:	9f 1f       	adc	r25, r31
     bfa:	fc 01       	movw	r30, r24
     bfc:	e3 5f       	subi	r30, 0xF3	; 243
     bfe:	fc 4f       	sbci	r31, 0xFC	; 252
     c00:	01 80       	ldd	r0, Z+1	; 0x01
     c02:	f2 81       	ldd	r31, Z+2	; 0x02
     c04:	e0 2d       	mov	r30, r0
     c06:	fd 83       	std	Y+5, r31	; 0x05
     c08:	ec 83       	std	Y+4, r30	; 0x04
     c0a:	84 81       	ldd	r24, Z+4	; 0x04
     c0c:	95 81       	ldd	r25, Z+5	; 0x05
     c0e:	9f 83       	std	Y+7, r25	; 0x07
     c10:	8e 83       	std	Y+6, r24	; 0x06
     c12:	a4 81       	ldd	r26, Z+4	; 0x04
     c14:	b5 81       	ldd	r27, Z+5	; 0x05
     c16:	ce 01       	movw	r24, r28
     c18:	02 96       	adiw	r24, 0x02	; 2
     c1a:	13 96       	adiw	r26, 0x03	; 3
     c1c:	9c 93       	st	X, r25
     c1e:	8e 93       	st	-X, r24
     c20:	12 97       	sbiw	r26, 0x02	; 2
     c22:	95 83       	std	Z+5, r25	; 0x05
     c24:	84 83       	std	Z+4, r24	; 0x04
     c26:	ee 89       	ldd	r30, Y+22	; 0x16
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	cf 01       	movw	r24, r30
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	e8 0f       	add	r30, r24
     c3a:	f9 1f       	adc	r31, r25
     c3c:	e3 5f       	subi	r30, 0xF3	; 243
     c3e:	fc 4f       	sbci	r31, 0xFC	; 252
     c40:	fb 87       	std	Y+11, r31	; 0x0b
     c42:	ea 87       	std	Y+10, r30	; 0x0a
     c44:	80 81       	ld	r24, Z
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 83       	st	Z, r24
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xSchedulerRunning>
     c52:	88 23       	and	r24, r24
     c54:	49 f0       	breq	.+18     	; 0xc68 <prvAddNewTaskToReadyList+0xf0>
     c56:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <pxCurrentTCB>
     c5a:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     c5e:	96 89       	ldd	r25, Z+22	; 0x16
     c60:	8e 89       	ldd	r24, Y+22	; 0x16
     c62:	98 17       	cp	r25, r24
     c64:	08 f4       	brcc	.+2      	; 0xc68 <prvAddNewTaskToReadyList+0xf0>
     c66:	41 db       	rcall	.-2430   	; 0x2ea <vPortYield>
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <prvCheckTasksWaitingTermination>:
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	1a c0       	rjmp	.+52     	; 0xca8 <prvCheckTasksWaitingTermination+0x3a>
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	0f 92       	push	r0
     c7a:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <xTasksWaitingTermination+0x5>
     c7e:	f0 91 eb 02 	lds	r31, 0x02EB	; 0x8002eb <xTasksWaitingTermination+0x6>
     c82:	c6 81       	ldd	r28, Z+6	; 0x06
     c84:	d7 81       	ldd	r29, Z+7	; 0x07
     c86:	ce 01       	movw	r24, r28
     c88:	02 96       	adiw	r24, 0x02	; 2
     c8a:	b3 da       	rcall	.-2714   	; 0x1f2 <uxListRemove>
     c8c:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <uxCurrentNumberOfTasks>
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <uxCurrentNumberOfTasks>
     c96:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <uxDeletedTasksWaitingCleanUp>
     c9a:	81 50       	subi	r24, 0x01	; 1
     c9c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <uxDeletedTasksWaitingCleanUp>
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	ce 01       	movw	r24, r28
     ca6:	b7 de       	rcall	.-658    	; 0xa16 <prvDeleteTCB>
     ca8:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <uxDeletedTasksWaitingCleanUp>
     cac:	81 11       	cpse	r24, r1
     cae:	e2 cf       	rjmp	.-60     	; 0xc74 <prvCheckTasksWaitingTermination+0x6>
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <prvAddCurrentTaskToDelayedList>:
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	ec 01       	movw	r28, r24
     cc2:	f6 2e       	mov	r15, r22
     cc4:	00 91 d8 02 	lds	r16, 0x02D8	; 0x8002d8 <xTickCount>
     cc8:	10 91 d9 02 	lds	r17, 0x02D9	; 0x8002d9 <xTickCount+0x1>
     ccc:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <pxCurrentTCB>
     cd0:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     cd4:	02 96       	adiw	r24, 0x02	; 2
     cd6:	8d da       	rcall	.-2790   	; 0x1f2 <uxListRemove>
     cd8:	cf 3f       	cpi	r28, 0xFF	; 255
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	d8 07       	cpc	r29, r24
     cde:	b1 f5       	brne	.+108    	; 0xd4c <prvAddCurrentTaskToDelayedList+0x96>
     ce0:	ff 20       	and	r15, r15
     ce2:	a1 f1       	breq	.+104    	; 0xd4c <prvAddCurrentTaskToDelayedList+0x96>
     ce4:	eb ed       	ldi	r30, 0xDB	; 219
     ce6:	f2 e0       	ldi	r31, 0x02	; 2
     ce8:	a1 81       	ldd	r26, Z+1	; 0x01
     cea:	b2 81       	ldd	r27, Z+2	; 0x02
     cec:	c0 91 31 03 	lds	r28, 0x0331	; 0x800331 <pxCurrentTCB>
     cf0:	d0 91 32 03 	lds	r29, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     cf4:	bd 83       	std	Y+5, r27	; 0x05
     cf6:	ac 83       	std	Y+4, r26	; 0x04
     cf8:	c0 91 31 03 	lds	r28, 0x0331	; 0x800331 <pxCurrentTCB>
     cfc:	d0 91 32 03 	lds	r29, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     d00:	14 96       	adiw	r26, 0x04	; 4
     d02:	8d 91       	ld	r24, X+
     d04:	9c 91       	ld	r25, X
     d06:	15 97       	sbiw	r26, 0x05	; 5
     d08:	9f 83       	std	Y+7, r25	; 0x07
     d0a:	8e 83       	std	Y+6, r24	; 0x06
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	cd 91       	ld	r28, X+
     d10:	dc 91       	ld	r29, X
     d12:	15 97       	sbiw	r26, 0x05	; 5
     d14:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <pxCurrentTCB>
     d18:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     d1c:	02 96       	adiw	r24, 0x02	; 2
     d1e:	9b 83       	std	Y+3, r25	; 0x03
     d20:	8a 83       	std	Y+2, r24	; 0x02
     d22:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <pxCurrentTCB>
     d26:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     d2a:	02 96       	adiw	r24, 0x02	; 2
     d2c:	15 96       	adiw	r26, 0x05	; 5
     d2e:	9c 93       	st	X, r25
     d30:	8e 93       	st	-X, r24
     d32:	14 97       	sbiw	r26, 0x04	; 4
     d34:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <pxCurrentTCB>
     d38:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     d3c:	1b 96       	adiw	r26, 0x0b	; 11
     d3e:	fc 93       	st	X, r31
     d40:	ee 93       	st	-X, r30
     d42:	1a 97       	sbiw	r26, 0x0a	; 10
     d44:	80 81       	ld	r24, Z
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	80 83       	st	Z, r24
     d4a:	2d c0       	rjmp	.+90     	; 0xda6 <prvAddCurrentTaskToDelayedList+0xf0>
     d4c:	c0 0f       	add	r28, r16
     d4e:	d1 1f       	adc	r29, r17
     d50:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <pxCurrentTCB>
     d54:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     d58:	d3 83       	std	Z+3, r29	; 0x03
     d5a:	c2 83       	std	Z+2, r28	; 0x02
     d5c:	c0 17       	cp	r28, r16
     d5e:	d1 07       	cpc	r29, r17
     d60:	60 f4       	brcc	.+24     	; 0xd7a <prvAddCurrentTaskToDelayedList+0xc4>
     d62:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <pxCurrentTCB>
     d66:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     d6a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <pxOverflowDelayedTaskList>
     d6e:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <pxOverflowDelayedTaskList+0x1>
     d72:	6e 5f       	subi	r22, 0xFE	; 254
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	0c da       	rcall	.-3048   	; 0x190 <vListInsert>
     d78:	16 c0       	rjmp	.+44     	; 0xda6 <prvAddCurrentTaskToDelayedList+0xf0>
     d7a:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <pxCurrentTCB>
     d7e:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
     d82:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <pxDelayedTaskList>
     d86:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <pxDelayedTaskList+0x1>
     d8a:	6e 5f       	subi	r22, 0xFE	; 254
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	00 da       	rcall	.-3072   	; 0x190 <vListInsert>
     d90:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <xNextTaskUnblockTime>
     d94:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <xNextTaskUnblockTime+0x1>
     d98:	c8 17       	cp	r28, r24
     d9a:	d9 07       	cpc	r29, r25
     d9c:	20 f4       	brcc	.+8      	; 0xda6 <prvAddCurrentTaskToDelayedList+0xf0>
     d9e:	d0 93 d0 02 	sts	0x02D0, r29	; 0x8002d0 <xNextTaskUnblockTime+0x1>
     da2:	c0 93 cf 02 	sts	0x02CF, r28	; 0x8002cf <xNextTaskUnblockTime>
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	08 95       	ret

00000db2 <xTaskCreate>:
     db2:	2f 92       	push	r2
     db4:	3f 92       	push	r3
     db6:	4f 92       	push	r4
     db8:	5f 92       	push	r5
     dba:	6f 92       	push	r6
     dbc:	7f 92       	push	r7
     dbe:	8f 92       	push	r8
     dc0:	9f 92       	push	r9
     dc2:	af 92       	push	r10
     dc4:	bf 92       	push	r11
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	3c 01       	movw	r6, r24
     dd6:	1b 01       	movw	r2, r22
     dd8:	4a 01       	movw	r8, r20
     dda:	29 01       	movw	r4, r18
     ddc:	ca 01       	movw	r24, r20
     dde:	4a db       	rcall	.-2412   	; 0x474 <pvPortMalloc>
     de0:	6c 01       	movw	r12, r24
     de2:	89 2b       	or	r24, r25
     de4:	61 f0       	breq	.+24     	; 0xdfe <xTaskCreate+0x4c>
     de6:	88 e2       	ldi	r24, 0x28	; 40
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	44 db       	rcall	.-2424   	; 0x474 <pvPortMalloc>
     dec:	ec 01       	movw	r28, r24
     dee:	89 2b       	or	r24, r25
     df0:	19 f0       	breq	.+6      	; 0xdf8 <xTaskCreate+0x46>
     df2:	d8 8e       	std	Y+24, r13	; 0x18
     df4:	cf 8a       	std	Y+23, r12	; 0x17
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <xTaskCreate+0x50>
     df8:	c6 01       	movw	r24, r12
     dfa:	49 db       	rcall	.-2414   	; 0x48e <vPortFree>
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <xTaskCreate+0x50>
     dfe:	c0 e0       	ldi	r28, 0x00	; 0
     e00:	d0 e0       	ldi	r29, 0x00	; 0
     e02:	20 97       	sbiw	r28, 0x00	; 0
     e04:	61 f0       	breq	.+24     	; 0xe1e <xTaskCreate+0x6c>
     e06:	a1 2c       	mov	r10, r1
     e08:	b1 2c       	mov	r11, r1
     e0a:	6e 01       	movw	r12, r28
     e0c:	92 01       	movw	r18, r4
     e0e:	a4 01       	movw	r20, r8
     e10:	b1 01       	movw	r22, r2
     e12:	c3 01       	movw	r24, r6
     e14:	0b de       	rcall	.-1002   	; 0xa2c <prvInitialiseNewTask>
     e16:	ce 01       	movw	r24, r28
     e18:	af de       	rcall	.-674    	; 0xb78 <prvAddNewTaskToReadyList>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <xTaskCreate+0x6e>
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	bf 90       	pop	r11
     e30:	af 90       	pop	r10
     e32:	9f 90       	pop	r9
     e34:	8f 90       	pop	r8
     e36:	7f 90       	pop	r7
     e38:	6f 90       	pop	r6
     e3a:	5f 90       	pop	r5
     e3c:	4f 90       	pop	r4
     e3e:	3f 90       	pop	r3
     e40:	2f 90       	pop	r2
     e42:	08 95       	ret

00000e44 <vTaskStartScheduler>:
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	0f 2e       	mov	r0, r31
     e4c:	fd ec       	ldi	r31, 0xCD	; 205
     e4e:	ef 2e       	mov	r14, r31
     e50:	f2 e0       	ldi	r31, 0x02	; 2
     e52:	ff 2e       	mov	r15, r31
     e54:	f0 2d       	mov	r31, r0
     e56:	00 e0       	ldi	r16, 0x00	; 0
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 ec       	ldi	r20, 0xC0	; 192
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	6d e0       	ldi	r22, 0x0D	; 13
     e62:	72 e0       	ldi	r23, 0x02	; 2
     e64:	8c e7       	ldi	r24, 0x7C	; 124
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a4 df       	rcall	.-184    	; 0xdb2 <xTaskCreate>
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <vTaskStartScheduler+0x2c>
     e6e:	b9 d4       	rcall	.+2418   	; 0x17e2 <xTimerCreateTimerTask>
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	79 f4       	brne	.+30     	; 0xe92 <vTaskStartScheduler+0x4e>
     e74:	f8 94       	cli
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	9f ef       	ldi	r25, 0xFF	; 255
     e7a:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <xNextTaskUnblockTime+0x1>
     e7e:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <xNextTaskUnblockTime>
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <xSchedulerRunning>
     e88:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <xTickCount+0x1>
     e8c:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <xTickCount>
     e90:	fa d9       	rcall	.-3084   	; 0x286 <xPortStartScheduler>
     e92:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	08 95       	ret

00000e9e <vTaskSuspendAll>:
     e9e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__data_end>
     ea8:	08 95       	ret

00000eaa <xTaskGetTickCount>:
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	0f 92       	push	r0
     eb0:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <xTickCount>
     eb4:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <xTickCount+0x1>
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	08 95       	ret

00000ebe <xTaskIncrementTick>:
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
     eca:	81 11       	cpse	r24, r1
     ecc:	00 c1       	rjmp	.+512    	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
     ece:	c0 91 d8 02 	lds	r28, 0x02D8	; 0x8002d8 <xTickCount>
     ed2:	d0 91 d9 02 	lds	r29, 0x02D9	; 0x8002d9 <xTickCount+0x1>
     ed6:	8e 01       	movw	r16, r28
     ed8:	0f 5f       	subi	r16, 0xFF	; 255
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	10 93 d9 02 	sts	0x02D9, r17	; 0x8002d9 <xTickCount+0x1>
     ee0:	00 93 d8 02 	sts	0x02D8, r16	; 0x8002d8 <xTickCount>
     ee4:	01 15       	cp	r16, r1
     ee6:	11 05       	cpc	r17, r1
     ee8:	b1 f4       	brne	.+44     	; 0xf16 <xTaskIncrementTick+0x58>
     eea:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <pxDelayedTaskList>
     eee:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <pxDelayedTaskList+0x1>
     ef2:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <pxOverflowDelayedTaskList>
     ef6:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <pxOverflowDelayedTaskList+0x1>
     efa:	30 93 fa 02 	sts	0x02FA, r19	; 0x8002fa <pxDelayedTaskList+0x1>
     efe:	20 93 f9 02 	sts	0x02F9, r18	; 0x8002f9 <pxDelayedTaskList>
     f02:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <pxOverflowDelayedTaskList+0x1>
     f06:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <pxOverflowDelayedTaskList>
     f0a:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <xNumOfOverflows>
     f0e:	8f 5f       	subi	r24, 0xFF	; 255
     f10:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <xNumOfOverflows>
     f14:	64 dd       	rcall	.-1336   	; 0x9de <prvResetNextTaskUnblockTime>
     f16:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <xNextTaskUnblockTime>
     f1a:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <xNextTaskUnblockTime+0x1>
     f1e:	08 17       	cp	r16, r24
     f20:	19 07       	cpc	r17, r25
     f22:	20 f4       	brcc	.+8      	; 0xf2c <xTaskIncrementTick+0x6e>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	b8 c0       	rjmp	.+368    	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <xTaskIncrementTick+0x70>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <pxDelayedTaskList>
     f32:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <pxDelayedTaskList+0x1>
     f36:	90 81       	ld	r25, Z
     f38:	91 11       	cpse	r25, r1
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <xTaskIncrementTick+0x8c>
     f3c:	2f ef       	ldi	r18, 0xFF	; 255
     f3e:	3f ef       	ldi	r19, 0xFF	; 255
     f40:	30 93 d0 02 	sts	0x02D0, r19	; 0x8002d0 <xNextTaskUnblockTime+0x1>
     f44:	20 93 cf 02 	sts	0x02CF, r18	; 0x8002cf <xNextTaskUnblockTime>
     f48:	a7 c0       	rjmp	.+334    	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
     f4a:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <pxDelayedTaskList>
     f4e:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <pxDelayedTaskList+0x1>
     f52:	05 80       	ldd	r0, Z+5	; 0x05
     f54:	f6 81       	ldd	r31, Z+6	; 0x06
     f56:	e0 2d       	mov	r30, r0
     f58:	06 80       	ldd	r0, Z+6	; 0x06
     f5a:	f7 81       	ldd	r31, Z+7	; 0x07
     f5c:	e0 2d       	mov	r30, r0
     f5e:	22 81       	ldd	r18, Z+2	; 0x02
     f60:	33 81       	ldd	r19, Z+3	; 0x03
     f62:	02 17       	cp	r16, r18
     f64:	13 07       	cpc	r17, r19
     f66:	28 f4       	brcc	.+10     	; 0xf72 <xTaskIncrementTick+0xb4>
     f68:	30 93 d0 02 	sts	0x02D0, r19	; 0x8002d0 <xNextTaskUnblockTime+0x1>
     f6c:	20 93 cf 02 	sts	0x02CF, r18	; 0x8002cf <xNextTaskUnblockTime>
     f70:	93 c0       	rjmp	.+294    	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
     f72:	a2 85       	ldd	r26, Z+10	; 0x0a
     f74:	b3 85       	ldd	r27, Z+11	; 0x0b
     f76:	24 81       	ldd	r18, Z+4	; 0x04
     f78:	35 81       	ldd	r19, Z+5	; 0x05
     f7a:	46 81       	ldd	r20, Z+6	; 0x06
     f7c:	57 81       	ldd	r21, Z+7	; 0x07
     f7e:	e9 01       	movw	r28, r18
     f80:	5d 83       	std	Y+5, r21	; 0x05
     f82:	4c 83       	std	Y+4, r20	; 0x04
     f84:	26 81       	ldd	r18, Z+6	; 0x06
     f86:	37 81       	ldd	r19, Z+7	; 0x07
     f88:	44 81       	ldd	r20, Z+4	; 0x04
     f8a:	55 81       	ldd	r21, Z+5	; 0x05
     f8c:	e9 01       	movw	r28, r18
     f8e:	5b 83       	std	Y+3, r21	; 0x03
     f90:	4a 83       	std	Y+2, r20	; 0x02
     f92:	11 96       	adiw	r26, 0x01	; 1
     f94:	2d 91       	ld	r18, X+
     f96:	3c 91       	ld	r19, X
     f98:	12 97       	sbiw	r26, 0x02	; 2
     f9a:	af 01       	movw	r20, r30
     f9c:	4e 5f       	subi	r20, 0xFE	; 254
     f9e:	5f 4f       	sbci	r21, 0xFF	; 255
     fa0:	24 17       	cp	r18, r20
     fa2:	35 07       	cpc	r19, r21
     fa4:	31 f4       	brne	.+12     	; 0xfb2 <xTaskIncrementTick+0xf4>
     fa6:	26 81       	ldd	r18, Z+6	; 0x06
     fa8:	37 81       	ldd	r19, Z+7	; 0x07
     faa:	12 96       	adiw	r26, 0x02	; 2
     fac:	3c 93       	st	X, r19
     fae:	2e 93       	st	-X, r18
     fb0:	11 97       	sbiw	r26, 0x01	; 1
     fb2:	13 86       	std	Z+11, r1	; 0x0b
     fb4:	12 86       	std	Z+10, r1	; 0x0a
     fb6:	9c 91       	ld	r25, X
     fb8:	91 50       	subi	r25, 0x01	; 1
     fba:	9c 93       	st	X, r25
     fbc:	a4 89       	ldd	r26, Z+20	; 0x14
     fbe:	b5 89       	ldd	r27, Z+21	; 0x15
     fc0:	10 97       	sbiw	r26, 0x00	; 0
     fc2:	19 f1       	breq	.+70     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     fc4:	26 85       	ldd	r18, Z+14	; 0x0e
     fc6:	37 85       	ldd	r19, Z+15	; 0x0f
     fc8:	60 89       	ldd	r22, Z+16	; 0x10
     fca:	71 89       	ldd	r23, Z+17	; 0x11
     fcc:	e9 01       	movw	r28, r18
     fce:	7d 83       	std	Y+5, r23	; 0x05
     fd0:	6c 83       	std	Y+4, r22	; 0x04
     fd2:	20 89       	ldd	r18, Z+16	; 0x10
     fd4:	31 89       	ldd	r19, Z+17	; 0x11
     fd6:	66 85       	ldd	r22, Z+14	; 0x0e
     fd8:	77 85       	ldd	r23, Z+15	; 0x0f
     fda:	e9 01       	movw	r28, r18
     fdc:	7b 83       	std	Y+3, r23	; 0x03
     fde:	6a 83       	std	Y+2, r22	; 0x02
     fe0:	11 96       	adiw	r26, 0x01	; 1
     fe2:	6d 91       	ld	r22, X+
     fe4:	7c 91       	ld	r23, X
     fe6:	12 97       	sbiw	r26, 0x02	; 2
     fe8:	9f 01       	movw	r18, r30
     fea:	24 5f       	subi	r18, 0xF4	; 244
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	62 17       	cp	r22, r18
     ff0:	73 07       	cpc	r23, r19
     ff2:	31 f4       	brne	.+12     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ff4:	20 89       	ldd	r18, Z+16	; 0x10
     ff6:	31 89       	ldd	r19, Z+17	; 0x11
     ff8:	12 96       	adiw	r26, 0x02	; 2
     ffa:	3c 93       	st	X, r19
     ffc:	2e 93       	st	-X, r18
     ffe:	11 97       	sbiw	r26, 0x01	; 1
    1000:	15 8a       	std	Z+21, r1	; 0x15
    1002:	14 8a       	std	Z+20, r1	; 0x14
    1004:	9c 91       	ld	r25, X
    1006:	91 50       	subi	r25, 0x01	; 1
    1008:	9c 93       	st	X, r25
    100a:	26 89       	ldd	r18, Z+22	; 0x16
    100c:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <uxTopReadyPriority>
    1010:	92 17       	cp	r25, r18
    1012:	10 f4       	brcc	.+4      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1014:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <uxTopReadyPriority>
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	d9 01       	movw	r26, r18
    101c:	aa 0f       	add	r26, r26
    101e:	bb 1f       	adc	r27, r27
    1020:	aa 0f       	add	r26, r26
    1022:	bb 1f       	adc	r27, r27
    1024:	aa 0f       	add	r26, r26
    1026:	bb 1f       	adc	r27, r27
    1028:	2a 0f       	add	r18, r26
    102a:	3b 1f       	adc	r19, r27
    102c:	d9 01       	movw	r26, r18
    102e:	a3 5f       	subi	r26, 0xF3	; 243
    1030:	bc 4f       	sbci	r27, 0xFC	; 252
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	0d 90       	ld	r0, X+
    1036:	bc 91       	ld	r27, X
    1038:	a0 2d       	mov	r26, r0
    103a:	b5 83       	std	Z+5, r27	; 0x05
    103c:	a4 83       	std	Z+4, r26	; 0x04
    103e:	14 96       	adiw	r26, 0x04	; 4
    1040:	2d 91       	ld	r18, X+
    1042:	3c 91       	ld	r19, X
    1044:	15 97       	sbiw	r26, 0x05	; 5
    1046:	37 83       	std	Z+7, r19	; 0x07
    1048:	26 83       	std	Z+6, r18	; 0x06
    104a:	14 96       	adiw	r26, 0x04	; 4
    104c:	2d 91       	ld	r18, X+
    104e:	3c 91       	ld	r19, X
    1050:	15 97       	sbiw	r26, 0x05	; 5
    1052:	e9 01       	movw	r28, r18
    1054:	5b 83       	std	Y+3, r21	; 0x03
    1056:	4a 83       	std	Y+2, r20	; 0x02
    1058:	15 96       	adiw	r26, 0x05	; 5
    105a:	5c 93       	st	X, r21
    105c:	4e 93       	st	-X, r20
    105e:	14 97       	sbiw	r26, 0x04	; 4
    1060:	a6 89       	ldd	r26, Z+22	; 0x16
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	9d 01       	movw	r18, r26
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	22 0f       	add	r18, r18
    106c:	33 1f       	adc	r19, r19
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	a2 0f       	add	r26, r18
    1074:	b3 1f       	adc	r27, r19
    1076:	a3 5f       	subi	r26, 0xF3	; 243
    1078:	bc 4f       	sbci	r27, 0xFC	; 252
    107a:	b3 87       	std	Z+11, r27	; 0x0b
    107c:	a2 87       	std	Z+10, r26	; 0x0a
    107e:	9c 91       	ld	r25, X
    1080:	9f 5f       	subi	r25, 0xFF	; 255
    1082:	9c 93       	st	X, r25
    1084:	26 89       	ldd	r18, Z+22	; 0x16
    1086:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <pxCurrentTCB>
    108a:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
    108e:	96 89       	ldd	r25, Z+22	; 0x16
    1090:	29 17       	cp	r18, r25
    1092:	08 f0       	brcs	.+2      	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    1094:	49 cf       	rjmp	.-366    	; 0xf28 <xTaskIncrementTick+0x6a>
    1096:	4b cf       	rjmp	.-362    	; 0xf2e <xTaskIncrementTick+0x70>
    1098:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <pxCurrentTCB>
    109c:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
    10a0:	26 89       	ldd	r18, Z+22	; 0x16
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	f9 01       	movw	r30, r18
    10a6:	ee 0f       	add	r30, r30
    10a8:	ff 1f       	adc	r31, r31
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	2e 0f       	add	r18, r30
    10b4:	3f 1f       	adc	r19, r31
    10b6:	f9 01       	movw	r30, r18
    10b8:	e3 5f       	subi	r30, 0xF3	; 243
    10ba:	fc 4f       	sbci	r31, 0xFC	; 252
    10bc:	90 81       	ld	r25, Z
    10be:	92 30       	cpi	r25, 0x02	; 2
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <__EEPROM_REGION_LENGTH__+0xc4>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <xYieldPending>
    10c8:	91 11       	cpse	r25, r1
    10ca:	0c c0       	rjmp	.+24     	; 0x10e4 <__EEPROM_REGION_LENGTH__+0xe4>
    10cc:	0c c0       	rjmp	.+24     	; 0x10e6 <__EEPROM_REGION_LENGTH__+0xe6>
    10ce:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <xPendedTicks>
    10d2:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <xPendedTicks+0x1>
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <xPendedTicks+0x1>
    10dc:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <xPendedTicks>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <__EEPROM_REGION_LENGTH__+0xe6>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <xTaskResumeAll>:
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	0f 92       	push	r0
    10fa:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
    10fe:	81 50       	subi	r24, 0x01	; 1
    1100:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__data_end>
    1104:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
    1108:	81 11       	cpse	r24, r1
    110a:	bc c0       	rjmp	.+376    	; 0x1284 <xTaskResumeAll+0x194>
    110c:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <uxCurrentNumberOfTasks>
    1110:	81 11       	cpse	r24, r1
    1112:	96 c0       	rjmp	.+300    	; 0x1240 <xTaskResumeAll+0x150>
    1114:	ba c0       	rjmp	.+372    	; 0x128a <xTaskResumeAll+0x19a>
    1116:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <xPendingReadyList+0x5>
    111a:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <xPendingReadyList+0x6>
    111e:	06 80       	ldd	r0, Z+6	; 0x06
    1120:	f7 81       	ldd	r31, Z+7	; 0x07
    1122:	e0 2d       	mov	r30, r0
    1124:	a4 89       	ldd	r26, Z+20	; 0x14
    1126:	b5 89       	ldd	r27, Z+21	; 0x15
    1128:	c6 85       	ldd	r28, Z+14	; 0x0e
    112a:	d7 85       	ldd	r29, Z+15	; 0x0f
    112c:	80 89       	ldd	r24, Z+16	; 0x10
    112e:	91 89       	ldd	r25, Z+17	; 0x11
    1130:	9d 83       	std	Y+5, r25	; 0x05
    1132:	8c 83       	std	Y+4, r24	; 0x04
    1134:	c0 89       	ldd	r28, Z+16	; 0x10
    1136:	d1 89       	ldd	r29, Z+17	; 0x11
    1138:	86 85       	ldd	r24, Z+14	; 0x0e
    113a:	97 85       	ldd	r25, Z+15	; 0x0f
    113c:	9b 83       	std	Y+3, r25	; 0x03
    113e:	8a 83       	std	Y+2, r24	; 0x02
    1140:	11 96       	adiw	r26, 0x01	; 1
    1142:	2d 91       	ld	r18, X+
    1144:	3c 91       	ld	r19, X
    1146:	12 97       	sbiw	r26, 0x02	; 2
    1148:	cf 01       	movw	r24, r30
    114a:	0c 96       	adiw	r24, 0x0c	; 12
    114c:	28 17       	cp	r18, r24
    114e:	39 07       	cpc	r19, r25
    1150:	31 f4       	brne	.+12     	; 0x115e <xTaskResumeAll+0x6e>
    1152:	80 89       	ldd	r24, Z+16	; 0x10
    1154:	91 89       	ldd	r25, Z+17	; 0x11
    1156:	12 96       	adiw	r26, 0x02	; 2
    1158:	9c 93       	st	X, r25
    115a:	8e 93       	st	-X, r24
    115c:	11 97       	sbiw	r26, 0x01	; 1
    115e:	15 8a       	std	Z+21, r1	; 0x15
    1160:	14 8a       	std	Z+20, r1	; 0x14
    1162:	8c 91       	ld	r24, X
    1164:	81 50       	subi	r24, 0x01	; 1
    1166:	8c 93       	st	X, r24
    1168:	a2 85       	ldd	r26, Z+10	; 0x0a
    116a:	b3 85       	ldd	r27, Z+11	; 0x0b
    116c:	c4 81       	ldd	r28, Z+4	; 0x04
    116e:	d5 81       	ldd	r29, Z+5	; 0x05
    1170:	86 81       	ldd	r24, Z+6	; 0x06
    1172:	97 81       	ldd	r25, Z+7	; 0x07
    1174:	9d 83       	std	Y+5, r25	; 0x05
    1176:	8c 83       	std	Y+4, r24	; 0x04
    1178:	c6 81       	ldd	r28, Z+6	; 0x06
    117a:	d7 81       	ldd	r29, Z+7	; 0x07
    117c:	84 81       	ldd	r24, Z+4	; 0x04
    117e:	95 81       	ldd	r25, Z+5	; 0x05
    1180:	9b 83       	std	Y+3, r25	; 0x03
    1182:	8a 83       	std	Y+2, r24	; 0x02
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	8d 91       	ld	r24, X+
    1188:	9c 91       	ld	r25, X
    118a:	12 97       	sbiw	r26, 0x02	; 2
    118c:	9f 01       	movw	r18, r30
    118e:	2e 5f       	subi	r18, 0xFE	; 254
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	82 17       	cp	r24, r18
    1194:	93 07       	cpc	r25, r19
    1196:	31 f4       	brne	.+12     	; 0x11a4 <xTaskResumeAll+0xb4>
    1198:	86 81       	ldd	r24, Z+6	; 0x06
    119a:	97 81       	ldd	r25, Z+7	; 0x07
    119c:	12 96       	adiw	r26, 0x02	; 2
    119e:	9c 93       	st	X, r25
    11a0:	8e 93       	st	-X, r24
    11a2:	11 97       	sbiw	r26, 0x01	; 1
    11a4:	13 86       	std	Z+11, r1	; 0x0b
    11a6:	12 86       	std	Z+10, r1	; 0x0a
    11a8:	8c 91       	ld	r24, X
    11aa:	81 50       	subi	r24, 0x01	; 1
    11ac:	8c 93       	st	X, r24
    11ae:	86 89       	ldd	r24, Z+22	; 0x16
    11b0:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <uxTopReadyPriority>
    11b4:	98 17       	cp	r25, r24
    11b6:	10 f4       	brcc	.+4      	; 0x11bc <xTaskResumeAll+0xcc>
    11b8:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <uxTopReadyPriority>
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	dc 01       	movw	r26, r24
    11c0:	aa 0f       	add	r26, r26
    11c2:	bb 1f       	adc	r27, r27
    11c4:	aa 0f       	add	r26, r26
    11c6:	bb 1f       	adc	r27, r27
    11c8:	aa 0f       	add	r26, r26
    11ca:	bb 1f       	adc	r27, r27
    11cc:	8a 0f       	add	r24, r26
    11ce:	9b 1f       	adc	r25, r27
    11d0:	dc 01       	movw	r26, r24
    11d2:	a3 5f       	subi	r26, 0xF3	; 243
    11d4:	bc 4f       	sbci	r27, 0xFC	; 252
    11d6:	11 96       	adiw	r26, 0x01	; 1
    11d8:	0d 90       	ld	r0, X+
    11da:	bc 91       	ld	r27, X
    11dc:	a0 2d       	mov	r26, r0
    11de:	b5 83       	std	Z+5, r27	; 0x05
    11e0:	a4 83       	std	Z+4, r26	; 0x04
    11e2:	14 96       	adiw	r26, 0x04	; 4
    11e4:	8d 91       	ld	r24, X+
    11e6:	9c 91       	ld	r25, X
    11e8:	15 97       	sbiw	r26, 0x05	; 5
    11ea:	97 83       	std	Z+7, r25	; 0x07
    11ec:	86 83       	std	Z+6, r24	; 0x06
    11ee:	14 96       	adiw	r26, 0x04	; 4
    11f0:	cd 91       	ld	r28, X+
    11f2:	dc 91       	ld	r29, X
    11f4:	15 97       	sbiw	r26, 0x05	; 5
    11f6:	3b 83       	std	Y+3, r19	; 0x03
    11f8:	2a 83       	std	Y+2, r18	; 0x02
    11fa:	15 96       	adiw	r26, 0x05	; 5
    11fc:	3c 93       	st	X, r19
    11fe:	2e 93       	st	-X, r18
    1200:	14 97       	sbiw	r26, 0x04	; 4
    1202:	a6 89       	ldd	r26, Z+22	; 0x16
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	cd 01       	movw	r24, r26
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	a8 0f       	add	r26, r24
    1216:	b9 1f       	adc	r27, r25
    1218:	a3 5f       	subi	r26, 0xF3	; 243
    121a:	bc 4f       	sbci	r27, 0xFC	; 252
    121c:	b3 87       	std	Z+11, r27	; 0x0b
    121e:	a2 87       	std	Z+10, r26	; 0x0a
    1220:	8c 91       	ld	r24, X
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	8c 93       	st	X, r24
    1226:	96 89       	ldd	r25, Z+22	; 0x16
    1228:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <pxCurrentTCB>
    122c:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
    1230:	56 96       	adiw	r26, 0x16	; 22
    1232:	8c 91       	ld	r24, X
    1234:	98 17       	cp	r25, r24
    1236:	30 f0       	brcs	.+12     	; 0x1244 <xTaskResumeAll+0x154>
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <xYieldPending>
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <xTaskResumeAll+0x154>
    1240:	e0 e0       	ldi	r30, 0x00	; 0
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <xPendingReadyList>
    1248:	81 11       	cpse	r24, r1
    124a:	65 cf       	rjmp	.-310    	; 0x1116 <xTaskResumeAll+0x26>
    124c:	ef 2b       	or	r30, r31
    124e:	09 f0       	breq	.+2      	; 0x1252 <xTaskResumeAll+0x162>
    1250:	c6 db       	rcall	.-2164   	; 0x9de <prvResetNextTaskUnblockTime>
    1252:	c0 91 d4 02 	lds	r28, 0x02D4	; 0x8002d4 <xPendedTicks>
    1256:	d0 91 d5 02 	lds	r29, 0x02D5	; 0x8002d5 <xPendedTicks+0x1>
    125a:	20 97       	sbiw	r28, 0x00	; 0
    125c:	61 f0       	breq	.+24     	; 0x1276 <xTaskResumeAll+0x186>
    125e:	2f de       	rcall	.-930    	; 0xebe <xTaskIncrementTick>
    1260:	88 23       	and	r24, r24
    1262:	19 f0       	breq	.+6      	; 0x126a <xTaskResumeAll+0x17a>
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <xYieldPending>
    126a:	21 97       	sbiw	r28, 0x01	; 1
    126c:	c1 f7       	brne	.-16     	; 0x125e <xTaskResumeAll+0x16e>
    126e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <xPendedTicks+0x1>
    1272:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <xPendedTicks>
    1276:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <xYieldPending>
    127a:	88 23       	and	r24, r24
    127c:	29 f0       	breq	.+10     	; 0x1288 <xTaskResumeAll+0x198>
    127e:	35 d8       	rcall	.-3990   	; 0x2ea <vPortYield>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	03 c0       	rjmp	.+6      	; 0x128a <xTaskResumeAll+0x19a>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	01 c0       	rjmp	.+2      	; 0x128a <xTaskResumeAll+0x19a>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <vTaskDelay>:
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
    129a:	89 2b       	or	r24, r25
    129c:	31 f0       	breq	.+12     	; 0x12aa <vTaskDelay+0x16>
    129e:	ff dd       	rcall	.-1026   	; 0xe9e <vTaskSuspendAll>
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	ce 01       	movw	r24, r28
    12a4:	08 dd       	rcall	.-1520   	; 0xcb6 <prvAddCurrentTaskToDelayedList>
    12a6:	24 df       	rcall	.-440    	; 0x10f0 <xTaskResumeAll>
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <vTaskDelay+0x18>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	81 11       	cpse	r24, r1
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <vTaskDelay+0x1e>
    12b0:	1c d8       	rcall	.-4040   	; 0x2ea <vPortYield>
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <vTaskSwitchContext>:
    12b8:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
    12bc:	88 23       	and	r24, r24
    12be:	21 f0       	breq	.+8      	; 0x12c8 <vTaskSwitchContext+0x10>
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <xYieldPending>
    12c6:	08 95       	ret
    12c8:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <xYieldPending>
    12cc:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <uxTopReadyPriority>
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <vTaskSwitchContext+0x1c>
    12d2:	21 50       	subi	r18, 0x01	; 1
    12d4:	82 2f       	mov	r24, r18
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	fc 01       	movw	r30, r24
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	e8 0f       	add	r30, r24
    12e8:	f9 1f       	adc	r31, r25
    12ea:	e3 5f       	subi	r30, 0xF3	; 243
    12ec:	fc 4f       	sbci	r31, 0xFC	; 252
    12ee:	30 81       	ld	r19, Z
    12f0:	33 23       	and	r19, r19
    12f2:	79 f3       	breq	.-34     	; 0x12d2 <vTaskSwitchContext+0x1a>
    12f4:	ac 01       	movw	r20, r24
    12f6:	44 0f       	add	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	44 0f       	add	r20, r20
    12fc:	55 1f       	adc	r21, r21
    12fe:	44 0f       	add	r20, r20
    1300:	55 1f       	adc	r21, r21
    1302:	48 0f       	add	r20, r24
    1304:	59 1f       	adc	r21, r25
    1306:	df 01       	movw	r26, r30
    1308:	01 80       	ldd	r0, Z+1	; 0x01
    130a:	f2 81       	ldd	r31, Z+2	; 0x02
    130c:	e0 2d       	mov	r30, r0
    130e:	02 80       	ldd	r0, Z+2	; 0x02
    1310:	f3 81       	ldd	r31, Z+3	; 0x03
    1312:	e0 2d       	mov	r30, r0
    1314:	12 96       	adiw	r26, 0x02	; 2
    1316:	fc 93       	st	X, r31
    1318:	ee 93       	st	-X, r30
    131a:	11 97       	sbiw	r26, 0x01	; 1
    131c:	40 5f       	subi	r20, 0xF0	; 240
    131e:	5c 4f       	sbci	r21, 0xFC	; 252
    1320:	e4 17       	cp	r30, r20
    1322:	f5 07       	cpc	r31, r21
    1324:	29 f4       	brne	.+10     	; 0x1330 <vTaskSwitchContext+0x78>
    1326:	42 81       	ldd	r20, Z+2	; 0x02
    1328:	53 81       	ldd	r21, Z+3	; 0x03
    132a:	fd 01       	movw	r30, r26
    132c:	52 83       	std	Z+2, r21	; 0x02
    132e:	41 83       	std	Z+1, r20	; 0x01
    1330:	fc 01       	movw	r30, r24
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	8e 0f       	add	r24, r30
    1340:	9f 1f       	adc	r25, r31
    1342:	fc 01       	movw	r30, r24
    1344:	e3 5f       	subi	r30, 0xF3	; 243
    1346:	fc 4f       	sbci	r31, 0xFC	; 252
    1348:	01 80       	ldd	r0, Z+1	; 0x01
    134a:	f2 81       	ldd	r31, Z+2	; 0x02
    134c:	e0 2d       	mov	r30, r0
    134e:	86 81       	ldd	r24, Z+6	; 0x06
    1350:	97 81       	ldd	r25, Z+7	; 0x07
    1352:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <pxCurrentTCB+0x1>
    1356:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <pxCurrentTCB>
    135a:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <uxTopReadyPriority>
    135e:	08 95       	ret

00001360 <vTaskPlaceOnEventList>:
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	eb 01       	movw	r28, r22
    1366:	60 91 31 03 	lds	r22, 0x0331	; 0x800331 <pxCurrentTCB>
    136a:	70 91 32 03 	lds	r23, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
    136e:	64 5f       	subi	r22, 0xF4	; 244
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	0e 94 c8 00 	call	0x190	; 0x190 <vListInsert>
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	ce 01       	movw	r24, r28
    137a:	9d dc       	rcall	.-1734   	; 0xcb6 <prvAddCurrentTaskToDelayedList>
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret

00001382 <vTaskPlaceOnEventListRestricted>:
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	fc 01       	movw	r30, r24
    138c:	8b 01       	movw	r16, r22
    138e:	a1 81       	ldd	r26, Z+1	; 0x01
    1390:	b2 81       	ldd	r27, Z+2	; 0x02
    1392:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <pxCurrentTCB>
    1396:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
    139a:	ec 01       	movw	r28, r24
    139c:	bf 87       	std	Y+15, r27	; 0x0f
    139e:	ae 87       	std	Y+14, r26	; 0x0e
    13a0:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <pxCurrentTCB>
    13a4:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
    13a8:	14 96       	adiw	r26, 0x04	; 4
    13aa:	2d 91       	ld	r18, X+
    13ac:	3c 91       	ld	r19, X
    13ae:	15 97       	sbiw	r26, 0x05	; 5
    13b0:	ec 01       	movw	r28, r24
    13b2:	39 8b       	std	Y+17, r19	; 0x11
    13b4:	28 8b       	std	Y+16, r18	; 0x10
    13b6:	14 96       	adiw	r26, 0x04	; 4
    13b8:	8d 91       	ld	r24, X+
    13ba:	9c 91       	ld	r25, X
    13bc:	15 97       	sbiw	r26, 0x05	; 5
    13be:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <pxCurrentTCB>
    13c2:	30 91 32 03 	lds	r19, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
    13c6:	24 5f       	subi	r18, 0xF4	; 244
    13c8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ca:	ec 01       	movw	r28, r24
    13cc:	3b 83       	std	Y+3, r19	; 0x03
    13ce:	2a 83       	std	Y+2, r18	; 0x02
    13d0:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <pxCurrentTCB>
    13d4:	30 91 32 03 	lds	r19, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
    13d8:	24 5f       	subi	r18, 0xF4	; 244
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	15 96       	adiw	r26, 0x05	; 5
    13de:	3c 93       	st	X, r19
    13e0:	2e 93       	st	-X, r18
    13e2:	14 97       	sbiw	r26, 0x04	; 4
    13e4:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <pxCurrentTCB>
    13e8:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
    13ec:	55 96       	adiw	r26, 0x15	; 21
    13ee:	fc 93       	st	X, r31
    13f0:	ee 93       	st	-X, r30
    13f2:	54 97       	sbiw	r26, 0x14	; 20
    13f4:	90 81       	ld	r25, Z
    13f6:	9f 5f       	subi	r25, 0xFF	; 255
    13f8:	90 83       	st	Z, r25
    13fa:	44 23       	and	r20, r20
    13fc:	11 f0       	breq	.+4      	; 0x1402 <vTaskPlaceOnEventListRestricted+0x80>
    13fe:	0f ef       	ldi	r16, 0xFF	; 255
    1400:	1f ef       	ldi	r17, 0xFF	; 255
    1402:	64 2f       	mov	r22, r20
    1404:	c8 01       	movw	r24, r16
    1406:	57 dc       	rcall	.-1874   	; 0xcb6 <prvAddCurrentTaskToDelayedList>
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <xTaskRemoveFromEventList>:
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	dc 01       	movw	r26, r24
    1418:	15 96       	adiw	r26, 0x05	; 5
    141a:	ed 91       	ld	r30, X+
    141c:	fc 91       	ld	r31, X
    141e:	16 97       	sbiw	r26, 0x06	; 6
    1420:	06 80       	ldd	r0, Z+6	; 0x06
    1422:	f7 81       	ldd	r31, Z+7	; 0x07
    1424:	e0 2d       	mov	r30, r0
    1426:	a4 89       	ldd	r26, Z+20	; 0x14
    1428:	b5 89       	ldd	r27, Z+21	; 0x15
    142a:	c6 85       	ldd	r28, Z+14	; 0x0e
    142c:	d7 85       	ldd	r29, Z+15	; 0x0f
    142e:	80 89       	ldd	r24, Z+16	; 0x10
    1430:	91 89       	ldd	r25, Z+17	; 0x11
    1432:	9d 83       	std	Y+5, r25	; 0x05
    1434:	8c 83       	std	Y+4, r24	; 0x04
    1436:	c0 89       	ldd	r28, Z+16	; 0x10
    1438:	d1 89       	ldd	r29, Z+17	; 0x11
    143a:	86 85       	ldd	r24, Z+14	; 0x0e
    143c:	97 85       	ldd	r25, Z+15	; 0x0f
    143e:	9b 83       	std	Y+3, r25	; 0x03
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	11 96       	adiw	r26, 0x01	; 1
    1444:	8d 91       	ld	r24, X+
    1446:	9c 91       	ld	r25, X
    1448:	12 97       	sbiw	r26, 0x02	; 2
    144a:	9f 01       	movw	r18, r30
    144c:	24 5f       	subi	r18, 0xF4	; 244
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	82 17       	cp	r24, r18
    1452:	93 07       	cpc	r25, r19
    1454:	31 f4       	brne	.+12     	; 0x1462 <xTaskRemoveFromEventList+0x50>
    1456:	80 89       	ldd	r24, Z+16	; 0x10
    1458:	91 89       	ldd	r25, Z+17	; 0x11
    145a:	12 96       	adiw	r26, 0x02	; 2
    145c:	9c 93       	st	X, r25
    145e:	8e 93       	st	-X, r24
    1460:	11 97       	sbiw	r26, 0x01	; 1
    1462:	15 8a       	std	Z+21, r1	; 0x15
    1464:	14 8a       	std	Z+20, r1	; 0x14
    1466:	8c 91       	ld	r24, X
    1468:	81 50       	subi	r24, 0x01	; 1
    146a:	8c 93       	st	X, r24
    146c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
    1470:	81 11       	cpse	r24, r1
    1472:	60 c0       	rjmp	.+192    	; 0x1534 <xTaskRemoveFromEventList+0x122>
    1474:	a2 85       	ldd	r26, Z+10	; 0x0a
    1476:	b3 85       	ldd	r27, Z+11	; 0x0b
    1478:	c4 81       	ldd	r28, Z+4	; 0x04
    147a:	d5 81       	ldd	r29, Z+5	; 0x05
    147c:	86 81       	ldd	r24, Z+6	; 0x06
    147e:	97 81       	ldd	r25, Z+7	; 0x07
    1480:	9d 83       	std	Y+5, r25	; 0x05
    1482:	8c 83       	std	Y+4, r24	; 0x04
    1484:	c6 81       	ldd	r28, Z+6	; 0x06
    1486:	d7 81       	ldd	r29, Z+7	; 0x07
    1488:	84 81       	ldd	r24, Z+4	; 0x04
    148a:	95 81       	ldd	r25, Z+5	; 0x05
    148c:	9b 83       	std	Y+3, r25	; 0x03
    148e:	8a 83       	std	Y+2, r24	; 0x02
    1490:	11 96       	adiw	r26, 0x01	; 1
    1492:	8d 91       	ld	r24, X+
    1494:	9c 91       	ld	r25, X
    1496:	12 97       	sbiw	r26, 0x02	; 2
    1498:	9f 01       	movw	r18, r30
    149a:	2e 5f       	subi	r18, 0xFE	; 254
    149c:	3f 4f       	sbci	r19, 0xFF	; 255
    149e:	82 17       	cp	r24, r18
    14a0:	93 07       	cpc	r25, r19
    14a2:	31 f4       	brne	.+12     	; 0x14b0 <xTaskRemoveFromEventList+0x9e>
    14a4:	86 81       	ldd	r24, Z+6	; 0x06
    14a6:	97 81       	ldd	r25, Z+7	; 0x07
    14a8:	12 96       	adiw	r26, 0x02	; 2
    14aa:	9c 93       	st	X, r25
    14ac:	8e 93       	st	-X, r24
    14ae:	11 97       	sbiw	r26, 0x01	; 1
    14b0:	13 86       	std	Z+11, r1	; 0x0b
    14b2:	12 86       	std	Z+10, r1	; 0x0a
    14b4:	8c 91       	ld	r24, X
    14b6:	81 50       	subi	r24, 0x01	; 1
    14b8:	8c 93       	st	X, r24
    14ba:	86 89       	ldd	r24, Z+22	; 0x16
    14bc:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <uxTopReadyPriority>
    14c0:	98 17       	cp	r25, r24
    14c2:	10 f4       	brcc	.+4      	; 0x14c8 <xTaskRemoveFromEventList+0xb6>
    14c4:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <uxTopReadyPriority>
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	dc 01       	movw	r26, r24
    14cc:	aa 0f       	add	r26, r26
    14ce:	bb 1f       	adc	r27, r27
    14d0:	aa 0f       	add	r26, r26
    14d2:	bb 1f       	adc	r27, r27
    14d4:	aa 0f       	add	r26, r26
    14d6:	bb 1f       	adc	r27, r27
    14d8:	8a 0f       	add	r24, r26
    14da:	9b 1f       	adc	r25, r27
    14dc:	dc 01       	movw	r26, r24
    14de:	a3 5f       	subi	r26, 0xF3	; 243
    14e0:	bc 4f       	sbci	r27, 0xFC	; 252
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	0d 90       	ld	r0, X+
    14e6:	bc 91       	ld	r27, X
    14e8:	a0 2d       	mov	r26, r0
    14ea:	b5 83       	std	Z+5, r27	; 0x05
    14ec:	a4 83       	std	Z+4, r26	; 0x04
    14ee:	14 96       	adiw	r26, 0x04	; 4
    14f0:	8d 91       	ld	r24, X+
    14f2:	9c 91       	ld	r25, X
    14f4:	15 97       	sbiw	r26, 0x05	; 5
    14f6:	97 83       	std	Z+7, r25	; 0x07
    14f8:	86 83       	std	Z+6, r24	; 0x06
    14fa:	14 96       	adiw	r26, 0x04	; 4
    14fc:	cd 91       	ld	r28, X+
    14fe:	dc 91       	ld	r29, X
    1500:	15 97       	sbiw	r26, 0x05	; 5
    1502:	3b 83       	std	Y+3, r19	; 0x03
    1504:	2a 83       	std	Y+2, r18	; 0x02
    1506:	15 96       	adiw	r26, 0x05	; 5
    1508:	3c 93       	st	X, r19
    150a:	2e 93       	st	-X, r18
    150c:	14 97       	sbiw	r26, 0x04	; 4
    150e:	a6 89       	ldd	r26, Z+22	; 0x16
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	cd 01       	movw	r24, r26
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	a8 0f       	add	r26, r24
    1522:	b9 1f       	adc	r27, r25
    1524:	a3 5f       	subi	r26, 0xF3	; 243
    1526:	bc 4f       	sbci	r27, 0xFC	; 252
    1528:	b3 87       	std	Z+11, r27	; 0x0b
    152a:	a2 87       	std	Z+10, r26	; 0x0a
    152c:	8c 91       	ld	r24, X
    152e:	8f 5f       	subi	r24, 0xFF	; 255
    1530:	8c 93       	st	X, r24
    1532:	1c c0       	rjmp	.+56     	; 0x156c <xTaskRemoveFromEventList+0x15a>
    1534:	4e ee       	ldi	r20, 0xEE	; 238
    1536:	52 e0       	ldi	r21, 0x02	; 2
    1538:	da 01       	movw	r26, r20
    153a:	11 96       	adiw	r26, 0x01	; 1
    153c:	cd 91       	ld	r28, X+
    153e:	dc 91       	ld	r29, X
    1540:	12 97       	sbiw	r26, 0x02	; 2
    1542:	d7 87       	std	Z+15, r29	; 0x0f
    1544:	c6 87       	std	Z+14, r28	; 0x0e
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	91 8b       	std	Z+17, r25	; 0x11
    154c:	80 8b       	std	Z+16, r24	; 0x10
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	9d 81       	ldd	r25, Y+5	; 0x05
    1552:	dc 01       	movw	r26, r24
    1554:	13 96       	adiw	r26, 0x03	; 3
    1556:	3c 93       	st	X, r19
    1558:	2e 93       	st	-X, r18
    155a:	12 97       	sbiw	r26, 0x02	; 2
    155c:	3d 83       	std	Y+5, r19	; 0x05
    155e:	2c 83       	std	Y+4, r18	; 0x04
    1560:	55 8b       	std	Z+21, r21	; 0x15
    1562:	44 8b       	std	Z+20, r20	; 0x14
    1564:	da 01       	movw	r26, r20
    1566:	8c 91       	ld	r24, X
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	8c 93       	st	X, r24
    156c:	96 89       	ldd	r25, Z+22	; 0x16
    156e:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <pxCurrentTCB>
    1572:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <pxCurrentTCB+0x1>
    1576:	86 89       	ldd	r24, Z+22	; 0x16
    1578:	89 17       	cp	r24, r25
    157a:	20 f4       	brcc	.+8      	; 0x1584 <xTaskRemoveFromEventList+0x172>
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <xYieldPending>
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <xTaskRemoveFromEventList+0x174>
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <vTaskInternalSetTimeOutState>:
    158c:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <xNumOfOverflows>
    1590:	fc 01       	movw	r30, r24
    1592:	20 83       	st	Z, r18
    1594:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <xTickCount>
    1598:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <xTickCount+0x1>
    159c:	32 83       	std	Z+2, r19	; 0x02
    159e:	21 83       	std	Z+1, r18	; 0x01
    15a0:	08 95       	ret

000015a2 <xTaskCheckForTimeOut>:
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	0f 92       	push	r0
    15ae:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <xTickCount>
    15b2:	f0 91 d9 02 	lds	r31, 0x02D9	; 0x8002d9 <xTickCount+0x1>
    15b6:	dc 01       	movw	r26, r24
    15b8:	11 96       	adiw	r26, 0x01	; 1
    15ba:	4d 91       	ld	r20, X+
    15bc:	5c 91       	ld	r21, X
    15be:	12 97       	sbiw	r26, 0x02	; 2
    15c0:	df 01       	movw	r26, r30
    15c2:	a4 1b       	sub	r26, r20
    15c4:	b5 0b       	sbc	r27, r21
    15c6:	eb 01       	movw	r28, r22
    15c8:	28 81       	ld	r18, Y
    15ca:	39 81       	ldd	r19, Y+1	; 0x01
    15cc:	2f 3f       	cpi	r18, 0xFF	; 255
    15ce:	df ef       	ldi	r29, 0xFF	; 255
    15d0:	3d 07       	cpc	r19, r29
    15d2:	f1 f0       	breq	.+60     	; 0x1610 <xTaskCheckForTimeOut+0x6e>
    15d4:	ec 01       	movw	r28, r24
    15d6:	18 81       	ld	r17, Y
    15d8:	c0 91 d2 02 	lds	r28, 0x02D2	; 0x8002d2 <xNumOfOverflows>
    15dc:	1c 17       	cp	r17, r28
    15de:	41 f0       	breq	.+16     	; 0x15f0 <xTaskCheckForTimeOut+0x4e>
    15e0:	e4 17       	cp	r30, r20
    15e2:	f5 07       	cpc	r31, r21
    15e4:	28 f0       	brcs	.+10     	; 0x15f0 <xTaskCheckForTimeOut+0x4e>
    15e6:	fb 01       	movw	r30, r22
    15e8:	11 82       	std	Z+1, r1	; 0x01
    15ea:	10 82       	st	Z, r1
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	11 c0       	rjmp	.+34     	; 0x1612 <xTaskCheckForTimeOut+0x70>
    15f0:	a2 17       	cp	r26, r18
    15f2:	b3 07       	cpc	r27, r19
    15f4:	40 f4       	brcc	.+16     	; 0x1606 <xTaskCheckForTimeOut+0x64>
    15f6:	fb 01       	movw	r30, r22
    15f8:	2a 1b       	sub	r18, r26
    15fa:	3b 0b       	sbc	r19, r27
    15fc:	31 83       	std	Z+1, r19	; 0x01
    15fe:	20 83       	st	Z, r18
    1600:	c5 df       	rcall	.-118    	; 0x158c <vTaskInternalSetTimeOutState>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <xTaskCheckForTimeOut+0x70>
    1606:	db 01       	movw	r26, r22
    1608:	1d 92       	st	X+, r1
    160a:	1c 92       	st	X, r1
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <xTaskCheckForTimeOut+0x70>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	08 95       	ret

0000161e <vTaskMissedYield>:
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <xYieldPending>
    1624:	08 95       	ret

00001626 <xTaskGetSchedulerState>:
    1626:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xSchedulerRunning>
    162a:	88 23       	and	r24, r24
    162c:	31 f0       	breq	.+12     	; 0x163a <xTaskGetSchedulerState+0x14>
    162e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
    1632:	81 11       	cpse	r24, r1
    1634:	04 c0       	rjmp	.+8      	; 0x163e <xTaskGetSchedulerState+0x18>
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	08 95       	ret
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	08 95       	ret
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	08 95       	ret

00001642 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    164c:	89 2b       	or	r24, r25
    164e:	09 f4       	brne	.+2      	; 0x1652 <xTaskPriorityDisinherit+0x10>
    1650:	51 c0       	rjmp	.+162    	; 0x16f4 <xTaskPriorityDisinherit+0xb2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1652:	82 a1       	ldd	r24, Z+34	; 0x22
    1654:	81 50       	subi	r24, 0x01	; 1
    1656:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1658:	26 89       	ldd	r18, Z+22	; 0x16
    165a:	91 a1       	ldd	r25, Z+33	; 0x21
    165c:	29 17       	cp	r18, r25
    165e:	09 f4       	brne	.+2      	; 0x1662 <xTaskPriorityDisinherit+0x20>
    1660:	4b c0       	rjmp	.+150    	; 0x16f8 <xTaskPriorityDisinherit+0xb6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1662:	81 11       	cpse	r24, r1
    1664:	4b c0       	rjmp	.+150    	; 0x16fc <xTaskPriorityDisinherit+0xba>
    1666:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1668:	8f 01       	movw	r16, r30
    166a:	0e 5f       	subi	r16, 0xFE	; 254
    166c:	1f 4f       	sbci	r17, 0xFF	; 255
    166e:	c8 01       	movw	r24, r16
    1670:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1674:	89 a1       	ldd	r24, Y+33	; 0x21
    1676:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1678:	24 e0       	ldi	r18, 0x04	; 4
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	28 1b       	sub	r18, r24
    167e:	31 09       	sbc	r19, r1
    1680:	3d 87       	std	Y+13, r19	; 0x0d
    1682:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    1684:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <uxTopReadyPriority>
    1688:	98 17       	cp	r25, r24
    168a:	10 f4       	brcc	.+4      	; 0x1690 <xTaskPriorityDisinherit+0x4e>
    168c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <uxTopReadyPriority>
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	fc 01       	movw	r30, r24
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	ee 0f       	add	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	ee 0f       	add	r30, r30
    169e:	ff 1f       	adc	r31, r31
    16a0:	8e 0f       	add	r24, r30
    16a2:	9f 1f       	adc	r25, r31
    16a4:	fc 01       	movw	r30, r24
    16a6:	e3 5f       	subi	r30, 0xF3	; 243
    16a8:	fc 4f       	sbci	r31, 0xFC	; 252
    16aa:	01 80       	ldd	r0, Z+1	; 0x01
    16ac:	f2 81       	ldd	r31, Z+2	; 0x02
    16ae:	e0 2d       	mov	r30, r0
    16b0:	fd 83       	std	Y+5, r31	; 0x05
    16b2:	ec 83       	std	Y+4, r30	; 0x04
    16b4:	84 81       	ldd	r24, Z+4	; 0x04
    16b6:	95 81       	ldd	r25, Z+5	; 0x05
    16b8:	9f 83       	std	Y+7, r25	; 0x07
    16ba:	8e 83       	std	Y+6, r24	; 0x06
    16bc:	a4 81       	ldd	r26, Z+4	; 0x04
    16be:	b5 81       	ldd	r27, Z+5	; 0x05
    16c0:	13 96       	adiw	r26, 0x03	; 3
    16c2:	1c 93       	st	X, r17
    16c4:	0e 93       	st	-X, r16
    16c6:	12 97       	sbiw	r26, 0x02	; 2
    16c8:	15 83       	std	Z+5, r17	; 0x05
    16ca:	04 83       	std	Z+4, r16	; 0x04
    16cc:	ee 89       	ldd	r30, Y+22	; 0x16
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	cf 01       	movw	r24, r30
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	e8 0f       	add	r30, r24
    16e0:	f9 1f       	adc	r31, r25
    16e2:	e3 5f       	subi	r30, 0xF3	; 243
    16e4:	fc 4f       	sbci	r31, 0xFC	; 252
    16e6:	fb 87       	std	Y+11, r31	; 0x0b
    16e8:	ea 87       	std	Y+10, r30	; 0x0a
    16ea:	80 81       	ld	r24, Z
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	05 c0       	rjmp	.+10     	; 0x16fe <xTaskPriorityDisinherit+0xbc>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <xTaskPriorityDisinherit+0xbc>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <xTaskPriorityDisinherit+0xbc>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <prvGetNextExpireTime>:
    1708:	dc 01       	movw	r26, r24
    170a:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <pxCurrentTimerList>
    170e:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <pxCurrentTimerList+0x1>
    1712:	80 81       	ld	r24, Z
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	81 11       	cpse	r24, r1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 93       	st	X, r25
    171c:	91 11       	cpse	r25, r1
    171e:	06 c0       	rjmp	.+12     	; 0x172c <prvGetNextExpireTime+0x24>
    1720:	05 80       	ldd	r0, Z+5	; 0x05
    1722:	f6 81       	ldd	r31, Z+6	; 0x06
    1724:	e0 2d       	mov	r30, r0
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	08 95       	ret
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	08 95       	ret

00001732 <prvInsertTimerInActiveList>:
    1732:	fc 01       	movw	r30, r24
    1734:	73 83       	std	Z+3, r23	; 0x03
    1736:	62 83       	std	Z+2, r22	; 0x02
    1738:	91 87       	std	Z+9, r25	; 0x09
    173a:	80 87       	std	Z+8, r24	; 0x08
    173c:	46 17       	cp	r20, r22
    173e:	57 07       	cpc	r21, r23
    1740:	90 f0       	brcs	.+36     	; 0x1766 <prvInsertTimerInActiveList+0x34>
    1742:	42 1b       	sub	r20, r18
    1744:	53 0b       	sbc	r21, r19
    1746:	84 85       	ldd	r24, Z+12	; 0x0c
    1748:	95 85       	ldd	r25, Z+13	; 0x0d
    174a:	48 17       	cp	r20, r24
    174c:	59 07       	cpc	r21, r25
    174e:	e0 f4       	brcc	.+56     	; 0x1788 <prvInsertTimerInActiveList+0x56>
    1750:	bf 01       	movw	r22, r30
    1752:	6e 5f       	subi	r22, 0xFE	; 254
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <pxOverflowTimerList>
    175a:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <pxOverflowTimerList+0x1>
    175e:	0e 94 c8 00 	call	0x190	; 0x190 <vListInsert>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	08 95       	ret
    1766:	42 17       	cp	r20, r18
    1768:	53 07       	cpc	r21, r19
    176a:	18 f4       	brcc	.+6      	; 0x1772 <prvInsertTimerInActiveList+0x40>
    176c:	62 17       	cp	r22, r18
    176e:	73 07       	cpc	r23, r19
    1770:	68 f4       	brcc	.+26     	; 0x178c <prvInsertTimerInActiveList+0x5a>
    1772:	bf 01       	movw	r22, r30
    1774:	6e 5f       	subi	r22, 0xFE	; 254
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <pxCurrentTimerList>
    177c:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <pxCurrentTimerList+0x1>
    1780:	0e 94 c8 00 	call	0x190	; 0x190 <vListInsert>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	08 95       	ret
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	08 95       	ret
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	08 95       	ret

00001790 <prvCheckForValidListAndQueue>:
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	0f 92       	push	r0
    1796:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <xTimerQueue>
    179a:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <xTimerQueue+0x1>
    179e:	89 2b       	or	r24, r25
    17a0:	e9 f4       	brne	.+58     	; 0x17dc <prvCheckForValidListAndQueue+0x4c>
    17a2:	86 e4       	ldi	r24, 0x46	; 70
    17a4:	93 e0       	ldi	r25, 0x03	; 3
    17a6:	0e 94 b6 00 	call	0x16c	; 0x16c <vListInitialise>
    17aa:	8d e3       	ldi	r24, 0x3D	; 61
    17ac:	93 e0       	ldi	r25, 0x03	; 3
    17ae:	0e 94 b6 00 	call	0x16c	; 0x16c <vListInitialise>
    17b2:	86 e4       	ldi	r24, 0x46	; 70
    17b4:	93 e0       	ldi	r25, 0x03	; 3
    17b6:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <pxCurrentTimerList+0x1>
    17ba:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <pxCurrentTimerList>
    17be:	8d e3       	ldi	r24, 0x3D	; 61
    17c0:	93 e0       	ldi	r25, 0x03	; 3
    17c2:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <pxOverflowTimerList+0x1>
    17c6:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <pxOverflowTimerList>
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	65 e0       	ldi	r22, 0x05	; 5
    17ce:	8a e0       	ldi	r24, 0x0A	; 10
    17d0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <xQueueGenericCreate>
    17d4:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <xTimerQueue+0x1>
    17d8:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <xTimerQueue>
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	08 95       	ret

000017e2 <xTimerCreateTimerTask>:
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	d3 df       	rcall	.-90     	; 0x1790 <prvCheckForValidListAndQueue>
    17ea:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <xTimerQueue>
    17ee:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <xTimerQueue+0x1>
    17f2:	89 2b       	or	r24, r25
    17f4:	89 f0       	breq	.+34     	; 0x1818 <xTimerCreateTimerTask+0x36>
    17f6:	0f 2e       	mov	r0, r31
    17f8:	f5 e3       	ldi	r31, 0x35	; 53
    17fa:	ef 2e       	mov	r14, r31
    17fc:	f3 e0       	ldi	r31, 0x03	; 3
    17fe:	ff 2e       	mov	r15, r31
    1800:	f0 2d       	mov	r31, r0
    1802:	03 e0       	ldi	r16, 0x03	; 3
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	45 e5       	ldi	r20, 0x55	; 85
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	62 e1       	ldi	r22, 0x12	; 18
    180e:	72 e0       	ldi	r23, 0x02	; 2
    1810:	85 e8       	ldi	r24, 0x85	; 133
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	ce da       	rcall	.-2660   	; 0xdb2 <xTaskCreate>
    1816:	01 c0       	rjmp	.+2      	; 0x181a <xTimerCreateTimerTask+0x38>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	08 95       	ret

00001822 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	00 d0       	rcall	.+0      	; 0x182c <xTimerGenericCommand+0xa>
    182c:	1f 92       	push	r1
    182e:	1f 92       	push	r1
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1834:	e0 91 37 03 	lds	r30, 0x0337	; 0x800337 <xTimerQueue>
    1838:	f0 91 38 03 	lds	r31, 0x0338	; 0x800338 <xTimerQueue+0x1>
    183c:	30 97       	sbiw	r30, 0x00	; 0
    183e:	69 f1       	breq	.+90     	; 0x189a <xTimerGenericCommand+0x78>
    1840:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1842:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1844:	5b 83       	std	Y+3, r21	; 0x03
    1846:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1848:	9d 83       	std	Y+5, r25	; 0x05
    184a:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    184c:	66 30       	cpi	r22, 0x06	; 6
    184e:	e4 f4       	brge	.+56     	; 0x1888 <xTimerGenericCommand+0x66>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1850:	ea de       	rcall	.-556    	; 0x1626 <xTaskGetSchedulerState>
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	61 f4       	brne	.+24     	; 0x186e <xTimerGenericCommand+0x4c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	a8 01       	movw	r20, r16
    185a:	be 01       	movw	r22, r28
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <xTimerQueue>
    1864:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <xTimerQueue+0x1>
    1868:	0e 94 91 03 	call	0x722	; 0x722 <xQueueGenericSend>
    186c:	17 c0       	rjmp	.+46     	; 0x189c <xTimerGenericCommand+0x7a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	be 01       	movw	r22, r28
    1876:	6f 5f       	subi	r22, 0xFF	; 255
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <xTimerQueue>
    187e:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <xTimerQueue+0x1>
    1882:	0e 94 91 03 	call	0x722	; 0x722 <xQueueGenericSend>
    1886:	0a c0       	rjmp	.+20     	; 0x189c <xTimerGenericCommand+0x7a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	ad 01       	movw	r20, r26
    188c:	be 01       	movw	r22, r28
    188e:	6f 5f       	subi	r22, 0xFF	; 255
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	cf 01       	movw	r24, r30
    1894:	0e 94 13 04 	call	0x826	; 0x826 <xQueueGenericSendFromISR>
    1898:	01 c0       	rjmp	.+2      	; 0x189c <xTimerGenericCommand+0x7a>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    189a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	08 95       	ret

000018b0 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    18bc:	2f c0       	rjmp	.+94     	; 0x191c <prvSwitchTimerLists+0x6c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    18be:	05 80       	ldd	r0, Z+5	; 0x05
    18c0:	f6 81       	ldd	r31, Z+6	; 0x06
    18c2:	e0 2d       	mov	r30, r0
    18c4:	e0 80       	ld	r14, Z
    18c6:	f1 80       	ldd	r15, Z+1	; 0x01

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    18c8:	c6 81       	ldd	r28, Z+6	; 0x06
    18ca:	d7 81       	ldd	r29, Z+7	; 0x07
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    18cc:	8e 01       	movw	r16, r28
    18ce:	0e 5f       	subi	r16, 0xFE	; 254
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	c8 01       	movw	r24, r16
    18d4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    18d8:	e8 89       	ldd	r30, Y+16	; 0x10
    18da:	f9 89       	ldd	r31, Y+17	; 0x11
    18dc:	ce 01       	movw	r24, r28
    18de:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    18e0:	8a 89       	ldd	r24, Y+18	; 0x12
    18e2:	82 ff       	sbrs	r24, 2
    18e4:	1b c0       	rjmp	.+54     	; 0x191c <prvSwitchTimerLists+0x6c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    18e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    18e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    18ea:	8e 0d       	add	r24, r14
    18ec:	9f 1d       	adc	r25, r15

                if( xReloadTime > xNextExpireTime )
    18ee:	e8 16       	cp	r14, r24
    18f0:	f9 06       	cpc	r15, r25
    18f2:	60 f4       	brcc	.+24     	; 0x190c <prvSwitchTimerLists+0x5c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    18f4:	9b 83       	std	Y+3, r25	; 0x03
    18f6:	8a 83       	std	Y+2, r24	; 0x02
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    18f8:	d9 87       	std	Y+9, r29	; 0x09
    18fa:	c8 87       	std	Y+8, r28	; 0x08
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    18fc:	b8 01       	movw	r22, r16
    18fe:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <pxCurrentTimerList>
    1902:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <pxCurrentTimerList+0x1>
    1906:	0e 94 c8 00 	call	0x190	; 0x190 <vListInsert>
    190a:	08 c0       	rjmp	.+16     	; 0x191c <prvSwitchTimerLists+0x6c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    190c:	00 e0       	ldi	r16, 0x00	; 0
    190e:	10 e0       	ldi	r17, 0x00	; 0
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	a7 01       	movw	r20, r14
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	ce 01       	movw	r24, r28
    191a:	83 df       	rcall	.-250    	; 0x1822 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    191c:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <pxCurrentTimerList>
    1920:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <pxCurrentTimerList+0x1>
    1924:	80 81       	ld	r24, Z
    1926:	81 11       	cpse	r24, r1
    1928:	ca cf       	rjmp	.-108    	; 0x18be <prvSwitchTimerLists+0xe>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    192a:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <pxOverflowTimerList>
    192e:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <pxOverflowTimerList+0x1>
    1932:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <pxCurrentTimerList+0x1>
    1936:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    193a:	f0 93 3a 03 	sts	0x033A, r31	; 0x80033a <pxOverflowTimerList+0x1>
    193e:	e0 93 39 03 	sts	0x0339, r30	; 0x800339 <pxOverflowTimerList>
    }
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	08 95       	ret

00001950 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	8c 01       	movw	r16, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    195a:	a7 da       	rcall	.-2738   	; 0xeaa <xTaskGetTickCount>
    195c:	ec 01       	movw	r28, r24

        if( xTimeNow < xLastTime )
    195e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <xLastTime.2433>
    1962:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <xLastTime.2433+0x1>
    1966:	c8 17       	cp	r28, r24
    1968:	d9 07       	cpc	r29, r25
        {
            prvSwitchTimerLists();
    196a:	28 f4       	brcc	.+10     	; 0x1976 <prvSampleTimeNow+0x26>
    196c:	a1 df       	rcall	.-190    	; 0x18b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	f8 01       	movw	r30, r16
    1972:	80 83       	st	Z, r24
    1974:	02 c0       	rjmp	.+4      	; 0x197a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1976:	f8 01       	movw	r30, r16
    1978:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    197a:	d0 93 34 03 	sts	0x0334, r29	; 0x800334 <xLastTime.2433+0x1>
    197e:	c0 93 33 03 	sts	0x0333, r28	; 0x800333 <xLastTime.2433>

        return xTimeNow;
    }
    1982:	ce 01       	movw	r24, r28
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	7c 01       	movw	r14, r24
    199c:	8b 01       	movw	r16, r22
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    199e:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <pxCurrentTimerList>
    19a2:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <pxCurrentTimerList+0x1>
    19a6:	05 80       	ldd	r0, Z+5	; 0x05
    19a8:	f6 81       	ldd	r31, Z+6	; 0x06
    19aa:	e0 2d       	mov	r30, r0
    19ac:	c6 81       	ldd	r28, Z+6	; 0x06
    19ae:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    19b0:	ce 01       	movw	r24, r28
    19b2:	02 96       	adiw	r24, 0x02	; 2
    19b4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    19b8:	8a 89       	ldd	r24, Y+18	; 0x12
    19ba:	82 ff       	sbrs	r24, 2
    19bc:	13 c0       	rjmp	.+38     	; 0x19e4 <prvProcessExpiredTimer+0x56>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    19be:	6c 85       	ldd	r22, Y+12	; 0x0c
    19c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    19c2:	6e 0d       	add	r22, r14
    19c4:	7f 1d       	adc	r23, r15
    19c6:	97 01       	movw	r18, r14
    19c8:	a8 01       	movw	r20, r16
    19ca:	ce 01       	movw	r24, r28
    19cc:	b2 de       	rcall	.-668    	; 0x1732 <prvInsertTimerInActiveList>
    19ce:	88 23       	and	r24, r24
    19d0:	59 f0       	breq	.+22     	; 0x19e8 <prvProcessExpiredTimer+0x5a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    19d2:	00 e0       	ldi	r16, 0x00	; 0
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	a7 01       	movw	r20, r14
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	ce 01       	movw	r24, r28
    19e0:	20 df       	rcall	.-448    	; 0x1822 <xTimerGenericCommand>
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <prvProcessExpiredTimer+0x5a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    19e4:	8e 7f       	andi	r24, 0xFE	; 254
    19e6:	8a 8b       	std	Y+18, r24	; 0x12
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    19e8:	e8 89       	ldd	r30, Y+16	; 0x10
    19ea:	f9 89       	ldd	r31, Y+17	; 0x11
    19ec:	ce 01       	movw	r24, r28
    19ee:	19 95       	eicall
    }
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	1f 91       	pop	r17
    19f6:	0f 91       	pop	r16
    19f8:	ff 90       	pop	r15
    19fa:	ef 90       	pop	r14
    19fc:	08 95       	ret

000019fe <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    19fe:	cf 92       	push	r12
    1a00:	df 92       	push	r13
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	1f 92       	push	r1
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	7c 01       	movw	r14, r24
    1a14:	16 2f       	mov	r17, r22
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1a16:	43 da       	rcall	.-2938   	; 0xe9e <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1a18:	ce 01       	movw	r24, r28
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	99 df       	rcall	.-206    	; 0x1950 <prvSampleTimeNow>
    1a1e:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	81 11       	cpse	r24, r1
    1a24:	24 c0       	rjmp	.+72     	; 0x1a6e <prvProcessTimerOrBlockTask+0x70>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1a26:	11 11       	cpse	r17, r1
    1a28:	08 c0       	rjmp	.+16     	; 0x1a3a <prvProcessTimerOrBlockTask+0x3c>
    1a2a:	ce 14       	cp	r12, r14
    1a2c:	df 04       	cpc	r13, r15
                {
                    ( void ) xTaskResumeAll();
    1a2e:	28 f0       	brcs	.+10     	; 0x1a3a <prvProcessTimerOrBlockTask+0x3c>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1a30:	5f db       	rcall	.-2370   	; 0x10f0 <xTaskResumeAll>
    1a32:	b6 01       	movw	r22, r12
    1a34:	c7 01       	movw	r24, r14
    1a36:	ab df       	rcall	.-170    	; 0x198e <prvProcessExpiredTimer>
    1a38:	1b c0       	rjmp	.+54     	; 0x1a70 <prvProcessTimerOrBlockTask+0x72>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    1a3a:	11 23       	and	r17, r17
    1a3c:	41 f0       	breq	.+16     	; 0x1a4e <prvProcessTimerOrBlockTask+0x50>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1a3e:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <pxOverflowTimerList>
    1a42:	f0 91 3a 03 	lds	r31, 0x033A	; 0x80033a <pxOverflowTimerList+0x1>
    1a46:	80 81       	ld	r24, Z
    1a48:	11 e0       	ldi	r17, 0x01	; 1
    1a4a:	81 11       	cpse	r24, r1
    1a4c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    1a4e:	b7 01       	movw	r22, r14
    1a50:	6c 19       	sub	r22, r12
    1a52:	7d 09       	sbc	r23, r13
    1a54:	41 2f       	mov	r20, r17
    1a56:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <xTimerQueue>
    1a5a:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <xTimerQueue+0x1>
    1a5e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    1a62:	46 db       	rcall	.-2420   	; 0x10f0 <xTaskResumeAll>
    1a64:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <prvProcessTimerOrBlockTask+0x72>
    1a68:	0e 94 75 01 	call	0x2ea	; 0x2ea <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    1a6c:	01 c0       	rjmp	.+2      	; 0x1a70 <prvProcessTimerOrBlockTask+0x72>
    1a6e:	40 db       	rcall	.-2432   	; 0x10f0 <xTaskResumeAll>
            }
        }
    }
    1a70:	0f 90       	pop	r0
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	df 90       	pop	r13
    1a7e:	cf 90       	pop	r12
    1a80:	08 95       	ret

00001a82 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <prvProcessReceivedCommands+0xe>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <prvProcessReceivedCommands+0x10>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1a96:	6b c0       	rjmp	.+214    	; 0x1b6e <prvProcessReceivedCommands+0xec>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	88 23       	and	r24, r24
    1a9c:	0c f4       	brge	.+2      	; 0x1aa0 <prvProcessReceivedCommands+0x1e>
    1a9e:	67 c0       	rjmp	.+206    	; 0x1b6e <prvProcessReceivedCommands+0xec>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1aa0:	ec 80       	ldd	r14, Y+4	; 0x04
    1aa2:	fd 80       	ldd	r15, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    1aa4:	d7 01       	movw	r26, r14
    1aa6:	1a 96       	adiw	r26, 0x0a	; 10
    1aa8:	8d 91       	ld	r24, X+
    1aaa:	9c 91       	ld	r25, X
    1aac:	1b 97       	sbiw	r26, 0x0b	; 11
    1aae:	89 2b       	or	r24, r25
    1ab0:	21 f0       	breq	.+8      	; 0x1aba <prvProcessReceivedCommands+0x38>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1ab2:	c7 01       	movw	r24, r14
    1ab4:	02 96       	adiw	r24, 0x02	; 2
    1ab6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1aba:	ce 01       	movw	r24, r28
    1abc:	06 96       	adiw	r24, 0x06	; 6
    1abe:	48 df       	rcall	.-368    	; 0x1950 <prvSampleTimeNow>
    1ac0:	ac 01       	movw	r20, r24

                switch( xMessage.xMessageID )
    1ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac4:	0e 2e       	mov	r0, r30
    1ac6:	00 0c       	add	r0, r0
    1ac8:	ff 0b       	sbc	r31, r31
    1aca:	ea 30       	cpi	r30, 0x0A	; 10
    1acc:	f1 05       	cpc	r31, r1
    1ace:	08 f0       	brcs	.+2      	; 0x1ad2 <prvProcessReceivedCommands+0x50>
    1ad0:	4e c0       	rjmp	.+156    	; 0x1b6e <prvProcessReceivedCommands+0xec>
    1ad2:	88 27       	eor	r24, r24
    1ad4:	ee 58       	subi	r30, 0x8E	; 142
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ada:	43 c1       	rjmp	.+646    	; 0x1d62 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    1adc:	f7 01       	movw	r30, r14
    1ade:	82 89       	ldd	r24, Z+18	; 0x12
    1ae0:	81 60       	ori	r24, 0x01	; 1
    1ae2:	82 8b       	std	Z+18, r24	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    1ae4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ae6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ae8:	64 85       	ldd	r22, Z+12	; 0x0c
    1aea:	75 85       	ldd	r23, Z+13	; 0x0d
    1aec:	62 0f       	add	r22, r18
    1aee:	73 1f       	adc	r23, r19
    1af0:	c7 01       	movw	r24, r14
    1af2:	1f de       	rcall	.-962    	; 0x1732 <prvInsertTimerInActiveList>
    1af4:	88 23       	and	r24, r24
    1af6:	d9 f1       	breq	.+118    	; 0x1b6e <prvProcessReceivedCommands+0xec>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1af8:	d7 01       	movw	r26, r14
    1afa:	50 96       	adiw	r26, 0x10	; 16
    1afc:	ed 91       	ld	r30, X+
    1afe:	fc 91       	ld	r31, X
    1b00:	51 97       	sbiw	r26, 0x11	; 17
    1b02:	c7 01       	movw	r24, r14
    1b04:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1b06:	f7 01       	movw	r30, r14
    1b08:	82 89       	ldd	r24, Z+18	; 0x12
    1b0a:	82 ff       	sbrs	r24, 2
    1b0c:	30 c0       	rjmp	.+96     	; 0x1b6e <prvProcessReceivedCommands+0xec>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    1b0e:	4a 81       	ldd	r20, Y+2	; 0x02
    1b10:	5b 81       	ldd	r21, Y+3	; 0x03
    1b12:	84 85       	ldd	r24, Z+12	; 0x0c
    1b14:	95 85       	ldd	r25, Z+13	; 0x0d
    1b16:	48 0f       	add	r20, r24
    1b18:	59 1f       	adc	r21, r25
    1b1a:	00 e0       	ldi	r16, 0x00	; 0
    1b1c:	10 e0       	ldi	r17, 0x00	; 0
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	c7 01       	movw	r24, r14
    1b26:	7d de       	rcall	.-774    	; 0x1822 <xTimerGenericCommand>
    1b28:	22 c0       	rjmp	.+68     	; 0x1b6e <prvProcessReceivedCommands+0xec>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    1b2a:	d7 01       	movw	r26, r14
    1b2c:	52 96       	adiw	r26, 0x12	; 18
    1b2e:	8c 91       	ld	r24, X
    1b30:	52 97       	sbiw	r26, 0x12	; 18
    1b32:	8e 7f       	andi	r24, 0xFE	; 254
    1b34:	52 96       	adiw	r26, 0x12	; 18
    1b36:	8c 93       	st	X, r24
                        break;
    1b38:	1a c0       	rjmp	.+52     	; 0x1b6e <prvProcessReceivedCommands+0xec>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    1b3a:	f7 01       	movw	r30, r14
    1b3c:	82 89       	ldd	r24, Z+18	; 0x12
    1b3e:	81 60       	ori	r24, 0x01	; 1
    1b40:	82 8b       	std	Z+18, r24	; 0x12
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1b42:	6a 81       	ldd	r22, Y+2	; 0x02
    1b44:	7b 81       	ldd	r23, Y+3	; 0x03
    1b46:	75 87       	std	Z+13, r23	; 0x0d
    1b48:	64 87       	std	Z+12, r22	; 0x0c
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    1b4a:	64 0f       	add	r22, r20
    1b4c:	75 1f       	adc	r23, r21
    1b4e:	9a 01       	movw	r18, r20
    1b50:	c7 01       	movw	r24, r14
    1b52:	ef dd       	rcall	.-1058   	; 0x1732 <prvInsertTimerInActiveList>
                        break;
    1b54:	0c c0       	rjmp	.+24     	; 0x1b6e <prvProcessReceivedCommands+0xec>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    1b56:	d7 01       	movw	r26, r14
    1b58:	52 96       	adiw	r26, 0x12	; 18
    1b5a:	8c 91       	ld	r24, X
    1b5c:	81 fd       	sbrc	r24, 1
    1b5e:	04 c0       	rjmp	.+8      	; 0x1b68 <prvProcessReceivedCommands+0xe6>
                                {
                                    vPortFree( pxTimer );
    1b60:	c7 01       	movw	r24, r14
    1b62:	0e 94 47 02 	call	0x48e	; 0x48e <vPortFree>
    1b66:	03 c0       	rjmp	.+6      	; 0x1b6e <prvProcessReceivedCommands+0xec>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    1b68:	8e 7f       	andi	r24, 0xFE	; 254
    1b6a:	f7 01       	movw	r30, r14
    1b6c:	82 8b       	std	Z+18, r24	; 0x12
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	be 01       	movw	r22, r28
    1b74:	6f 5f       	subi	r22, 0xFF	; 255
    1b76:	7f 4f       	sbci	r23, 0xFF	; 255
    1b78:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <xTimerQueue>
    1b7c:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <xTimerQueue+0x1>
    1b80:	0e 94 4d 04 	call	0x89a	; 0x89a <xQueueReceive>
    1b84:	81 11       	cpse	r24, r1
    1b86:	88 cf       	rjmp	.-240    	; 0x1a98 <prvProcessReceivedCommands+0x16>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    1b88:	26 96       	adiw	r28, 0x06	; 6
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	08 95       	ret

00001ba2 <usart_init>:


void usart_init()
{
	
	UBRR0 = 0x67;
    1ba2:	87 e6       	ldi	r24, 0x67	; 103
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    1baa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1bae:	88 e1       	ldi	r24, 0x18	; 24
    1bb0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    1bb4:	8e e0       	ldi	r24, 0x0E	; 14
    1bb6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
    1bba:	08 95       	ret

00001bbc <usart_send>:
}

void usart_send(char *data )
{
    1bbc:	fc 01       	movw	r30, r24
	
	while(*data)
    1bbe:	07 c0       	rjmp	.+14     	; 0x1bce <usart_send+0x12>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
    1bc0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1bc4:	95 ff       	sbrs	r25, 5
    1bc6:	fc cf       	rjmp	.-8      	; 0x1bc0 <usart_send+0x4>
		
		UDR0 = *data;
    1bc8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
		data++;
    1bcc:	31 96       	adiw	r30, 0x01	; 1
}

void usart_send(char *data )
{
	
	while(*data)
    1bce:	80 81       	ld	r24, Z
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	f6 cf       	rjmp	.-20     	; 0x1bc0 <usart_send+0x4>
		UDR0 = *data;
		data++;
	}
	
	
}
    1bd4:	08 95       	ret

00001bd6 <receiver>:
			vTaskDelay(500);
		}
	}

	void receiver(void *param)
	{
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <receiver+0x6>
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
		BaseType_t xStatus;

		while (1)
		{

			if (uxQueueMessagesWaiting(xQueue) != 5)   // How many element hold by queue is returned by this function.
    1be0:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <xQueue>
    1be4:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <xQueue+0x1>
    1be8:	0e 94 cc 04 	call	0x998	; 0x998 <uxQueueMessagesWaiting>
    1bec:	85 30       	cpi	r24, 0x05	; 5
    1bee:	19 f0       	breq	.+6      	; 0x1bf6 <receiver+0x20>
			{
				usart_send((char *)"Queue is full\r\r");
    1bf0:	8a e1       	ldi	r24, 0x1A	; 26
    1bf2:	92 e0       	ldi	r25, 0x02	; 2
    1bf4:	e3 df       	rcall	.-58     	; 0x1bbc <usart_send>
			}

			xStatus = xQueueReceive(xQueue, &ReceivedValue, 0);   // Get value from the queue. and return the whether it get the value or not. 
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	be 01       	movw	r22, r28
    1bfc:	6f 5f       	subi	r22, 0xFF	; 255
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <xQueue>
    1c04:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <xQueue+0x1>
    1c08:	0e 94 4d 04 	call	0x89a	; 0x89a <xQueueReceive>

			if (xStatus == pdPASS)
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	89 f5       	brne	.+98     	; 0x1c72 <receiver+0x9c>
			{
				if (ReceivedValue.eDataSource == esender1)
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	81 11       	cpse	r24, r1
    1c14:	17 c0       	rjmp	.+46     	; 0x1c44 <receiver+0x6e>
				{

					sprintf(str, "Received from sender1 -->  %d\r\r", ReceivedValue.ucValue);
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	8f 93       	push	r24
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	8f 93       	push	r24
    1c1e:	8a e2       	ldi	r24, 0x2A	; 42
    1c20:	92 e0       	ldi	r25, 0x02	; 2
    1c22:	9f 93       	push	r25
    1c24:	8f 93       	push	r24
    1c26:	87 e5       	ldi	r24, 0x57	; 87
    1c28:	93 e0       	ldi	r25, 0x03	; 3
    1c2a:	9f 93       	push	r25
    1c2c:	8f 93       	push	r24
    1c2e:	d2 d1       	rcall	.+932    	; 0x1fd4 <sprintf>

					usart_send(str);
    1c30:	87 e5       	ldi	r24, 0x57	; 87
    1c32:	93 e0       	ldi	r25, 0x03	; 3
    1c34:	c3 df       	rcall	.-122    	; 0x1bbc <usart_send>
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	1a c0       	rjmp	.+52     	; 0x1c78 <receiver+0xa2>
				}

				else
				{
					sprintf(str, "Received from sender2 -->  %d\r\r", ReceivedValue.ucValue);
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	8f 93       	push	r24
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	8f 93       	push	r24
    1c4c:	8a e4       	ldi	r24, 0x4A	; 74
    1c4e:	92 e0       	ldi	r25, 0x02	; 2
    1c50:	9f 93       	push	r25
    1c52:	8f 93       	push	r24
    1c54:	87 e5       	ldi	r24, 0x57	; 87
    1c56:	93 e0       	ldi	r25, 0x03	; 3
    1c58:	9f 93       	push	r25
    1c5a:	8f 93       	push	r24

					usart_send(str);
    1c5c:	bb d1       	rcall	.+886    	; 0x1fd4 <sprintf>
    1c5e:	87 e5       	ldi	r24, 0x57	; 87
    1c60:	93 e0       	ldi	r25, 0x03	; 3
    1c62:	ac df       	rcall	.-168    	; 0x1bbc <usart_send>
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
				}
			}
			else
			{
				usart_send((char *)"not received from queue.\r\r");
    1c70:	03 c0       	rjmp	.+6      	; 0x1c78 <receiver+0xa2>
    1c72:	8a e6       	ldi	r24, 0x6A	; 106
    1c74:	92 e0       	ldi	r25, 0x02	; 2
			}
			vTaskDelay(500);
    1c76:	a2 df       	rcall	.-188    	; 0x1bbc <usart_send>
    1c78:	84 ef       	ldi	r24, 0xF4	; 244
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	0b db       	rcall	.-2538   	; 0x1294 <vTaskDelay>
		}
    1c7e:	b0 cf       	rjmp	.-160    	; 0x1be0 <receiver+0xa>

00001c80 <sender>:
			usart_send((char *)"not get anything\r");
		}
	}

	void sender(void *param)
	{
    1c80:	ec 01       	movw	r28, r24
		//Data_t* ValueToSend;
		//ValueToSend = (Data_t*) param;

		while (1)
		{
			xStatus = xQueueSendToBack(xQueue, param, xTickToWait);  // used to put value at back of queue. and return whether it pass or not. 
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	46 e0       	ldi	r20, 0x06	; 6
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	be 01       	movw	r22, r28
    1c8a:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <xQueue>
    1c8e:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <xQueue+0x1>
    1c92:	0e 94 91 03 	call	0x722	; 0x722 <xQueueGenericSend>

			if (xStatus == pdPASS)
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	21 f4       	brne	.+8      	; 0x1ca2 <sender+0x22>
			{
				usart_send((char *)"Send to queue\r\r");
    1c9a:	85 e8       	ldi	r24, 0x85	; 133
    1c9c:	92 e0       	ldi	r25, 0x02	; 2
    1c9e:	8e df       	rcall	.-228    	; 0x1bbc <usart_send>
    1ca0:	03 c0       	rjmp	.+6      	; 0x1ca8 <sender+0x28>
			}
			else
			{
				usart_send((char *)"not send\r\r");
    1ca2:	85 e9       	ldi	r24, 0x95	; 149
    1ca4:	92 e0       	ldi	r25, 0x02	; 2
    1ca6:	8a df       	rcall	.-236    	; 0x1bbc <usart_send>
			}

			vTaskDelay(500);
    1ca8:	84 ef       	ldi	r24, 0xF4	; 244
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	f3 da       	rcall	.-2586   	; 0x1294 <vTaskDelay>
		}
    1cae:	e9 cf       	rjmp	.-46     	; 0x1c82 <sender+0x2>

00001cb0 <vApplicationIdleHook>:
volatile uint32_t ulIdleCycleCount = 0UL;

void vApplicationIdleHook(void)
{

	ulIdleCycleCount++; // increment the variable. at each tick of crystal.
    1cb0:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <ulIdleCycleCount>
    1cb4:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <ulIdleCycleCount+0x1>
    1cb8:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <ulIdleCycleCount+0x2>
    1cbc:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <ulIdleCycleCount+0x3>
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	a1 1d       	adc	r26, r1
    1cc4:	b1 1d       	adc	r27, r1
    1cc6:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <ulIdleCycleCount>
    1cca:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <ulIdleCycleCount+0x1>
    1cce:	a0 93 51 03 	sts	0x0351, r26	; 0x800351 <ulIdleCycleCount+0x2>
    1cd2:	b0 93 52 03 	sts	0x0352, r27	; 0x800352 <ulIdleCycleCount+0x3>
    1cd6:	08 95       	ret

00001cd8 <main>:
	{100, esender1},

	{200, esender2}};

	int main(void)
	{
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
		usart_init();
    1cde:	61 df       	rcall	.-318    	; 0x1ba2 <usart_init>
		

		xQueue = xQueueCreate(5, sizeof(Data_t));
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	63 e0       	ldi	r22, 0x03	; 3
    1ce4:	85 e0       	ldi	r24, 0x05	; 5
    1ce6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <xQueueGenericCreate>
    1cea:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <xQueue+0x1>
    1cee:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <xQueue>

		if (xQueue != NULL)
    1cf2:	89 2b       	or	r24, r25
    1cf4:	69 f1       	breq	.+90     	; 0x1d50 <main+0x78>
		{

			xTaskCreate(sender, "sender1", 100, &(xStructsToSend[0]), 2, &TaskHandle1);
    1cf6:	0f 2e       	mov	r0, r31
    1cf8:	f5 e7       	ldi	r31, 0x75	; 117
    1cfa:	ef 2e       	mov	r14, r31
    1cfc:	f3 e0       	ldi	r31, 0x03	; 3
    1cfe:	ff 2e       	mov	r15, r31
    1d00:	f0 2d       	mov	r31, r0
    1d02:	02 e0       	ldi	r16, 0x02	; 2
    1d04:	27 e0       	ldi	r18, 0x07	; 7
    1d06:	32 e0       	ldi	r19, 0x02	; 2
    1d08:	44 e6       	ldi	r20, 0x64	; 100
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	60 ea       	ldi	r22, 0xA0	; 160
    1d0e:	72 e0       	ldi	r23, 0x02	; 2
    1d10:	80 e4       	ldi	r24, 0x40	; 64
    1d12:	9e e0       	ldi	r25, 0x0E	; 14
    1d14:	4e d8       	rcall	.-3940   	; 0xdb2 <xTaskCreate>
			xTaskCreate(sender, "sender2", 100, &(xStructsToSend[1]), 2, &TaskHandle2);
    1d16:	0f 2e       	mov	r0, r31
    1d18:	f3 e5       	ldi	r31, 0x53	; 83
    1d1a:	ef 2e       	mov	r14, r31
    1d1c:	f3 e0       	ldi	r31, 0x03	; 3
    1d1e:	ff 2e       	mov	r15, r31
    1d20:	f0 2d       	mov	r31, r0
    1d22:	2a e0       	ldi	r18, 0x0A	; 10
    1d24:	32 e0       	ldi	r19, 0x02	; 2
    1d26:	44 e6       	ldi	r20, 0x64	; 100
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	68 ea       	ldi	r22, 0xA8	; 168
    1d2c:	72 e0       	ldi	r23, 0x02	; 2
    1d2e:	80 e4       	ldi	r24, 0x40	; 64
    1d30:	9e e0       	ldi	r25, 0x0E	; 14
    1d32:	3f d8       	rcall	.-3970   	; 0xdb2 <xTaskCreate>

			xTaskCreate(receiver, "Receiver", 100, NULL, 1, NULL);
    1d34:	e1 2c       	mov	r14, r1
    1d36:	f1 2c       	mov	r15, r1
    1d38:	01 e0       	ldi	r16, 0x01	; 1
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	44 e6       	ldi	r20, 0x64	; 100
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	60 eb       	ldi	r22, 0xB0	; 176
    1d44:	72 e0       	ldi	r23, 0x02	; 2
    1d46:	8b ee       	ldi	r24, 0xEB	; 235
    1d48:	9d e0       	ldi	r25, 0x0D	; 13

			vTaskStartScheduler();
    1d4a:	33 d8       	rcall	.-3994   	; 0xdb2 <xTaskCreate>
    1d4c:	7b d8       	rcall	.-3850   	; 0xe44 <vTaskStartScheduler>
    1d4e:	03 c0       	rjmp	.+6      	; 0x1d56 <main+0x7e>
		}
		else
		{
			usart_send((char *)"not get anything\r");
    1d50:	89 eb       	ldi	r24, 0xB9	; 185
    1d52:	92 e0       	ldi	r25, 0x02	; 2
    1d54:	33 df       	rcall	.-410    	; 0x1bbc <usart_send>
		}
	}
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	08 95       	ret

00001d62 <__tablejump2__>:
    1d62:	ee 0f       	add	r30, r30
    1d64:	ff 1f       	adc	r31, r31
    1d66:	88 1f       	adc	r24, r24
    1d68:	8b bf       	out	0x3b, r24	; 59
    1d6a:	07 90       	elpm	r0, Z+
    1d6c:	f6 91       	elpm	r31, Z
    1d6e:	e0 2d       	mov	r30, r0
    1d70:	19 94       	eijmp

00001d72 <malloc>:
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	10 f4       	brcc	.+4      	; 0x1d84 <malloc+0x12>
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <__flp>
    1d88:	f0 91 7a 03 	lds	r31, 0x037A	; 0x80037a <__flp+0x1>
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	a0 e0       	ldi	r26, 0x00	; 0
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	30 97       	sbiw	r30, 0x00	; 0
    1d96:	19 f1       	breq	.+70     	; 0x1dde <malloc+0x6c>
    1d98:	40 81       	ld	r20, Z
    1d9a:	51 81       	ldd	r21, Z+1	; 0x01
    1d9c:	02 81       	ldd	r16, Z+2	; 0x02
    1d9e:	13 81       	ldd	r17, Z+3	; 0x03
    1da0:	48 17       	cp	r20, r24
    1da2:	59 07       	cpc	r21, r25
    1da4:	c8 f0       	brcs	.+50     	; 0x1dd8 <malloc+0x66>
    1da6:	84 17       	cp	r24, r20
    1da8:	95 07       	cpc	r25, r21
    1daa:	69 f4       	brne	.+26     	; 0x1dc6 <malloc+0x54>
    1dac:	10 97       	sbiw	r26, 0x00	; 0
    1dae:	31 f0       	breq	.+12     	; 0x1dbc <malloc+0x4a>
    1db0:	12 96       	adiw	r26, 0x02	; 2
    1db2:	0c 93       	st	X, r16
    1db4:	12 97       	sbiw	r26, 0x02	; 2
    1db6:	13 96       	adiw	r26, 0x03	; 3
    1db8:	1c 93       	st	X, r17
    1dba:	27 c0       	rjmp	.+78     	; 0x1e0a <malloc+0x98>
    1dbc:	00 93 79 03 	sts	0x0379, r16	; 0x800379 <__flp>
    1dc0:	10 93 7a 03 	sts	0x037A, r17	; 0x80037a <__flp+0x1>
    1dc4:	22 c0       	rjmp	.+68     	; 0x1e0a <malloc+0x98>
    1dc6:	21 15       	cp	r18, r1
    1dc8:	31 05       	cpc	r19, r1
    1dca:	19 f0       	breq	.+6      	; 0x1dd2 <malloc+0x60>
    1dcc:	42 17       	cp	r20, r18
    1dce:	53 07       	cpc	r21, r19
    1dd0:	18 f4       	brcc	.+6      	; 0x1dd8 <malloc+0x66>
    1dd2:	9a 01       	movw	r18, r20
    1dd4:	bd 01       	movw	r22, r26
    1dd6:	ef 01       	movw	r28, r30
    1dd8:	df 01       	movw	r26, r30
    1dda:	f8 01       	movw	r30, r16
    1ddc:	db cf       	rjmp	.-74     	; 0x1d94 <malloc+0x22>
    1dde:	21 15       	cp	r18, r1
    1de0:	31 05       	cpc	r19, r1
    1de2:	f9 f0       	breq	.+62     	; 0x1e22 <malloc+0xb0>
    1de4:	28 1b       	sub	r18, r24
    1de6:	39 0b       	sbc	r19, r25
    1de8:	24 30       	cpi	r18, 0x04	; 4
    1dea:	31 05       	cpc	r19, r1
    1dec:	80 f4       	brcc	.+32     	; 0x1e0e <malloc+0x9c>
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	61 15       	cp	r22, r1
    1df4:	71 05       	cpc	r23, r1
    1df6:	21 f0       	breq	.+8      	; 0x1e00 <malloc+0x8e>
    1df8:	fb 01       	movw	r30, r22
    1dfa:	93 83       	std	Z+3, r25	; 0x03
    1dfc:	82 83       	std	Z+2, r24	; 0x02
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <malloc+0x96>
    1e00:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <__flp+0x1>
    1e04:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <__flp>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	32 96       	adiw	r30, 0x02	; 2
    1e0c:	44 c0       	rjmp	.+136    	; 0x1e96 <malloc+0x124>
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	81 93       	st	Z+, r24
    1e16:	91 93       	st	Z+, r25
    1e18:	22 50       	subi	r18, 0x02	; 2
    1e1a:	31 09       	sbc	r19, r1
    1e1c:	39 83       	std	Y+1, r19	; 0x01
    1e1e:	28 83       	st	Y, r18
    1e20:	3a c0       	rjmp	.+116    	; 0x1e96 <malloc+0x124>
    1e22:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <__brkval>
    1e26:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <__brkval+0x1>
    1e2a:	23 2b       	or	r18, r19
    1e2c:	41 f4       	brne	.+16     	; 0x1e3e <malloc+0xcc>
    1e2e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1e32:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1e36:	30 93 78 03 	sts	0x0378, r19	; 0x800378 <__brkval+0x1>
    1e3a:	20 93 77 03 	sts	0x0377, r18	; 0x800377 <__brkval>
    1e3e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1e42:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1e46:	21 15       	cp	r18, r1
    1e48:	31 05       	cpc	r19, r1
    1e4a:	41 f4       	brne	.+16     	; 0x1e5c <malloc+0xea>
    1e4c:	2d b7       	in	r18, 0x3d	; 61
    1e4e:	3e b7       	in	r19, 0x3e	; 62
    1e50:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1e54:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1e58:	24 1b       	sub	r18, r20
    1e5a:	35 0b       	sbc	r19, r21
    1e5c:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <__brkval>
    1e60:	f0 91 78 03 	lds	r31, 0x0378	; 0x800378 <__brkval+0x1>
    1e64:	e2 17       	cp	r30, r18
    1e66:	f3 07       	cpc	r31, r19
    1e68:	a0 f4       	brcc	.+40     	; 0x1e92 <malloc+0x120>
    1e6a:	2e 1b       	sub	r18, r30
    1e6c:	3f 0b       	sbc	r19, r31
    1e6e:	28 17       	cp	r18, r24
    1e70:	39 07       	cpc	r19, r25
    1e72:	78 f0       	brcs	.+30     	; 0x1e92 <malloc+0x120>
    1e74:	ac 01       	movw	r20, r24
    1e76:	4e 5f       	subi	r20, 0xFE	; 254
    1e78:	5f 4f       	sbci	r21, 0xFF	; 255
    1e7a:	24 17       	cp	r18, r20
    1e7c:	35 07       	cpc	r19, r21
    1e7e:	48 f0       	brcs	.+18     	; 0x1e92 <malloc+0x120>
    1e80:	4e 0f       	add	r20, r30
    1e82:	5f 1f       	adc	r21, r31
    1e84:	50 93 78 03 	sts	0x0378, r21	; 0x800378 <__brkval+0x1>
    1e88:	40 93 77 03 	sts	0x0377, r20	; 0x800377 <__brkval>
    1e8c:	81 93       	st	Z+, r24
    1e8e:	91 93       	st	Z+, r25
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <malloc+0x124>
    1e92:	e0 e0       	ldi	r30, 0x00	; 0
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	cf 01       	movw	r24, r30
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	08 95       	ret

00001ea2 <free>:
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <free+0xa>
    1eaa:	81 c0       	rjmp	.+258    	; 0x1fae <free+0x10c>
    1eac:	fc 01       	movw	r30, r24
    1eae:	32 97       	sbiw	r30, 0x02	; 2
    1eb0:	13 82       	std	Z+3, r1	; 0x03
    1eb2:	12 82       	std	Z+2, r1	; 0x02
    1eb4:	a0 91 79 03 	lds	r26, 0x0379	; 0x800379 <__flp>
    1eb8:	b0 91 7a 03 	lds	r27, 0x037A	; 0x80037a <__flp+0x1>
    1ebc:	10 97       	sbiw	r26, 0x00	; 0
    1ebe:	81 f4       	brne	.+32     	; 0x1ee0 <free+0x3e>
    1ec0:	20 81       	ld	r18, Z
    1ec2:	31 81       	ldd	r19, Z+1	; 0x01
    1ec4:	82 0f       	add	r24, r18
    1ec6:	93 1f       	adc	r25, r19
    1ec8:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <__brkval>
    1ecc:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <__brkval+0x1>
    1ed0:	28 17       	cp	r18, r24
    1ed2:	39 07       	cpc	r19, r25
    1ed4:	51 f5       	brne	.+84     	; 0x1f2a <free+0x88>
    1ed6:	f0 93 78 03 	sts	0x0378, r31	; 0x800378 <__brkval+0x1>
    1eda:	e0 93 77 03 	sts	0x0377, r30	; 0x800377 <__brkval>
    1ede:	67 c0       	rjmp	.+206    	; 0x1fae <free+0x10c>
    1ee0:	ed 01       	movw	r28, r26
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	ce 17       	cp	r28, r30
    1ee8:	df 07       	cpc	r29, r31
    1eea:	40 f4       	brcc	.+16     	; 0x1efc <free+0x5a>
    1eec:	4a 81       	ldd	r20, Y+2	; 0x02
    1eee:	5b 81       	ldd	r21, Y+3	; 0x03
    1ef0:	9e 01       	movw	r18, r28
    1ef2:	41 15       	cp	r20, r1
    1ef4:	51 05       	cpc	r21, r1
    1ef6:	f1 f0       	breq	.+60     	; 0x1f34 <free+0x92>
    1ef8:	ea 01       	movw	r28, r20
    1efa:	f5 cf       	rjmp	.-22     	; 0x1ee6 <free+0x44>
    1efc:	d3 83       	std	Z+3, r29	; 0x03
    1efe:	c2 83       	std	Z+2, r28	; 0x02
    1f00:	40 81       	ld	r20, Z
    1f02:	51 81       	ldd	r21, Z+1	; 0x01
    1f04:	84 0f       	add	r24, r20
    1f06:	95 1f       	adc	r25, r21
    1f08:	c8 17       	cp	r28, r24
    1f0a:	d9 07       	cpc	r29, r25
    1f0c:	59 f4       	brne	.+22     	; 0x1f24 <free+0x82>
    1f0e:	88 81       	ld	r24, Y
    1f10:	99 81       	ldd	r25, Y+1	; 0x01
    1f12:	84 0f       	add	r24, r20
    1f14:	95 1f       	adc	r25, r21
    1f16:	02 96       	adiw	r24, 0x02	; 2
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	80 83       	st	Z, r24
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f20:	93 83       	std	Z+3, r25	; 0x03
    1f22:	82 83       	std	Z+2, r24	; 0x02
    1f24:	21 15       	cp	r18, r1
    1f26:	31 05       	cpc	r19, r1
    1f28:	29 f4       	brne	.+10     	; 0x1f34 <free+0x92>
    1f2a:	f0 93 7a 03 	sts	0x037A, r31	; 0x80037a <__flp+0x1>
    1f2e:	e0 93 79 03 	sts	0x0379, r30	; 0x800379 <__flp>
    1f32:	3d c0       	rjmp	.+122    	; 0x1fae <free+0x10c>
    1f34:	e9 01       	movw	r28, r18
    1f36:	fb 83       	std	Y+3, r31	; 0x03
    1f38:	ea 83       	std	Y+2, r30	; 0x02
    1f3a:	49 91       	ld	r20, Y+
    1f3c:	59 91       	ld	r21, Y+
    1f3e:	c4 0f       	add	r28, r20
    1f40:	d5 1f       	adc	r29, r21
    1f42:	ec 17       	cp	r30, r28
    1f44:	fd 07       	cpc	r31, r29
    1f46:	61 f4       	brne	.+24     	; 0x1f60 <free+0xbe>
    1f48:	80 81       	ld	r24, Z
    1f4a:	91 81       	ldd	r25, Z+1	; 0x01
    1f4c:	84 0f       	add	r24, r20
    1f4e:	95 1f       	adc	r25, r21
    1f50:	02 96       	adiw	r24, 0x02	; 2
    1f52:	e9 01       	movw	r28, r18
    1f54:	99 83       	std	Y+1, r25	; 0x01
    1f56:	88 83       	st	Y, r24
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	9b 83       	std	Y+3, r25	; 0x03
    1f5e:	8a 83       	std	Y+2, r24	; 0x02
    1f60:	e0 e0       	ldi	r30, 0x00	; 0
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	12 96       	adiw	r26, 0x02	; 2
    1f66:	8d 91       	ld	r24, X+
    1f68:	9c 91       	ld	r25, X
    1f6a:	13 97       	sbiw	r26, 0x03	; 3
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	19 f0       	breq	.+6      	; 0x1f76 <free+0xd4>
    1f70:	fd 01       	movw	r30, r26
    1f72:	dc 01       	movw	r26, r24
    1f74:	f7 cf       	rjmp	.-18     	; 0x1f64 <free+0xc2>
    1f76:	8d 91       	ld	r24, X+
    1f78:	9c 91       	ld	r25, X
    1f7a:	11 97       	sbiw	r26, 0x01	; 1
    1f7c:	9d 01       	movw	r18, r26
    1f7e:	2e 5f       	subi	r18, 0xFE	; 254
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	82 0f       	add	r24, r18
    1f84:	93 1f       	adc	r25, r19
    1f86:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <__brkval>
    1f8a:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <__brkval+0x1>
    1f8e:	28 17       	cp	r18, r24
    1f90:	39 07       	cpc	r19, r25
    1f92:	69 f4       	brne	.+26     	; 0x1fae <free+0x10c>
    1f94:	30 97       	sbiw	r30, 0x00	; 0
    1f96:	29 f4       	brne	.+10     	; 0x1fa2 <free+0x100>
    1f98:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <__flp+0x1>
    1f9c:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <__flp>
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <free+0x104>
    1fa2:	13 82       	std	Z+3, r1	; 0x03
    1fa4:	12 82       	std	Z+2, r1	; 0x02
    1fa6:	b0 93 78 03 	sts	0x0378, r27	; 0x800378 <__brkval+0x1>
    1faa:	a0 93 77 03 	sts	0x0377, r26	; 0x800377 <__brkval>
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	08 95       	ret

00001fb4 <memcpy>:
    1fb4:	fb 01       	movw	r30, r22
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <memcpy+0xa>
    1fba:	01 90       	ld	r0, Z+
    1fbc:	0d 92       	st	X+, r0
    1fbe:	41 50       	subi	r20, 0x01	; 1
    1fc0:	50 40       	sbci	r21, 0x00	; 0
    1fc2:	d8 f7       	brcc	.-10     	; 0x1fba <memcpy+0x6>
    1fc4:	08 95       	ret

00001fc6 <memset>:
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <memset+0x6>
    1fca:	6d 93       	st	X+, r22
    1fcc:	41 50       	subi	r20, 0x01	; 1
    1fce:	50 40       	sbci	r21, 0x00	; 0
    1fd0:	e0 f7       	brcc	.-8      	; 0x1fca <memset+0x4>
    1fd2:	08 95       	ret

00001fd4 <sprintf>:
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	2e 97       	sbiw	r28, 0x0e	; 14
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	0e 89       	ldd	r16, Y+22	; 0x16
    1fee:	1f 89       	ldd	r17, Y+23	; 0x17
    1ff0:	86 e0       	ldi	r24, 0x06	; 6
    1ff2:	8c 83       	std	Y+4, r24	; 0x04
    1ff4:	1a 83       	std	Y+2, r17	; 0x02
    1ff6:	09 83       	std	Y+1, r16	; 0x01
    1ff8:	8f ef       	ldi	r24, 0xFF	; 255
    1ffa:	9f e7       	ldi	r25, 0x7F	; 127
    1ffc:	9e 83       	std	Y+6, r25	; 0x06
    1ffe:	8d 83       	std	Y+5, r24	; 0x05
    2000:	ae 01       	movw	r20, r28
    2002:	46 5e       	subi	r20, 0xE6	; 230
    2004:	5f 4f       	sbci	r21, 0xFF	; 255
    2006:	68 8d       	ldd	r22, Y+24	; 0x18
    2008:	79 8d       	ldd	r23, Y+25	; 0x19
    200a:	ce 01       	movw	r24, r28
    200c:	01 96       	adiw	r24, 0x01	; 1
    200e:	10 d0       	rcall	.+32     	; 0x2030 <vfprintf>
    2010:	ef 81       	ldd	r30, Y+7	; 0x07
    2012:	f8 85       	ldd	r31, Y+8	; 0x08
    2014:	e0 0f       	add	r30, r16
    2016:	f1 1f       	adc	r31, r17
    2018:	10 82       	st	Z, r1
    201a:	2e 96       	adiw	r28, 0x0e	; 14
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <vfprintf>:
    2030:	2f 92       	push	r2
    2032:	3f 92       	push	r3
    2034:	4f 92       	push	r4
    2036:	5f 92       	push	r5
    2038:	6f 92       	push	r6
    203a:	7f 92       	push	r7
    203c:	8f 92       	push	r8
    203e:	9f 92       	push	r9
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	2b 97       	sbiw	r28, 0x0b	; 11
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	6c 01       	movw	r12, r24
    2066:	7b 01       	movw	r14, r22
    2068:	8a 01       	movw	r16, r20
    206a:	fc 01       	movw	r30, r24
    206c:	17 82       	std	Z+7, r1	; 0x07
    206e:	16 82       	std	Z+6, r1	; 0x06
    2070:	83 81       	ldd	r24, Z+3	; 0x03
    2072:	81 ff       	sbrs	r24, 1
    2074:	bf c1       	rjmp	.+894    	; 0x23f4 <__stack+0x1f5>
    2076:	ce 01       	movw	r24, r28
    2078:	01 96       	adiw	r24, 0x01	; 1
    207a:	3c 01       	movw	r6, r24
    207c:	f6 01       	movw	r30, r12
    207e:	93 81       	ldd	r25, Z+3	; 0x03
    2080:	f7 01       	movw	r30, r14
    2082:	93 fd       	sbrc	r25, 3
    2084:	85 91       	lpm	r24, Z+
    2086:	93 ff       	sbrs	r25, 3
    2088:	81 91       	ld	r24, Z+
    208a:	7f 01       	movw	r14, r30
    208c:	88 23       	and	r24, r24
    208e:	09 f4       	brne	.+2      	; 0x2092 <vfprintf+0x62>
    2090:	ad c1       	rjmp	.+858    	; 0x23ec <__stack+0x1ed>
    2092:	85 32       	cpi	r24, 0x25	; 37
    2094:	39 f4       	brne	.+14     	; 0x20a4 <vfprintf+0x74>
    2096:	93 fd       	sbrc	r25, 3
    2098:	85 91       	lpm	r24, Z+
    209a:	93 ff       	sbrs	r25, 3
    209c:	81 91       	ld	r24, Z+
    209e:	7f 01       	movw	r14, r30
    20a0:	85 32       	cpi	r24, 0x25	; 37
    20a2:	21 f4       	brne	.+8      	; 0x20ac <vfprintf+0x7c>
    20a4:	b6 01       	movw	r22, r12
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	d6 d1       	rcall	.+940    	; 0x2456 <fputc>
    20aa:	e8 cf       	rjmp	.-48     	; 0x207c <vfprintf+0x4c>
    20ac:	91 2c       	mov	r9, r1
    20ae:	21 2c       	mov	r2, r1
    20b0:	31 2c       	mov	r3, r1
    20b2:	ff e1       	ldi	r31, 0x1F	; 31
    20b4:	f3 15       	cp	r31, r3
    20b6:	d8 f0       	brcs	.+54     	; 0x20ee <vfprintf+0xbe>
    20b8:	8b 32       	cpi	r24, 0x2B	; 43
    20ba:	79 f0       	breq	.+30     	; 0x20da <vfprintf+0xaa>
    20bc:	38 f4       	brcc	.+14     	; 0x20cc <vfprintf+0x9c>
    20be:	80 32       	cpi	r24, 0x20	; 32
    20c0:	79 f0       	breq	.+30     	; 0x20e0 <vfprintf+0xb0>
    20c2:	83 32       	cpi	r24, 0x23	; 35
    20c4:	a1 f4       	brne	.+40     	; 0x20ee <vfprintf+0xbe>
    20c6:	23 2d       	mov	r18, r3
    20c8:	20 61       	ori	r18, 0x10	; 16
    20ca:	1d c0       	rjmp	.+58     	; 0x2106 <vfprintf+0xd6>
    20cc:	8d 32       	cpi	r24, 0x2D	; 45
    20ce:	61 f0       	breq	.+24     	; 0x20e8 <vfprintf+0xb8>
    20d0:	80 33       	cpi	r24, 0x30	; 48
    20d2:	69 f4       	brne	.+26     	; 0x20ee <vfprintf+0xbe>
    20d4:	23 2d       	mov	r18, r3
    20d6:	21 60       	ori	r18, 0x01	; 1
    20d8:	16 c0       	rjmp	.+44     	; 0x2106 <vfprintf+0xd6>
    20da:	83 2d       	mov	r24, r3
    20dc:	82 60       	ori	r24, 0x02	; 2
    20de:	38 2e       	mov	r3, r24
    20e0:	e3 2d       	mov	r30, r3
    20e2:	e4 60       	ori	r30, 0x04	; 4
    20e4:	3e 2e       	mov	r3, r30
    20e6:	2a c0       	rjmp	.+84     	; 0x213c <vfprintf+0x10c>
    20e8:	f3 2d       	mov	r31, r3
    20ea:	f8 60       	ori	r31, 0x08	; 8
    20ec:	1d c0       	rjmp	.+58     	; 0x2128 <vfprintf+0xf8>
    20ee:	37 fc       	sbrc	r3, 7
    20f0:	2d c0       	rjmp	.+90     	; 0x214c <vfprintf+0x11c>
    20f2:	20 ed       	ldi	r18, 0xD0	; 208
    20f4:	28 0f       	add	r18, r24
    20f6:	2a 30       	cpi	r18, 0x0A	; 10
    20f8:	40 f0       	brcs	.+16     	; 0x210a <vfprintf+0xda>
    20fa:	8e 32       	cpi	r24, 0x2E	; 46
    20fc:	b9 f4       	brne	.+46     	; 0x212c <vfprintf+0xfc>
    20fe:	36 fc       	sbrc	r3, 6
    2100:	75 c1       	rjmp	.+746    	; 0x23ec <__stack+0x1ed>
    2102:	23 2d       	mov	r18, r3
    2104:	20 64       	ori	r18, 0x40	; 64
    2106:	32 2e       	mov	r3, r18
    2108:	19 c0       	rjmp	.+50     	; 0x213c <vfprintf+0x10c>
    210a:	36 fe       	sbrs	r3, 6
    210c:	06 c0       	rjmp	.+12     	; 0x211a <vfprintf+0xea>
    210e:	8a e0       	ldi	r24, 0x0A	; 10
    2110:	98 9e       	mul	r9, r24
    2112:	20 0d       	add	r18, r0
    2114:	11 24       	eor	r1, r1
    2116:	92 2e       	mov	r9, r18
    2118:	11 c0       	rjmp	.+34     	; 0x213c <vfprintf+0x10c>
    211a:	ea e0       	ldi	r30, 0x0A	; 10
    211c:	2e 9e       	mul	r2, r30
    211e:	20 0d       	add	r18, r0
    2120:	11 24       	eor	r1, r1
    2122:	22 2e       	mov	r2, r18
    2124:	f3 2d       	mov	r31, r3
    2126:	f0 62       	ori	r31, 0x20	; 32
    2128:	3f 2e       	mov	r3, r31
    212a:	08 c0       	rjmp	.+16     	; 0x213c <vfprintf+0x10c>
    212c:	8c 36       	cpi	r24, 0x6C	; 108
    212e:	21 f4       	brne	.+8      	; 0x2138 <vfprintf+0x108>
    2130:	83 2d       	mov	r24, r3
    2132:	80 68       	ori	r24, 0x80	; 128
    2134:	38 2e       	mov	r3, r24
    2136:	02 c0       	rjmp	.+4      	; 0x213c <vfprintf+0x10c>
    2138:	88 36       	cpi	r24, 0x68	; 104
    213a:	41 f4       	brne	.+16     	; 0x214c <vfprintf+0x11c>
    213c:	f7 01       	movw	r30, r14
    213e:	93 fd       	sbrc	r25, 3
    2140:	85 91       	lpm	r24, Z+
    2142:	93 ff       	sbrs	r25, 3
    2144:	81 91       	ld	r24, Z+
    2146:	7f 01       	movw	r14, r30
    2148:	81 11       	cpse	r24, r1
    214a:	b3 cf       	rjmp	.-154    	; 0x20b2 <vfprintf+0x82>
    214c:	98 2f       	mov	r25, r24
    214e:	9f 7d       	andi	r25, 0xDF	; 223
    2150:	95 54       	subi	r25, 0x45	; 69
    2152:	93 30       	cpi	r25, 0x03	; 3
    2154:	28 f4       	brcc	.+10     	; 0x2160 <vfprintf+0x130>
    2156:	0c 5f       	subi	r16, 0xFC	; 252
    2158:	1f 4f       	sbci	r17, 0xFF	; 255
    215a:	9f e3       	ldi	r25, 0x3F	; 63
    215c:	99 83       	std	Y+1, r25	; 0x01
    215e:	0d c0       	rjmp	.+26     	; 0x217a <vfprintf+0x14a>
    2160:	83 36       	cpi	r24, 0x63	; 99
    2162:	31 f0       	breq	.+12     	; 0x2170 <vfprintf+0x140>
    2164:	83 37       	cpi	r24, 0x73	; 115
    2166:	71 f0       	breq	.+28     	; 0x2184 <vfprintf+0x154>
    2168:	83 35       	cpi	r24, 0x53	; 83
    216a:	09 f0       	breq	.+2      	; 0x216e <vfprintf+0x13e>
    216c:	55 c0       	rjmp	.+170    	; 0x2218 <__stack+0x19>
    216e:	20 c0       	rjmp	.+64     	; 0x21b0 <vfprintf+0x180>
    2170:	f8 01       	movw	r30, r16
    2172:	80 81       	ld	r24, Z
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	0e 5f       	subi	r16, 0xFE	; 254
    2178:	1f 4f       	sbci	r17, 0xFF	; 255
    217a:	88 24       	eor	r8, r8
    217c:	83 94       	inc	r8
    217e:	91 2c       	mov	r9, r1
    2180:	53 01       	movw	r10, r6
    2182:	12 c0       	rjmp	.+36     	; 0x21a8 <vfprintf+0x178>
    2184:	28 01       	movw	r4, r16
    2186:	f2 e0       	ldi	r31, 0x02	; 2
    2188:	4f 0e       	add	r4, r31
    218a:	51 1c       	adc	r5, r1
    218c:	f8 01       	movw	r30, r16
    218e:	a0 80       	ld	r10, Z
    2190:	b1 80       	ldd	r11, Z+1	; 0x01
    2192:	36 fe       	sbrs	r3, 6
    2194:	03 c0       	rjmp	.+6      	; 0x219c <vfprintf+0x16c>
    2196:	69 2d       	mov	r22, r9
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <vfprintf+0x170>
    219c:	6f ef       	ldi	r22, 0xFF	; 255
    219e:	7f ef       	ldi	r23, 0xFF	; 255
    21a0:	c5 01       	movw	r24, r10
    21a2:	4e d1       	rcall	.+668    	; 0x2440 <strnlen>
    21a4:	4c 01       	movw	r8, r24
    21a6:	82 01       	movw	r16, r4
    21a8:	f3 2d       	mov	r31, r3
    21aa:	ff 77       	andi	r31, 0x7F	; 127
    21ac:	3f 2e       	mov	r3, r31
    21ae:	15 c0       	rjmp	.+42     	; 0x21da <vfprintf+0x1aa>
    21b0:	28 01       	movw	r4, r16
    21b2:	22 e0       	ldi	r18, 0x02	; 2
    21b4:	42 0e       	add	r4, r18
    21b6:	51 1c       	adc	r5, r1
    21b8:	f8 01       	movw	r30, r16
    21ba:	a0 80       	ld	r10, Z
    21bc:	b1 80       	ldd	r11, Z+1	; 0x01
    21be:	36 fe       	sbrs	r3, 6
    21c0:	03 c0       	rjmp	.+6      	; 0x21c8 <vfprintf+0x198>
    21c2:	69 2d       	mov	r22, r9
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <vfprintf+0x19c>
    21c8:	6f ef       	ldi	r22, 0xFF	; 255
    21ca:	7f ef       	ldi	r23, 0xFF	; 255
    21cc:	c5 01       	movw	r24, r10
    21ce:	2d d1       	rcall	.+602    	; 0x242a <strnlen_P>
    21d0:	4c 01       	movw	r8, r24
    21d2:	f3 2d       	mov	r31, r3
    21d4:	f0 68       	ori	r31, 0x80	; 128
    21d6:	3f 2e       	mov	r3, r31
    21d8:	82 01       	movw	r16, r4
    21da:	33 fc       	sbrc	r3, 3
    21dc:	19 c0       	rjmp	.+50     	; 0x2210 <__stack+0x11>
    21de:	82 2d       	mov	r24, r2
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	88 16       	cp	r8, r24
    21e4:	99 06       	cpc	r9, r25
    21e6:	a0 f4       	brcc	.+40     	; 0x2210 <__stack+0x11>
    21e8:	b6 01       	movw	r22, r12
    21ea:	80 e2       	ldi	r24, 0x20	; 32
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	33 d1       	rcall	.+614    	; 0x2456 <fputc>
    21f0:	2a 94       	dec	r2
    21f2:	f5 cf       	rjmp	.-22     	; 0x21de <vfprintf+0x1ae>
    21f4:	f5 01       	movw	r30, r10
    21f6:	37 fc       	sbrc	r3, 7
    21f8:	85 91       	lpm	r24, Z+
    21fa:	37 fe       	sbrs	r3, 7
    21fc:	81 91       	ld	r24, Z+
    21fe:	5f 01       	movw	r10, r30
    2200:	b6 01       	movw	r22, r12
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	28 d1       	rcall	.+592    	; 0x2456 <fputc>
    2206:	21 10       	cpse	r2, r1
    2208:	2a 94       	dec	r2
    220a:	21 e0       	ldi	r18, 0x01	; 1
    220c:	82 1a       	sub	r8, r18
    220e:	91 08       	sbc	r9, r1
    2210:	81 14       	cp	r8, r1
    2212:	91 04       	cpc	r9, r1
    2214:	79 f7       	brne	.-34     	; 0x21f4 <vfprintf+0x1c4>
    2216:	e1 c0       	rjmp	.+450    	; 0x23da <__stack+0x1db>
    2218:	84 36       	cpi	r24, 0x64	; 100
    221a:	11 f0       	breq	.+4      	; 0x2220 <__stack+0x21>
    221c:	89 36       	cpi	r24, 0x69	; 105
    221e:	39 f5       	brne	.+78     	; 0x226e <__stack+0x6f>
    2220:	f8 01       	movw	r30, r16
    2222:	37 fe       	sbrs	r3, 7
    2224:	07 c0       	rjmp	.+14     	; 0x2234 <__stack+0x35>
    2226:	60 81       	ld	r22, Z
    2228:	71 81       	ldd	r23, Z+1	; 0x01
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	93 81       	ldd	r25, Z+3	; 0x03
    222e:	0c 5f       	subi	r16, 0xFC	; 252
    2230:	1f 4f       	sbci	r17, 0xFF	; 255
    2232:	08 c0       	rjmp	.+16     	; 0x2244 <__stack+0x45>
    2234:	60 81       	ld	r22, Z
    2236:	71 81       	ldd	r23, Z+1	; 0x01
    2238:	07 2e       	mov	r0, r23
    223a:	00 0c       	add	r0, r0
    223c:	88 0b       	sbc	r24, r24
    223e:	99 0b       	sbc	r25, r25
    2240:	0e 5f       	subi	r16, 0xFE	; 254
    2242:	1f 4f       	sbci	r17, 0xFF	; 255
    2244:	f3 2d       	mov	r31, r3
    2246:	ff 76       	andi	r31, 0x6F	; 111
    2248:	3f 2e       	mov	r3, r31
    224a:	97 ff       	sbrs	r25, 7
    224c:	09 c0       	rjmp	.+18     	; 0x2260 <__stack+0x61>
    224e:	90 95       	com	r25
    2250:	80 95       	com	r24
    2252:	70 95       	com	r23
    2254:	61 95       	neg	r22
    2256:	7f 4f       	sbci	r23, 0xFF	; 255
    2258:	8f 4f       	sbci	r24, 0xFF	; 255
    225a:	9f 4f       	sbci	r25, 0xFF	; 255
    225c:	f0 68       	ori	r31, 0x80	; 128
    225e:	3f 2e       	mov	r3, r31
    2260:	2a e0       	ldi	r18, 0x0A	; 10
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	a3 01       	movw	r20, r6
    2266:	33 d1       	rcall	.+614    	; 0x24ce <__ultoa_invert>
    2268:	88 2e       	mov	r8, r24
    226a:	86 18       	sub	r8, r6
    226c:	44 c0       	rjmp	.+136    	; 0x22f6 <__stack+0xf7>
    226e:	85 37       	cpi	r24, 0x75	; 117
    2270:	31 f4       	brne	.+12     	; 0x227e <__stack+0x7f>
    2272:	23 2d       	mov	r18, r3
    2274:	2f 7e       	andi	r18, 0xEF	; 239
    2276:	b2 2e       	mov	r11, r18
    2278:	2a e0       	ldi	r18, 0x0A	; 10
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	25 c0       	rjmp	.+74     	; 0x22c8 <__stack+0xc9>
    227e:	93 2d       	mov	r25, r3
    2280:	99 7f       	andi	r25, 0xF9	; 249
    2282:	b9 2e       	mov	r11, r25
    2284:	8f 36       	cpi	r24, 0x6F	; 111
    2286:	c1 f0       	breq	.+48     	; 0x22b8 <__stack+0xb9>
    2288:	18 f4       	brcc	.+6      	; 0x2290 <__stack+0x91>
    228a:	88 35       	cpi	r24, 0x58	; 88
    228c:	79 f0       	breq	.+30     	; 0x22ac <__stack+0xad>
    228e:	ae c0       	rjmp	.+348    	; 0x23ec <__stack+0x1ed>
    2290:	80 37       	cpi	r24, 0x70	; 112
    2292:	19 f0       	breq	.+6      	; 0x229a <__stack+0x9b>
    2294:	88 37       	cpi	r24, 0x78	; 120
    2296:	21 f0       	breq	.+8      	; 0x22a0 <__stack+0xa1>
    2298:	a9 c0       	rjmp	.+338    	; 0x23ec <__stack+0x1ed>
    229a:	e9 2f       	mov	r30, r25
    229c:	e0 61       	ori	r30, 0x10	; 16
    229e:	be 2e       	mov	r11, r30
    22a0:	b4 fe       	sbrs	r11, 4
    22a2:	0d c0       	rjmp	.+26     	; 0x22be <__stack+0xbf>
    22a4:	fb 2d       	mov	r31, r11
    22a6:	f4 60       	ori	r31, 0x04	; 4
    22a8:	bf 2e       	mov	r11, r31
    22aa:	09 c0       	rjmp	.+18     	; 0x22be <__stack+0xbf>
    22ac:	34 fe       	sbrs	r3, 4
    22ae:	0a c0       	rjmp	.+20     	; 0x22c4 <__stack+0xc5>
    22b0:	29 2f       	mov	r18, r25
    22b2:	26 60       	ori	r18, 0x06	; 6
    22b4:	b2 2e       	mov	r11, r18
    22b6:	06 c0       	rjmp	.+12     	; 0x22c4 <__stack+0xc5>
    22b8:	28 e0       	ldi	r18, 0x08	; 8
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <__stack+0xc9>
    22be:	20 e1       	ldi	r18, 0x10	; 16
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <__stack+0xc9>
    22c4:	20 e1       	ldi	r18, 0x10	; 16
    22c6:	32 e0       	ldi	r19, 0x02	; 2
    22c8:	f8 01       	movw	r30, r16
    22ca:	b7 fe       	sbrs	r11, 7
    22cc:	07 c0       	rjmp	.+14     	; 0x22dc <__stack+0xdd>
    22ce:	60 81       	ld	r22, Z
    22d0:	71 81       	ldd	r23, Z+1	; 0x01
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	93 81       	ldd	r25, Z+3	; 0x03
    22d6:	0c 5f       	subi	r16, 0xFC	; 252
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	06 c0       	rjmp	.+12     	; 0x22e8 <__stack+0xe9>
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 5f       	subi	r16, 0xFE	; 254
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	a3 01       	movw	r20, r6
    22ea:	f1 d0       	rcall	.+482    	; 0x24ce <__ultoa_invert>
    22ec:	88 2e       	mov	r8, r24
    22ee:	86 18       	sub	r8, r6
    22f0:	fb 2d       	mov	r31, r11
    22f2:	ff 77       	andi	r31, 0x7F	; 127
    22f4:	3f 2e       	mov	r3, r31
    22f6:	36 fe       	sbrs	r3, 6
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <__stack+0x115>
    22fa:	23 2d       	mov	r18, r3
    22fc:	2e 7f       	andi	r18, 0xFE	; 254
    22fe:	a2 2e       	mov	r10, r18
    2300:	89 14       	cp	r8, r9
    2302:	58 f4       	brcc	.+22     	; 0x231a <__stack+0x11b>
    2304:	34 fe       	sbrs	r3, 4
    2306:	0b c0       	rjmp	.+22     	; 0x231e <__stack+0x11f>
    2308:	32 fc       	sbrc	r3, 2
    230a:	09 c0       	rjmp	.+18     	; 0x231e <__stack+0x11f>
    230c:	83 2d       	mov	r24, r3
    230e:	8e 7e       	andi	r24, 0xEE	; 238
    2310:	a8 2e       	mov	r10, r24
    2312:	05 c0       	rjmp	.+10     	; 0x231e <__stack+0x11f>
    2314:	b8 2c       	mov	r11, r8
    2316:	a3 2c       	mov	r10, r3
    2318:	03 c0       	rjmp	.+6      	; 0x2320 <__stack+0x121>
    231a:	b8 2c       	mov	r11, r8
    231c:	01 c0       	rjmp	.+2      	; 0x2320 <__stack+0x121>
    231e:	b9 2c       	mov	r11, r9
    2320:	a4 fe       	sbrs	r10, 4
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <__stack+0x143>
    2324:	fe 01       	movw	r30, r28
    2326:	e8 0d       	add	r30, r8
    2328:	f1 1d       	adc	r31, r1
    232a:	80 81       	ld	r24, Z
    232c:	80 33       	cpi	r24, 0x30	; 48
    232e:	21 f4       	brne	.+8      	; 0x2338 <__stack+0x139>
    2330:	9a 2d       	mov	r25, r10
    2332:	99 7e       	andi	r25, 0xE9	; 233
    2334:	a9 2e       	mov	r10, r25
    2336:	09 c0       	rjmp	.+18     	; 0x234a <__stack+0x14b>
    2338:	a2 fe       	sbrs	r10, 2
    233a:	06 c0       	rjmp	.+12     	; 0x2348 <__stack+0x149>
    233c:	b3 94       	inc	r11
    233e:	b3 94       	inc	r11
    2340:	04 c0       	rjmp	.+8      	; 0x234a <__stack+0x14b>
    2342:	8a 2d       	mov	r24, r10
    2344:	86 78       	andi	r24, 0x86	; 134
    2346:	09 f0       	breq	.+2      	; 0x234a <__stack+0x14b>
    2348:	b3 94       	inc	r11
    234a:	a3 fc       	sbrc	r10, 3
    234c:	10 c0       	rjmp	.+32     	; 0x236e <__stack+0x16f>
    234e:	a0 fe       	sbrs	r10, 0
    2350:	06 c0       	rjmp	.+12     	; 0x235e <__stack+0x15f>
    2352:	b2 14       	cp	r11, r2
    2354:	80 f4       	brcc	.+32     	; 0x2376 <__stack+0x177>
    2356:	28 0c       	add	r2, r8
    2358:	92 2c       	mov	r9, r2
    235a:	9b 18       	sub	r9, r11
    235c:	0d c0       	rjmp	.+26     	; 0x2378 <__stack+0x179>
    235e:	b2 14       	cp	r11, r2
    2360:	58 f4       	brcc	.+22     	; 0x2378 <__stack+0x179>
    2362:	b6 01       	movw	r22, r12
    2364:	80 e2       	ldi	r24, 0x20	; 32
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	76 d0       	rcall	.+236    	; 0x2456 <fputc>
    236a:	b3 94       	inc	r11
    236c:	f8 cf       	rjmp	.-16     	; 0x235e <__stack+0x15f>
    236e:	b2 14       	cp	r11, r2
    2370:	18 f4       	brcc	.+6      	; 0x2378 <__stack+0x179>
    2372:	2b 18       	sub	r2, r11
    2374:	02 c0       	rjmp	.+4      	; 0x237a <__stack+0x17b>
    2376:	98 2c       	mov	r9, r8
    2378:	21 2c       	mov	r2, r1
    237a:	a4 fe       	sbrs	r10, 4
    237c:	0f c0       	rjmp	.+30     	; 0x239c <__stack+0x19d>
    237e:	b6 01       	movw	r22, r12
    2380:	80 e3       	ldi	r24, 0x30	; 48
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	68 d0       	rcall	.+208    	; 0x2456 <fputc>
    2386:	a2 fe       	sbrs	r10, 2
    2388:	16 c0       	rjmp	.+44     	; 0x23b6 <__stack+0x1b7>
    238a:	a1 fc       	sbrc	r10, 1
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <__stack+0x195>
    238e:	88 e7       	ldi	r24, 0x78	; 120
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <__stack+0x199>
    2394:	88 e5       	ldi	r24, 0x58	; 88
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	b6 01       	movw	r22, r12
    239a:	0c c0       	rjmp	.+24     	; 0x23b4 <__stack+0x1b5>
    239c:	8a 2d       	mov	r24, r10
    239e:	86 78       	andi	r24, 0x86	; 134
    23a0:	51 f0       	breq	.+20     	; 0x23b6 <__stack+0x1b7>
    23a2:	a1 fe       	sbrs	r10, 1
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <__stack+0x1ab>
    23a6:	8b e2       	ldi	r24, 0x2B	; 43
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <__stack+0x1ad>
    23aa:	80 e2       	ldi	r24, 0x20	; 32
    23ac:	a7 fc       	sbrc	r10, 7
    23ae:	8d e2       	ldi	r24, 0x2D	; 45
    23b0:	b6 01       	movw	r22, r12
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	50 d0       	rcall	.+160    	; 0x2456 <fputc>
    23b6:	89 14       	cp	r8, r9
    23b8:	30 f4       	brcc	.+12     	; 0x23c6 <__stack+0x1c7>
    23ba:	b6 01       	movw	r22, r12
    23bc:	80 e3       	ldi	r24, 0x30	; 48
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	4a d0       	rcall	.+148    	; 0x2456 <fputc>
    23c2:	9a 94       	dec	r9
    23c4:	f8 cf       	rjmp	.-16     	; 0x23b6 <__stack+0x1b7>
    23c6:	8a 94       	dec	r8
    23c8:	f3 01       	movw	r30, r6
    23ca:	e8 0d       	add	r30, r8
    23cc:	f1 1d       	adc	r31, r1
    23ce:	80 81       	ld	r24, Z
    23d0:	b6 01       	movw	r22, r12
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	40 d0       	rcall	.+128    	; 0x2456 <fputc>
    23d6:	81 10       	cpse	r8, r1
    23d8:	f6 cf       	rjmp	.-20     	; 0x23c6 <__stack+0x1c7>
    23da:	22 20       	and	r2, r2
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <__stack+0x1e1>
    23de:	4e ce       	rjmp	.-868    	; 0x207c <vfprintf+0x4c>
    23e0:	b6 01       	movw	r22, r12
    23e2:	80 e2       	ldi	r24, 0x20	; 32
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	37 d0       	rcall	.+110    	; 0x2456 <fputc>
    23e8:	2a 94       	dec	r2
    23ea:	f7 cf       	rjmp	.-18     	; 0x23da <__stack+0x1db>
    23ec:	f6 01       	movw	r30, r12
    23ee:	86 81       	ldd	r24, Z+6	; 0x06
    23f0:	97 81       	ldd	r25, Z+7	; 0x07
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <__stack+0x1f9>
    23f4:	8f ef       	ldi	r24, 0xFF	; 255
    23f6:	9f ef       	ldi	r25, 0xFF	; 255
    23f8:	2b 96       	adiw	r28, 0x0b	; 11
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	cf 90       	pop	r12
    2414:	bf 90       	pop	r11
    2416:	af 90       	pop	r10
    2418:	9f 90       	pop	r9
    241a:	8f 90       	pop	r8
    241c:	7f 90       	pop	r7
    241e:	6f 90       	pop	r6
    2420:	5f 90       	pop	r5
    2422:	4f 90       	pop	r4
    2424:	3f 90       	pop	r3
    2426:	2f 90       	pop	r2
    2428:	08 95       	ret

0000242a <strnlen_P>:
    242a:	fc 01       	movw	r30, r24
    242c:	05 90       	lpm	r0, Z+
    242e:	61 50       	subi	r22, 0x01	; 1
    2430:	70 40       	sbci	r23, 0x00	; 0
    2432:	01 10       	cpse	r0, r1
    2434:	d8 f7       	brcc	.-10     	; 0x242c <strnlen_P+0x2>
    2436:	80 95       	com	r24
    2438:	90 95       	com	r25
    243a:	8e 0f       	add	r24, r30
    243c:	9f 1f       	adc	r25, r31
    243e:	08 95       	ret

00002440 <strnlen>:
    2440:	fc 01       	movw	r30, r24
    2442:	61 50       	subi	r22, 0x01	; 1
    2444:	70 40       	sbci	r23, 0x00	; 0
    2446:	01 90       	ld	r0, Z+
    2448:	01 10       	cpse	r0, r1
    244a:	d8 f7       	brcc	.-10     	; 0x2442 <strnlen+0x2>
    244c:	80 95       	com	r24
    244e:	90 95       	com	r25
    2450:	8e 0f       	add	r24, r30
    2452:	9f 1f       	adc	r25, r31
    2454:	08 95       	ret

00002456 <fputc>:
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	fb 01       	movw	r30, r22
    2460:	23 81       	ldd	r18, Z+3	; 0x03
    2462:	21 fd       	sbrc	r18, 1
    2464:	03 c0       	rjmp	.+6      	; 0x246c <fputc+0x16>
    2466:	8f ef       	ldi	r24, 0xFF	; 255
    2468:	9f ef       	ldi	r25, 0xFF	; 255
    246a:	2c c0       	rjmp	.+88     	; 0x24c4 <fputc+0x6e>
    246c:	22 ff       	sbrs	r18, 2
    246e:	16 c0       	rjmp	.+44     	; 0x249c <fputc+0x46>
    2470:	46 81       	ldd	r20, Z+6	; 0x06
    2472:	57 81       	ldd	r21, Z+7	; 0x07
    2474:	24 81       	ldd	r18, Z+4	; 0x04
    2476:	35 81       	ldd	r19, Z+5	; 0x05
    2478:	42 17       	cp	r20, r18
    247a:	53 07       	cpc	r21, r19
    247c:	44 f4       	brge	.+16     	; 0x248e <fputc+0x38>
    247e:	a0 81       	ld	r26, Z
    2480:	b1 81       	ldd	r27, Z+1	; 0x01
    2482:	9d 01       	movw	r18, r26
    2484:	2f 5f       	subi	r18, 0xFF	; 255
    2486:	3f 4f       	sbci	r19, 0xFF	; 255
    2488:	31 83       	std	Z+1, r19	; 0x01
    248a:	20 83       	st	Z, r18
    248c:	8c 93       	st	X, r24
    248e:	26 81       	ldd	r18, Z+6	; 0x06
    2490:	37 81       	ldd	r19, Z+7	; 0x07
    2492:	2f 5f       	subi	r18, 0xFF	; 255
    2494:	3f 4f       	sbci	r19, 0xFF	; 255
    2496:	37 83       	std	Z+7, r19	; 0x07
    2498:	26 83       	std	Z+6, r18	; 0x06
    249a:	14 c0       	rjmp	.+40     	; 0x24c4 <fputc+0x6e>
    249c:	8b 01       	movw	r16, r22
    249e:	ec 01       	movw	r28, r24
    24a0:	fb 01       	movw	r30, r22
    24a2:	00 84       	ldd	r0, Z+8	; 0x08
    24a4:	f1 85       	ldd	r31, Z+9	; 0x09
    24a6:	e0 2d       	mov	r30, r0
    24a8:	19 95       	eicall
    24aa:	89 2b       	or	r24, r25
    24ac:	e1 f6       	brne	.-72     	; 0x2466 <fputc+0x10>
    24ae:	d8 01       	movw	r26, r16
    24b0:	16 96       	adiw	r26, 0x06	; 6
    24b2:	8d 91       	ld	r24, X+
    24b4:	9c 91       	ld	r25, X
    24b6:	17 97       	sbiw	r26, 0x07	; 7
    24b8:	01 96       	adiw	r24, 0x01	; 1
    24ba:	17 96       	adiw	r26, 0x07	; 7
    24bc:	9c 93       	st	X, r25
    24be:	8e 93       	st	-X, r24
    24c0:	16 97       	sbiw	r26, 0x06	; 6
    24c2:	ce 01       	movw	r24, r28
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	08 95       	ret

000024ce <__ultoa_invert>:
    24ce:	fa 01       	movw	r30, r20
    24d0:	aa 27       	eor	r26, r26
    24d2:	28 30       	cpi	r18, 0x08	; 8
    24d4:	51 f1       	breq	.+84     	; 0x252a <__ultoa_invert+0x5c>
    24d6:	20 31       	cpi	r18, 0x10	; 16
    24d8:	81 f1       	breq	.+96     	; 0x253a <__ultoa_invert+0x6c>
    24da:	e8 94       	clt
    24dc:	6f 93       	push	r22
    24de:	6e 7f       	andi	r22, 0xFE	; 254
    24e0:	6e 5f       	subi	r22, 0xFE	; 254
    24e2:	7f 4f       	sbci	r23, 0xFF	; 255
    24e4:	8f 4f       	sbci	r24, 0xFF	; 255
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	af 4f       	sbci	r26, 0xFF	; 255
    24ea:	b1 e0       	ldi	r27, 0x01	; 1
    24ec:	3e d0       	rcall	.+124    	; 0x256a <__ultoa_invert+0x9c>
    24ee:	b4 e0       	ldi	r27, 0x04	; 4
    24f0:	3c d0       	rcall	.+120    	; 0x256a <__ultoa_invert+0x9c>
    24f2:	67 0f       	add	r22, r23
    24f4:	78 1f       	adc	r23, r24
    24f6:	89 1f       	adc	r24, r25
    24f8:	9a 1f       	adc	r25, r26
    24fa:	a1 1d       	adc	r26, r1
    24fc:	68 0f       	add	r22, r24
    24fe:	79 1f       	adc	r23, r25
    2500:	8a 1f       	adc	r24, r26
    2502:	91 1d       	adc	r25, r1
    2504:	a1 1d       	adc	r26, r1
    2506:	6a 0f       	add	r22, r26
    2508:	71 1d       	adc	r23, r1
    250a:	81 1d       	adc	r24, r1
    250c:	91 1d       	adc	r25, r1
    250e:	a1 1d       	adc	r26, r1
    2510:	20 d0       	rcall	.+64     	; 0x2552 <__ultoa_invert+0x84>
    2512:	09 f4       	brne	.+2      	; 0x2516 <__ultoa_invert+0x48>
    2514:	68 94       	set
    2516:	3f 91       	pop	r19
    2518:	2a e0       	ldi	r18, 0x0A	; 10
    251a:	26 9f       	mul	r18, r22
    251c:	11 24       	eor	r1, r1
    251e:	30 19       	sub	r19, r0
    2520:	30 5d       	subi	r19, 0xD0	; 208
    2522:	31 93       	st	Z+, r19
    2524:	de f6       	brtc	.-74     	; 0x24dc <__ultoa_invert+0xe>
    2526:	cf 01       	movw	r24, r30
    2528:	08 95       	ret
    252a:	46 2f       	mov	r20, r22
    252c:	47 70       	andi	r20, 0x07	; 7
    252e:	40 5d       	subi	r20, 0xD0	; 208
    2530:	41 93       	st	Z+, r20
    2532:	b3 e0       	ldi	r27, 0x03	; 3
    2534:	0f d0       	rcall	.+30     	; 0x2554 <__ultoa_invert+0x86>
    2536:	c9 f7       	brne	.-14     	; 0x252a <__ultoa_invert+0x5c>
    2538:	f6 cf       	rjmp	.-20     	; 0x2526 <__ultoa_invert+0x58>
    253a:	46 2f       	mov	r20, r22
    253c:	4f 70       	andi	r20, 0x0F	; 15
    253e:	40 5d       	subi	r20, 0xD0	; 208
    2540:	4a 33       	cpi	r20, 0x3A	; 58
    2542:	18 f0       	brcs	.+6      	; 0x254a <__ultoa_invert+0x7c>
    2544:	49 5d       	subi	r20, 0xD9	; 217
    2546:	31 fd       	sbrc	r19, 1
    2548:	40 52       	subi	r20, 0x20	; 32
    254a:	41 93       	st	Z+, r20
    254c:	02 d0       	rcall	.+4      	; 0x2552 <__ultoa_invert+0x84>
    254e:	a9 f7       	brne	.-22     	; 0x253a <__ultoa_invert+0x6c>
    2550:	ea cf       	rjmp	.-44     	; 0x2526 <__ultoa_invert+0x58>
    2552:	b4 e0       	ldi	r27, 0x04	; 4
    2554:	a6 95       	lsr	r26
    2556:	97 95       	ror	r25
    2558:	87 95       	ror	r24
    255a:	77 95       	ror	r23
    255c:	67 95       	ror	r22
    255e:	ba 95       	dec	r27
    2560:	c9 f7       	brne	.-14     	; 0x2554 <__ultoa_invert+0x86>
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	61 05       	cpc	r22, r1
    2566:	71 05       	cpc	r23, r1
    2568:	08 95       	ret
    256a:	9b 01       	movw	r18, r22
    256c:	ac 01       	movw	r20, r24
    256e:	0a 2e       	mov	r0, r26
    2570:	06 94       	lsr	r0
    2572:	57 95       	ror	r21
    2574:	47 95       	ror	r20
    2576:	37 95       	ror	r19
    2578:	27 95       	ror	r18
    257a:	ba 95       	dec	r27
    257c:	c9 f7       	brne	.-14     	; 0x2570 <__ultoa_invert+0xa2>
    257e:	62 0f       	add	r22, r18
    2580:	73 1f       	adc	r23, r19
    2582:	84 1f       	adc	r24, r20
    2584:	95 1f       	adc	r25, r21
    2586:	a0 1d       	adc	r26, r0
    2588:	08 95       	ret

0000258a <_exit>:
    258a:	f8 94       	cli

0000258c <__stop_program>:
    258c:	ff cf       	rjmp	.-2      	; 0x258c <__stop_program>
