
Timer_Management.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800200  0000252a  000025be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000252a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  0080026c  0080026c  0000262a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000262a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000629a  00000000  00000000  00002ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018a9  00000000  00000000  00008d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003df8  00000000  00000000  0000a61b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d4c  00000000  00000000  0000e414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012418  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000055f2  00000000  00000000  00021578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  00026b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000010be  00000000  00000000  0002707a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c1       	rjmp	.+868    	; 0x366 <__ctors_end>
       2:	00 00       	nop
       4:	d1 c1       	rjmp	.+930    	; 0x3a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	cf c1       	rjmp	.+926    	; 0x3a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	cd c1       	rjmp	.+922    	; 0x3a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	cb c1       	rjmp	.+918    	; 0x3a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	c9 c1       	rjmp	.+914    	; 0x3a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c7 c1       	rjmp	.+910    	; 0x3a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c5 c1       	rjmp	.+906    	; 0x3a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c3 c1       	rjmp	.+902    	; 0x3a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	c1 c1       	rjmp	.+898    	; 0x3a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	bf c1       	rjmp	.+894    	; 0x3a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bd c1       	rjmp	.+890    	; 0x3a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3c c3       	rjmp	.+1656   	; 0x6aa <__vector_12>
      32:	00 00       	nop
      34:	b9 c1       	rjmp	.+882    	; 0x3a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	b7 c1       	rjmp	.+878    	; 0x3a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b5 c1       	rjmp	.+874    	; 0x3a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b3 c1       	rjmp	.+870    	; 0x3a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	b1 c1       	rjmp	.+866    	; 0x3a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	af c1       	rjmp	.+862    	; 0x3a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ad c1       	rjmp	.+858    	; 0x3a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ab c1       	rjmp	.+854    	; 0x3a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	a9 c1       	rjmp	.+850    	; 0x3a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	a7 c1       	rjmp	.+846    	; 0x3a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a5 c1       	rjmp	.+842    	; 0x3a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a3 c1       	rjmp	.+838    	; 0x3a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	a1 c1       	rjmp	.+834    	; 0x3a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	9f c1       	rjmp	.+830    	; 0x3a8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9d c1       	rjmp	.+826    	; 0x3a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9b c1       	rjmp	.+822    	; 0x3a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	99 c1       	rjmp	.+818    	; 0x3a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	97 c1       	rjmp	.+814    	; 0x3a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	95 c1       	rjmp	.+810    	; 0x3a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	93 c1       	rjmp	.+806    	; 0x3a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	91 c1       	rjmp	.+802    	; 0x3a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	8f c1       	rjmp	.+798    	; 0x3a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8d c1       	rjmp	.+794    	; 0x3a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8b c1       	rjmp	.+790    	; 0x3a8 <__bad_interrupt>
      92:	00 00       	nop
      94:	89 c1       	rjmp	.+786    	; 0x3a8 <__bad_interrupt>
      96:	00 00       	nop
      98:	87 c1       	rjmp	.+782    	; 0x3a8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	85 c1       	rjmp	.+778    	; 0x3a8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	83 c1       	rjmp	.+774    	; 0x3a8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	81 c1       	rjmp	.+770    	; 0x3a8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7f c1       	rjmp	.+766    	; 0x3a8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7d c1       	rjmp	.+762    	; 0x3a8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7b c1       	rjmp	.+758    	; 0x3a8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	79 c1       	rjmp	.+754    	; 0x3a8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	77 c1       	rjmp	.+750    	; 0x3a8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	75 c1       	rjmp	.+746    	; 0x3a8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	73 c1       	rjmp	.+742    	; 0x3a8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	71 c1       	rjmp	.+738    	; 0x3a8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6f c1       	rjmp	.+734    	; 0x3a8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6d c1       	rjmp	.+730    	; 0x3a8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6b c1       	rjmp	.+726    	; 0x3a8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	69 c1       	rjmp	.+722    	; 0x3a8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	67 c1       	rjmp	.+718    	; 0x3a8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	65 c1       	rjmp	.+714    	; 0x3a8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	63 c1       	rjmp	.+710    	; 0x3a8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	43 01       	movw	r8, r6
      e6:	43 01       	movw	r8, r6
      e8:	43 01       	movw	r8, r6
      ea:	72 01       	movw	r14, r4
      ec:	7a 01       	movw	r14, r20
      ee:	89 01       	movw	r16, r18
      f0:	43 01       	movw	r8, r6
      f2:	43 01       	movw	r8, r6
      f4:	72 01       	movw	r14, r4
      f6:	7a 01       	movw	r14, r20

000000f8 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
      f8:	05 e8       	ldi	r16, 0x85	; 133
      fa:	12 e0       	ldi	r17, 0x02	; 2
      fc:	0f 2e       	mov	r0, r31
      fe:	fd ea       	ldi	r31, 0xAD	; 173
     100:	ef 2e       	mov	r14, r31
     102:	f2 e0       	ldi	r31, 0x02	; 2
     104:	ff 2e       	mov	r15, r31
     106:	f0 2d       	mov	r31, r0
     108:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <uxDeletedTasksWaitingCleanUp>
     10c:	88 23       	and	r24, r24
     10e:	11 f1       	breq	.+68     	; 0x154 <prvIdleTask+0x5c>
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	0f 92       	push	r0
     116:	d8 01       	movw	r26, r16
     118:	15 96       	adiw	r26, 0x05	; 5
     11a:	ed 91       	ld	r30, X+
     11c:	fc 91       	ld	r31, X
     11e:	16 97       	sbiw	r26, 0x06	; 6
     120:	c6 81       	ldd	r28, Z+6	; 0x06
     122:	d7 81       	ldd	r29, Z+7	; 0x07
     124:	ce 01       	movw	r24, r28
     126:	02 96       	adiw	r24, 0x02	; 2
     128:	83 d1       	rcall	.+774    	; 0x430 <uxListRemove>
     12a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <uxCurrentNumberOfTasks>
     12e:	81 50       	subi	r24, 0x01	; 1
     130:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <uxCurrentNumberOfTasks>
     134:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <uxDeletedTasksWaitingCleanUp>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <uxDeletedTasksWaitingCleanUp>
     13e:	0f 90       	pop	r0
     140:	0f be       	out	0x3f, r0	; 63
     142:	8f 89       	ldd	r24, Y+23	; 0x17
     144:	98 8d       	ldd	r25, Y+24	; 0x18
     146:	c0 d2       	rcall	.+1408   	; 0x6c8 <vPortFree>
     148:	ce 01       	movw	r24, r28
     14a:	be d2       	rcall	.+1404   	; 0x6c8 <vPortFree>
     14c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <uxDeletedTasksWaitingCleanUp>
     150:	81 11       	cpse	r24, r1
     152:	de cf       	rjmp	.-68     	; 0x110 <prvIdleTask+0x18>
     154:	f7 01       	movw	r30, r14
     156:	80 81       	ld	r24, Z
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	08 f0       	brcs	.+2      	; 0x15e <prvIdleTask+0x66>
     15c:	e3 d1       	rcall	.+966    	; 0x524 <vPortYield>
     15e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <vApplicationIdleHook>
     162:	d2 cf       	rjmp	.-92     	; 0x108 <prvIdleTask+0x10>

00000164 <prvTimerTask>:
     164:	cf 93       	push	r28
            }
        }
        taskEXIT_CRITICAL();

        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
     166:	df 93       	push	r29
     168:	00 d0       	rcall	.+0      	; 0x16a <prvTimerTask+0x6>
     16a:	00 d0       	rcall	.+0      	; 0x16c <prvTimerTask+0x8>
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
     170:	ce 01       	movw	r24, r28
     172:	01 96       	adiw	r24, 0x01	; 1
     174:	4c 01       	movw	r8, r24
     176:	44 24       	eor	r4, r4
     178:	43 94       	inc	r4
     17a:	e1 2c       	mov	r14, r1
     17c:	f1 2c       	mov	r15, r1
     17e:	51 2c       	mov	r5, r1
     180:	c8 2e       	mov	r12, r24
     182:	d9 2c       	mov	r13, r9
     184:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <pxCurrentTimerList>
     188:	f0 91 dc 02 	lds	r31, 0x02DC	; 0x8002dc <pxCurrentTimerList+0x1>
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	09 f4       	brne	.+2      	; 0x194 <prvTimerTask+0x30>
     192:	d6 c0       	rjmp	.+428    	; 0x340 <prvTimerTask+0x1dc>
     194:	05 80       	ldd	r0, Z+5	; 0x05
     196:	f6 81       	ldd	r31, Z+6	; 0x06
     198:	e0 2d       	mov	r30, r0
     19a:	a0 80       	ld	r10, Z
     19c:	b1 80       	ldd	r11, Z+1	; 0x01
     19e:	38 d7       	rcall	.+3696   	; 0x1010 <vTaskSuspendAll>
     1a0:	c4 01       	movw	r24, r8
     1a2:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <prvSampleTimeNow>
     1a6:	8c 01       	movw	r16, r24
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	81 11       	cpse	r24, r1
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <prvTimerTask+0xda>
     1ae:	0a 15       	cp	r16, r10
     1b0:	1b 05       	cpc	r17, r11
     1b2:	b0 f1       	brcs	.+108    	; 0x220 <prvTimerTask+0xbc>
     1b4:	0e 94 36 09 	call	0x126c	; 0x126c <xTaskResumeAll>
     1b8:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <pxCurrentTimerList>
     1bc:	f0 91 dc 02 	lds	r31, 0x02DC	; 0x8002dc <pxCurrentTimerList+0x1>
     1c0:	05 80       	ldd	r0, Z+5	; 0x05
     1c2:	f6 81       	ldd	r31, Z+6	; 0x06
     1c4:	e0 2d       	mov	r30, r0
     1c6:	66 80       	ldd	r6, Z+6	; 0x06
     1c8:	77 80       	ldd	r7, Z+7	; 0x07
     1ca:	c3 01       	movw	r24, r6
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	30 d1       	rcall	.+608    	; 0x430 <uxListRemove>
     1d0:	d3 01       	movw	r26, r6
     1d2:	52 96       	adiw	r26, 0x12	; 18
     1d4:	8c 91       	ld	r24, X
     1d6:	52 97       	sbiw	r26, 0x12	; 18
     1d8:	82 ff       	sbrs	r24, 2
     1da:	17 c0       	rjmp	.+46     	; 0x20a <prvTimerTask+0xa6>
     1dc:	1c 96       	adiw	r26, 0x0c	; 12
     1de:	6d 91       	ld	r22, X+
     1e0:	7c 91       	ld	r23, X
     1e2:	1d 97       	sbiw	r26, 0x0d	; 13
     1e4:	6a 0d       	add	r22, r10
     1e6:	7b 1d       	adc	r23, r11
     1e8:	95 01       	movw	r18, r10
     1ea:	a8 01       	movw	r20, r16
     1ec:	c3 01       	movw	r24, r6
     1ee:	0e 94 46 0c 	call	0x188c	; 0x188c <prvInsertTimerInActiveList>
     1f2:	88 23       	and	r24, r24
     1f4:	69 f0       	breq	.+26     	; 0x210 <prvTimerTask+0xac>
     1f6:	0e 2d       	mov	r16, r14
     1f8:	1f 2d       	mov	r17, r15
     1fa:	2e 2d       	mov	r18, r14
     1fc:	3f 2d       	mov	r19, r15
     1fe:	a5 01       	movw	r20, r10
     200:	65 2d       	mov	r22, r5
     202:	c3 01       	movw	r24, r6
     204:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <xTimerGenericCommand>
     208:	03 c0       	rjmp	.+6      	; 0x210 <prvTimerTask+0xac>
     20a:	8e 7f       	andi	r24, 0xFE	; 254
     20c:	f3 01       	movw	r30, r6
     20e:	82 8b       	std	Z+18, r24	; 0x12
     210:	d3 01       	movw	r26, r6
     212:	50 96       	adiw	r26, 0x10	; 16
     214:	ed 91       	ld	r30, X+
     216:	fc 91       	ld	r31, X
     218:	51 97       	sbiw	r26, 0x11	; 17
     21a:	c3 01       	movw	r24, r6
     21c:	19 95       	eicall
     21e:	84 c0       	rjmp	.+264    	; 0x328 <prvTimerTask+0x1c4>
     220:	45 2d       	mov	r20, r5
     222:	b5 01       	movw	r22, r10
     224:	60 1b       	sub	r22, r16
     226:	71 0b       	sbc	r23, r17
     228:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <xTimerQueue>
     22c:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <xTimerQueue+0x1>
     230:	dd d4       	rcall	.+2490   	; 0xbec <vQueueWaitForMessageRestricted>
     232:	0e 94 36 09 	call	0x126c	; 0x126c <xTaskResumeAll>
     236:	81 11       	cpse	r24, r1
     238:	77 c0       	rjmp	.+238    	; 0x328 <prvTimerTask+0x1c4>
     23a:	74 d1       	rcall	.+744    	; 0x524 <vPortYield>
     23c:	75 c0       	rjmp	.+234    	; 0x328 <prvTimerTask+0x1c4>
     23e:	0e 94 36 09 	call	0x126c	; 0x126c <xTaskResumeAll>
     242:	72 c0       	rjmp	.+228    	; 0x328 <prvTimerTask+0x1c4>
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	88 23       	and	r24, r24
     248:	0c f4       	brge	.+2      	; 0x24c <prvTimerTask+0xe8>
     24a:	6e c0       	rjmp	.+220    	; 0x328 <prvTimerTask+0x1c4>
     24c:	ac 80       	ldd	r10, Y+4	; 0x04
     24e:	bd 80       	ldd	r11, Y+5	; 0x05
     250:	f5 01       	movw	r30, r10
     252:	82 85       	ldd	r24, Z+10	; 0x0a
     254:	93 85       	ldd	r25, Z+11	; 0x0b
     256:	89 2b       	or	r24, r25
     258:	19 f0       	breq	.+6      	; 0x260 <prvTimerTask+0xfc>
     25a:	c5 01       	movw	r24, r10
     25c:	02 96       	adiw	r24, 0x02	; 2
     25e:	e8 d0       	rcall	.+464    	; 0x430 <uxListRemove>
     260:	ce 01       	movw	r24, r28
     262:	06 96       	adiw	r24, 0x06	; 6
     264:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <prvSampleTimeNow>
     268:	ac 01       	movw	r20, r24
     26a:	e9 81       	ldd	r30, Y+1	; 0x01
     26c:	0e 2e       	mov	r0, r30
     26e:	00 0c       	add	r0, r0
     270:	ff 0b       	sbc	r31, r31
     272:	ea 30       	cpi	r30, 0x0A	; 10
     274:	f1 05       	cpc	r31, r1
     276:	08 f0       	brcs	.+2      	; 0x27a <prvTimerTask+0x116>
     278:	57 c0       	rjmp	.+174    	; 0x328 <prvTimerTask+0x1c4>
     27a:	88 27       	eor	r24, r24
     27c:	ee 58       	subi	r30, 0x8E	; 142
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	8f 4f       	sbci	r24, 0xFF	; 255
     282:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__tablejump2__>
     286:	d5 01       	movw	r26, r10
     288:	52 96       	adiw	r26, 0x12	; 18
     28a:	8c 91       	ld	r24, X
     28c:	52 97       	sbiw	r26, 0x12	; 18
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	52 96       	adiw	r26, 0x12	; 18
     292:	8c 93       	st	X, r24
     294:	52 97       	sbiw	r26, 0x12	; 18
     296:	2a 81       	ldd	r18, Y+2	; 0x02
     298:	3b 81       	ldd	r19, Y+3	; 0x03
     29a:	1c 96       	adiw	r26, 0x0c	; 12
     29c:	6d 91       	ld	r22, X+
     29e:	7c 91       	ld	r23, X
     2a0:	1d 97       	sbiw	r26, 0x0d	; 13
     2a2:	62 0f       	add	r22, r18
     2a4:	73 1f       	adc	r23, r19
     2a6:	c5 01       	movw	r24, r10
     2a8:	0e 94 46 0c 	call	0x188c	; 0x188c <prvInsertTimerInActiveList>
     2ac:	88 23       	and	r24, r24
     2ae:	e1 f1       	breq	.+120    	; 0x328 <prvTimerTask+0x1c4>
     2b0:	d5 01       	movw	r26, r10
     2b2:	50 96       	adiw	r26, 0x10	; 16
     2b4:	ed 91       	ld	r30, X+
     2b6:	fc 91       	ld	r31, X
     2b8:	51 97       	sbiw	r26, 0x11	; 17
     2ba:	c5 01       	movw	r24, r10
     2bc:	19 95       	eicall
     2be:	f5 01       	movw	r30, r10
     2c0:	82 89       	ldd	r24, Z+18	; 0x12
     2c2:	82 ff       	sbrs	r24, 2
     2c4:	31 c0       	rjmp	.+98     	; 0x328 <prvTimerTask+0x1c4>
     2c6:	4a 81       	ldd	r20, Y+2	; 0x02
     2c8:	5b 81       	ldd	r21, Y+3	; 0x03
     2ca:	84 85       	ldd	r24, Z+12	; 0x0c
     2cc:	95 85       	ldd	r25, Z+13	; 0x0d
     2ce:	48 0f       	add	r20, r24
     2d0:	59 1f       	adc	r21, r25
     2d2:	0e 2d       	mov	r16, r14
     2d4:	1f 2d       	mov	r17, r15
     2d6:	2e 2d       	mov	r18, r14
     2d8:	3f 2d       	mov	r19, r15
     2da:	65 2d       	mov	r22, r5
     2dc:	c5 01       	movw	r24, r10
     2de:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <xTimerGenericCommand>
     2e2:	22 c0       	rjmp	.+68     	; 0x328 <prvTimerTask+0x1c4>
     2e4:	d5 01       	movw	r26, r10
     2e6:	52 96       	adiw	r26, 0x12	; 18
     2e8:	8c 91       	ld	r24, X
     2ea:	52 97       	sbiw	r26, 0x12	; 18
     2ec:	8e 7f       	andi	r24, 0xFE	; 254
     2ee:	52 96       	adiw	r26, 0x12	; 18
     2f0:	8c 93       	st	X, r24
     2f2:	1a c0       	rjmp	.+52     	; 0x328 <prvTimerTask+0x1c4>
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 89       	ldd	r24, Z+18	; 0x12
     2f8:	81 60       	ori	r24, 0x01	; 1
     2fa:	82 8b       	std	Z+18, r24	; 0x12
     2fc:	6a 81       	ldd	r22, Y+2	; 0x02
     2fe:	7b 81       	ldd	r23, Y+3	; 0x03
     300:	75 87       	std	Z+13, r23	; 0x0d
     302:	64 87       	std	Z+12, r22	; 0x0c
     304:	64 0f       	add	r22, r20
     306:	75 1f       	adc	r23, r21
     308:	9a 01       	movw	r18, r20
     30a:	c5 01       	movw	r24, r10
     30c:	0e 94 46 0c 	call	0x188c	; 0x188c <prvInsertTimerInActiveList>
     310:	0b c0       	rjmp	.+22     	; 0x328 <prvTimerTask+0x1c4>
     312:	d5 01       	movw	r26, r10
     314:	52 96       	adiw	r26, 0x12	; 18
     316:	8c 91       	ld	r24, X
     318:	81 fd       	sbrc	r24, 1
     31a:	03 c0       	rjmp	.+6      	; 0x322 <prvTimerTask+0x1be>
     31c:	c5 01       	movw	r24, r10
     31e:	d4 d1       	rcall	.+936    	; 0x6c8 <vPortFree>
     320:	03 c0       	rjmp	.+6      	; 0x328 <prvTimerTask+0x1c4>
     322:	8e 7f       	andi	r24, 0xFE	; 254
     324:	f5 01       	movw	r30, r10
     326:	82 8b       	std	Z+18, r24	; 0x12
     328:	4e 2d       	mov	r20, r14
     32a:	5f 2d       	mov	r21, r15
     32c:	6c 2d       	mov	r22, r12
     32e:	7d 2d       	mov	r23, r13
     330:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <xTimerQueue>
     334:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <xTimerQueue+0x1>
     338:	d0 d3       	rcall	.+1952   	; 0xada <xQueueReceive>
     33a:	81 11       	cpse	r24, r1
     33c:	83 cf       	rjmp	.-250    	; 0x244 <prvTimerTask+0xe0>
     33e:	22 cf       	rjmp	.-444    	; 0x184 <prvTimerTask+0x20>
     340:	67 d6       	rcall	.+3278   	; 0x1010 <vTaskSuspendAll>
     342:	c4 01       	movw	r24, r8
     344:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <prvSampleTimeNow>
     348:	8c 01       	movw	r16, r24
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	81 11       	cpse	r24, r1
     34e:	77 cf       	rjmp	.-274    	; 0x23e <prvTimerTask+0xda>
     350:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <pxOverflowTimerList>
     354:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <pxOverflowTimerList+0x1>
     358:	80 81       	ld	r24, Z
     35a:	44 2d       	mov	r20, r4
     35c:	81 11       	cpse	r24, r1
     35e:	45 2d       	mov	r20, r5
     360:	ae 2c       	mov	r10, r14
     362:	bf 2c       	mov	r11, r15
     364:	5e cf       	rjmp	.-324    	; 0x222 <prvTimerTask+0xbe>

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	d1 e2       	ldi	r29, 0x21	; 33
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	0c bf       	out	0x3c, r16	; 60

00000376 <__do_copy_data>:
     376:	12 e0       	ldi	r17, 0x02	; 2
     378:	a0 e0       	ldi	r26, 0x00	; 0
     37a:	b2 e0       	ldi	r27, 0x02	; 2
     37c:	ea e2       	ldi	r30, 0x2A	; 42
     37e:	f5 e2       	ldi	r31, 0x25	; 37
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	0b bf       	out	0x3b, r16	; 59
     384:	02 c0       	rjmp	.+4      	; 0x38a <__do_copy_data+0x14>
     386:	07 90       	elpm	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	ac 36       	cpi	r26, 0x6C	; 108
     38c:	b1 07       	cpc	r27, r17
     38e:	d9 f7       	brne	.-10     	; 0x386 <__do_copy_data+0x10>

00000390 <__do_clear_bss>:
     390:	22 e0       	ldi	r18, 0x02	; 2
     392:	ac e6       	ldi	r26, 0x6C	; 108
     394:	b2 e0       	ldi	r27, 0x02	; 2
     396:	01 c0       	rjmp	.+2      	; 0x39a <.do_clear_bss_start>

00000398 <.do_clear_bss_loop>:
     398:	1d 92       	st	X+, r1

0000039a <.do_clear_bss_start>:
     39a:	a3 3f       	cpi	r26, 0xF3	; 243
     39c:	b2 07       	cpc	r27, r18
     39e:	e1 f7       	brne	.-8      	; 0x398 <.do_clear_bss_loop>
     3a0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <main>
     3a4:	0c 94 93 12 	jmp	0x2526	; 0x2526 <_exit>

000003a8 <__bad_interrupt>:
     3a8:	2b ce       	rjmp	.-938    	; 0x0 <__vectors>

000003aa <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     3aa:	fc 01       	movw	r30, r24
     3ac:	03 96       	adiw	r24, 0x03	; 3
     3ae:	92 83       	std	Z+2, r25	; 0x02
     3b0:	81 83       	std	Z+1, r24	; 0x01
     3b2:	2f ef       	ldi	r18, 0xFF	; 255
     3b4:	3f ef       	ldi	r19, 0xFF	; 255
     3b6:	34 83       	std	Z+4, r19	; 0x04
     3b8:	23 83       	std	Z+3, r18	; 0x03
     3ba:	96 83       	std	Z+6, r25	; 0x06
     3bc:	85 83       	std	Z+5, r24	; 0x05
     3be:	90 87       	std	Z+8, r25	; 0x08
     3c0:	87 83       	std	Z+7, r24	; 0x07
     3c2:	10 82       	st	Z, r1
     3c4:	08 95       	ret

000003c6 <vListInitialiseItem>:
     3c6:	fc 01       	movw	r30, r24
     3c8:	11 86       	std	Z+9, r1	; 0x09
     3ca:	10 86       	std	Z+8, r1	; 0x08
     3cc:	08 95       	ret

000003ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     3d4:	48 81       	ld	r20, Y
     3d6:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     3d8:	4f 3f       	cpi	r20, 0xFF	; 255
     3da:	2f ef       	ldi	r18, 0xFF	; 255
     3dc:	52 07       	cpc	r21, r18
     3de:	21 f4       	brne	.+8      	; 0x3e8 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     3e0:	fc 01       	movw	r30, r24
     3e2:	a7 81       	ldd	r26, Z+7	; 0x07
     3e4:	b0 85       	ldd	r27, Z+8	; 0x08
     3e6:	0d c0       	rjmp	.+26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     3e8:	dc 01       	movw	r26, r24
     3ea:	13 96       	adiw	r26, 0x03	; 3
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <vListInsert+0x22>
     3ee:	df 01       	movw	r26, r30
     3f0:	12 96       	adiw	r26, 0x02	; 2
     3f2:	ed 91       	ld	r30, X+
     3f4:	fc 91       	ld	r31, X
     3f6:	13 97       	sbiw	r26, 0x03	; 3
     3f8:	20 81       	ld	r18, Z
     3fa:	31 81       	ldd	r19, Z+1	; 0x01
     3fc:	42 17       	cp	r20, r18
     3fe:	53 07       	cpc	r21, r19
     400:	b0 f7       	brcc	.-20     	; 0x3ee <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     402:	12 96       	adiw	r26, 0x02	; 2
     404:	ed 91       	ld	r30, X+
     406:	fc 91       	ld	r31, X
     408:	13 97       	sbiw	r26, 0x03	; 3
     40a:	fb 83       	std	Y+3, r31	; 0x03
     40c:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     40e:	d5 83       	std	Z+5, r29	; 0x05
     410:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     412:	bd 83       	std	Y+5, r27	; 0x05
     414:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     416:	13 96       	adiw	r26, 0x03	; 3
     418:	dc 93       	st	X, r29
     41a:	ce 93       	st	-X, r28
     41c:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     41e:	99 87       	std	Y+9, r25	; 0x09
     420:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     422:	fc 01       	movw	r30, r24
     424:	20 81       	ld	r18, Z
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	20 83       	st	Z, r18
}
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     436:	a0 85       	ldd	r26, Z+8	; 0x08
     438:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     43a:	c2 81       	ldd	r28, Z+2	; 0x02
     43c:	d3 81       	ldd	r29, Z+3	; 0x03
     43e:	84 81       	ldd	r24, Z+4	; 0x04
     440:	95 81       	ldd	r25, Z+5	; 0x05
     442:	9d 83       	std	Y+5, r25	; 0x05
     444:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     446:	c4 81       	ldd	r28, Z+4	; 0x04
     448:	d5 81       	ldd	r29, Z+5	; 0x05
     44a:	82 81       	ldd	r24, Z+2	; 0x02
     44c:	93 81       	ldd	r25, Z+3	; 0x03
     44e:	9b 83       	std	Y+3, r25	; 0x03
     450:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     452:	11 96       	adiw	r26, 0x01	; 1
     454:	8d 91       	ld	r24, X+
     456:	9c 91       	ld	r25, X
     458:	12 97       	sbiw	r26, 0x02	; 2
     45a:	e8 17       	cp	r30, r24
     45c:	f9 07       	cpc	r31, r25
     45e:	31 f4       	brne	.+12     	; 0x46c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     460:	84 81       	ldd	r24, Z+4	; 0x04
     462:	95 81       	ldd	r25, Z+5	; 0x05
     464:	12 96       	adiw	r26, 0x02	; 2
     466:	9c 93       	st	X, r25
     468:	8e 93       	st	-X, r24
     46a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     46c:	11 86       	std	Z+9, r1	; 0x09
     46e:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     470:	8c 91       	ld	r24, X
     472:	81 50       	subi	r24, 0x01	; 1
     474:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     476:	8c 91       	ld	r24, X
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     47e:	fc 01       	movw	r30, r24
     480:	60 83       	st	Z, r22
     482:	31 97       	sbiw	r30, 0x01	; 1
     484:	70 83       	st	Z, r23
     486:	31 97       	sbiw	r30, 0x01	; 1
     488:	10 82       	st	Z, r1
     48a:	31 97       	sbiw	r30, 0x01	; 1
     48c:	10 82       	st	Z, r1
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	20 e8       	ldi	r18, 0x80	; 128
     492:	20 83       	st	Z, r18
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	10 82       	st	Z, r1
     498:	31 97       	sbiw	r30, 0x01	; 1
     49a:	10 82       	st	Z, r1
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	10 82       	st	Z, r1
     4a0:	77 97       	sbiw	r30, 0x17	; 23
     4a2:	40 83       	st	Z, r20
     4a4:	31 97       	sbiw	r30, 0x01	; 1
     4a6:	50 83       	st	Z, r21
     4a8:	86 97       	sbiw	r24, 0x26	; 38
     4aa:	08 95       	ret

000004ac <xPortStartScheduler>:
     4ac:	a8 95       	wdr
     4ae:	90 ec       	ldi	r25, 0xC0	; 192
     4b0:	88 e1       	ldi	r24, 0x18	; 24
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	a8 95       	wdr
     4b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     4c2:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     4c6:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     4ca:	cd 91       	ld	r28, X+
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	dd 91       	ld	r29, X+
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	bf 91       	pop	r27
     4dc:	af 91       	pop	r26
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	7f 91       	pop	r23
     4e4:	6f 91       	pop	r22
     4e6:	5f 91       	pop	r21
     4e8:	4f 91       	pop	r20
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	bf 90       	pop	r11
     4fc:	af 90       	pop	r10
     4fe:	9f 90       	pop	r9
     500:	8f 90       	pop	r8
     502:	7f 90       	pop	r7
     504:	6f 90       	pop	r6
     506:	5f 90       	pop	r5
     508:	4f 90       	pop	r4
     50a:	3f 90       	pop	r3
     50c:	2f 90       	pop	r2
     50e:	1f 90       	pop	r1
     510:	0f 90       	pop	r0
     512:	0c be       	out	0x3c, r0	; 60
     514:	0f 90       	pop	r0
     516:	0b be       	out	0x3b, r0	; 59
     518:	0f 90       	pop	r0
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	0f 90       	pop	r0
     51e:	08 95       	ret
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	08 95       	ret

00000524 <vPortYield>:
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	0f 92       	push	r0
     52c:	0b b6       	in	r0, 0x3b	; 59
     52e:	0f 92       	push	r0
     530:	0c b6       	in	r0, 0x3c	; 60
     532:	0f 92       	push	r0
     534:	1f 92       	push	r1
     536:	11 24       	eor	r1, r1
     538:	2f 92       	push	r2
     53a:	3f 92       	push	r3
     53c:	4f 92       	push	r4
     53e:	5f 92       	push	r5
     540:	6f 92       	push	r6
     542:	7f 92       	push	r7
     544:	8f 92       	push	r8
     546:	9f 92       	push	r9
     548:	af 92       	push	r10
     54a:	bf 92       	push	r11
     54c:	cf 92       	push	r12
     54e:	df 92       	push	r13
     550:	ef 92       	push	r14
     552:	ff 92       	push	r15
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	4f 93       	push	r20
     55e:	5f 93       	push	r21
     560:	6f 93       	push	r22
     562:	7f 93       	push	r23
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
     574:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     578:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     57c:	0d b6       	in	r0, 0x3d	; 61
     57e:	0d 92       	st	X+, r0
     580:	0e b6       	in	r0, 0x3e	; 62
     582:	0d 92       	st	X+, r0
     584:	4e d7       	rcall	.+3740   	; 0x1422 <vTaskSwitchContext>
     586:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     58a:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     58e:	cd 91       	ld	r28, X+
     590:	cd bf       	out	0x3d, r28	; 61
     592:	dd 91       	ld	r29, X+
     594:	de bf       	out	0x3e, r29	; 62
     596:	ff 91       	pop	r31
     598:	ef 91       	pop	r30
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	bf 91       	pop	r27
     5a0:	af 91       	pop	r26
     5a2:	9f 91       	pop	r25
     5a4:	8f 91       	pop	r24
     5a6:	7f 91       	pop	r23
     5a8:	6f 91       	pop	r22
     5aa:	5f 91       	pop	r21
     5ac:	4f 91       	pop	r20
     5ae:	3f 91       	pop	r19
     5b0:	2f 91       	pop	r18
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	bf 90       	pop	r11
     5c0:	af 90       	pop	r10
     5c2:	9f 90       	pop	r9
     5c4:	8f 90       	pop	r8
     5c6:	7f 90       	pop	r7
     5c8:	6f 90       	pop	r6
     5ca:	5f 90       	pop	r5
     5cc:	4f 90       	pop	r4
     5ce:	3f 90       	pop	r3
     5d0:	2f 90       	pop	r2
     5d2:	1f 90       	pop	r1
     5d4:	0f 90       	pop	r0
     5d6:	0c be       	out	0x3c, r0	; 60
     5d8:	0f 90       	pop	r0
     5da:	0b be       	out	0x3b, r0	; 59
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	0f 90       	pop	r0
     5e2:	08 95       	ret

000005e4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	0f 92       	push	r0
     5ec:	0b b6       	in	r0, 0x3b	; 59
     5ee:	0f 92       	push	r0
     5f0:	0c b6       	in	r0, 0x3c	; 60
     5f2:	0f 92       	push	r0
     5f4:	1f 92       	push	r1
     5f6:	11 24       	eor	r1, r1
     5f8:	2f 92       	push	r2
     5fa:	3f 92       	push	r3
     5fc:	4f 92       	push	r4
     5fe:	5f 92       	push	r5
     600:	6f 92       	push	r6
     602:	7f 92       	push	r7
     604:	8f 92       	push	r8
     606:	9f 92       	push	r9
     608:	af 92       	push	r10
     60a:	bf 92       	push	r11
     60c:	cf 92       	push	r12
     60e:	df 92       	push	r13
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
     634:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     638:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     63c:	0d b6       	in	r0, 0x3d	; 61
     63e:	0d 92       	st	X+, r0
     640:	0e b6       	in	r0, 0x3e	; 62
     642:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     644:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     646:	f4 d4       	rcall	.+2536   	; 0x1030 <xTaskIncrementTick>
     648:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     64a:	eb d6       	rcall	.+3542   	; 0x1422 <vTaskSwitchContext>
     64c:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     650:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     654:	cd 91       	ld	r28, X+
     656:	cd bf       	out	0x3d, r28	; 61
     658:	dd 91       	ld	r29, X+
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	ff 91       	pop	r31
     65e:	ef 91       	pop	r30
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	bf 91       	pop	r27
     666:	af 91       	pop	r26
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	7f 91       	pop	r23
     66e:	6f 91       	pop	r22
     670:	5f 91       	pop	r21
     672:	4f 91       	pop	r20
     674:	3f 91       	pop	r19
     676:	2f 91       	pop	r18
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	bf 90       	pop	r11
     686:	af 90       	pop	r10
     688:	9f 90       	pop	r9
     68a:	8f 90       	pop	r8
     68c:	7f 90       	pop	r7
     68e:	6f 90       	pop	r6
     690:	5f 90       	pop	r5
     692:	4f 90       	pop	r4
     694:	3f 90       	pop	r3
     696:	2f 90       	pop	r2
     698:	1f 90       	pop	r1
     69a:	0f 90       	pop	r0
     69c:	0c be       	out	0x3c, r0	; 60
     69e:	0f 90       	pop	r0
     6a0:	0b be       	out	0x3b, r0	; 59
     6a2:	0f 90       	pop	r0
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	0f 90       	pop	r0
     6a8:	08 95       	ret

000006aa <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     6aa:	9c df       	rcall	.-200    	; 0x5e4 <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     6ac:	18 95       	reti

000006ae <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
    void * pvReturn;

    vTaskSuspendAll();
     6b4:	ad d4       	rcall	.+2394   	; 0x1010 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     6b6:	ce 01       	movw	r24, r28
     6b8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6bc:	ec 01       	movw	r28, r24
     6be:	d6 d5       	rcall	.+2988   	; 0x126c <xTaskResumeAll>
            }
        }
    #endif
*/
    return pvReturn;
}
     6c0:	ce 01       	movw	r24, r28
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
    if( pv )
     6cc:	00 97       	sbiw	r24, 0x00	; 0
     6ce:	31 f0       	breq	.+12     	; 0x6dc <vPortFree+0x14>
     6d0:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     6d2:	9e d4       	rcall	.+2364   	; 0x1010 <vTaskSuspendAll>
        {
            free( pv );
     6d4:	ce 01       	movw	r24, r28
     6d6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     6da:	c8 d5       	rcall	.+2960   	; 0x126c <xTaskResumeAll>
    }
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	0f 92       	push	r0
     6e8:	fc 01       	movw	r30, r24
     6ea:	92 8d       	ldd	r25, Z+26	; 0x1a
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	91 11       	cpse	r25, r1
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	08 95       	ret

000006f8 <prvCopyDataToQueue>:
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	ec 01       	movw	r28, r24
     702:	04 2f       	mov	r16, r20
     704:	1a 8d       	ldd	r17, Y+26	; 0x1a
     706:	4c 8d       	ldd	r20, Y+28	; 0x1c
     708:	41 11       	cpse	r20, r1
     70a:	0c c0       	rjmp	.+24     	; 0x724 <prvCopyDataToQueue+0x2c>
     70c:	88 81       	ld	r24, Y
     70e:	99 81       	ldd	r25, Y+1	; 0x01
     710:	89 2b       	or	r24, r25
     712:	09 f0       	breq	.+2      	; 0x716 <prvCopyDataToQueue+0x1e>
     714:	42 c0       	rjmp	.+132    	; 0x79a <prvCopyDataToQueue+0xa2>
     716:	8c 81       	ldd	r24, Y+4	; 0x04
     718:	9d 81       	ldd	r25, Y+5	; 0x05
     71a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <xTaskPriorityDisinherit>
     71e:	1d 82       	std	Y+5, r1	; 0x05
     720:	1c 82       	std	Y+4, r1	; 0x04
     722:	42 c0       	rjmp	.+132    	; 0x7a8 <prvCopyDataToQueue+0xb0>
     724:	01 11       	cpse	r16, r1
     726:	17 c0       	rjmp	.+46     	; 0x756 <prvCopyDataToQueue+0x5e>
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	9b 81       	ldd	r25, Y+3	; 0x03
     72e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <memcpy>
     732:	2c 8d       	ldd	r18, Y+28	; 0x1c
     734:	8a 81       	ldd	r24, Y+2	; 0x02
     736:	9b 81       	ldd	r25, Y+3	; 0x03
     738:	82 0f       	add	r24, r18
     73a:	91 1d       	adc	r25, r1
     73c:	9b 83       	std	Y+3, r25	; 0x03
     73e:	8a 83       	std	Y+2, r24	; 0x02
     740:	2c 81       	ldd	r18, Y+4	; 0x04
     742:	3d 81       	ldd	r19, Y+5	; 0x05
     744:	82 17       	cp	r24, r18
     746:	93 07       	cpc	r25, r19
     748:	50 f1       	brcs	.+84     	; 0x79e <prvCopyDataToQueue+0xa6>
     74a:	88 81       	ld	r24, Y
     74c:	99 81       	ldd	r25, Y+1	; 0x01
     74e:	9b 83       	std	Y+3, r25	; 0x03
     750:	8a 83       	std	Y+2, r24	; 0x02
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	29 c0       	rjmp	.+82     	; 0x7a8 <prvCopyDataToQueue+0xb0>
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	8e 81       	ldd	r24, Y+6	; 0x06
     75a:	9f 81       	ldd	r25, Y+7	; 0x07
     75c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <memcpy>
     760:	8c 8d       	ldd	r24, Y+28	; 0x1c
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	91 95       	neg	r25
     766:	81 95       	neg	r24
     768:	91 09       	sbc	r25, r1
     76a:	2e 81       	ldd	r18, Y+6	; 0x06
     76c:	3f 81       	ldd	r19, Y+7	; 0x07
     76e:	28 0f       	add	r18, r24
     770:	39 1f       	adc	r19, r25
     772:	3f 83       	std	Y+7, r19	; 0x07
     774:	2e 83       	std	Y+6, r18	; 0x06
     776:	48 81       	ld	r20, Y
     778:	59 81       	ldd	r21, Y+1	; 0x01
     77a:	24 17       	cp	r18, r20
     77c:	35 07       	cpc	r19, r21
     77e:	30 f4       	brcc	.+12     	; 0x78c <prvCopyDataToQueue+0x94>
     780:	2c 81       	ldd	r18, Y+4	; 0x04
     782:	3d 81       	ldd	r19, Y+5	; 0x05
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	9f 83       	std	Y+7, r25	; 0x07
     78a:	8e 83       	std	Y+6, r24	; 0x06
     78c:	02 30       	cpi	r16, 0x02	; 2
     78e:	49 f4       	brne	.+18     	; 0x7a2 <prvCopyDataToQueue+0xaa>
     790:	11 23       	and	r17, r17
     792:	49 f0       	breq	.+18     	; 0x7a6 <prvCopyDataToQueue+0xae>
     794:	11 50       	subi	r17, 0x01	; 1
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	07 c0       	rjmp	.+14     	; 0x7a8 <prvCopyDataToQueue+0xb0>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	05 c0       	rjmp	.+10     	; 0x7a8 <prvCopyDataToQueue+0xb0>
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <prvCopyDataToQueue+0xb0>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <prvCopyDataToQueue+0xb0>
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	1f 5f       	subi	r17, 0xFF	; 255
     7aa:	1a 8f       	std	Y+26, r17	; 0x1a
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	08 95       	ret

000007b6 <prvCopyDataFromQueue>:
     7b6:	fc 01       	movw	r30, r24
     7b8:	44 8d       	ldd	r20, Z+28	; 0x1c
     7ba:	44 23       	and	r20, r20
     7bc:	a9 f0       	breq	.+42     	; 0x7e8 <prvCopyDataFromQueue+0x32>
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	26 81       	ldd	r18, Z+6	; 0x06
     7c2:	37 81       	ldd	r19, Z+7	; 0x07
     7c4:	24 0f       	add	r18, r20
     7c6:	35 1f       	adc	r19, r21
     7c8:	37 83       	std	Z+7, r19	; 0x07
     7ca:	26 83       	std	Z+6, r18	; 0x06
     7cc:	84 81       	ldd	r24, Z+4	; 0x04
     7ce:	95 81       	ldd	r25, Z+5	; 0x05
     7d0:	28 17       	cp	r18, r24
     7d2:	39 07       	cpc	r19, r25
     7d4:	20 f0       	brcs	.+8      	; 0x7de <prvCopyDataFromQueue+0x28>
     7d6:	80 81       	ld	r24, Z
     7d8:	91 81       	ldd	r25, Z+1	; 0x01
     7da:	97 83       	std	Z+7, r25	; 0x07
     7dc:	86 83       	std	Z+6, r24	; 0x06
     7de:	cb 01       	movw	r24, r22
     7e0:	66 81       	ldd	r22, Z+6	; 0x06
     7e2:	77 81       	ldd	r23, Z+7	; 0x07
     7e4:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <memcpy>
     7e8:	08 95       	ret

000007ea <prvUnlockQueue>:
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	8c 01       	movw	r16, r24
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	0f 92       	push	r0
     7fc:	fc 01       	movw	r30, r24
     7fe:	c6 8d       	ldd	r28, Z+30	; 0x1e
     800:	1c 16       	cp	r1, r28
     802:	9c f4       	brge	.+38     	; 0x82a <prvUnlockQueue+0x40>
     804:	81 89       	ldd	r24, Z+17	; 0x11
     806:	81 11       	cpse	r24, r1
     808:	06 c0       	rjmp	.+12     	; 0x816 <prvUnlockQueue+0x2c>
     80a:	0f c0       	rjmp	.+30     	; 0x82a <prvUnlockQueue+0x40>
     80c:	f8 01       	movw	r30, r16
     80e:	81 89       	ldd	r24, Z+17	; 0x11
     810:	81 11       	cpse	r24, r1
     812:	05 c0       	rjmp	.+10     	; 0x81e <prvUnlockQueue+0x34>
     814:	0a c0       	rjmp	.+20     	; 0x82a <prvUnlockQueue+0x40>
     816:	78 01       	movw	r14, r16
     818:	f1 e1       	ldi	r31, 0x11	; 17
     81a:	ef 0e       	add	r14, r31
     81c:	f1 1c       	adc	r15, r1
     81e:	c7 01       	movw	r24, r14
     820:	bf d6       	rcall	.+3454   	; 0x15a0 <xTaskRemoveFromEventList>
     822:	81 11       	cpse	r24, r1
     824:	be d7       	rcall	.+3964   	; 0x17a2 <vTaskMissedYield>
     826:	c1 50       	subi	r28, 0x01	; 1
     828:	89 f7       	brne	.-30     	; 0x80c <prvUnlockQueue+0x22>
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	f8 01       	movw	r30, r16
     82e:	86 8f       	std	Z+30, r24	; 0x1e
     830:	0f 90       	pop	r0
     832:	0f be       	out	0x3f, r0	; 63
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	0f 92       	push	r0
     83a:	c5 8d       	ldd	r28, Z+29	; 0x1d
     83c:	1c 16       	cp	r1, r28
     83e:	9c f4       	brge	.+38     	; 0x866 <prvUnlockQueue+0x7c>
     840:	80 85       	ldd	r24, Z+8	; 0x08
     842:	81 11       	cpse	r24, r1
     844:	06 c0       	rjmp	.+12     	; 0x852 <prvUnlockQueue+0x68>
     846:	0f c0       	rjmp	.+30     	; 0x866 <prvUnlockQueue+0x7c>
     848:	f8 01       	movw	r30, r16
     84a:	80 85       	ldd	r24, Z+8	; 0x08
     84c:	81 11       	cpse	r24, r1
     84e:	05 c0       	rjmp	.+10     	; 0x85a <prvUnlockQueue+0x70>
     850:	0a c0       	rjmp	.+20     	; 0x866 <prvUnlockQueue+0x7c>
     852:	78 01       	movw	r14, r16
     854:	f8 e0       	ldi	r31, 0x08	; 8
     856:	ef 0e       	add	r14, r31
     858:	f1 1c       	adc	r15, r1
     85a:	c7 01       	movw	r24, r14
     85c:	a1 d6       	rcall	.+3394   	; 0x15a0 <xTaskRemoveFromEventList>
     85e:	81 11       	cpse	r24, r1
     860:	a0 d7       	rcall	.+3904   	; 0x17a2 <vTaskMissedYield>
     862:	c1 50       	subi	r28, 0x01	; 1
     864:	89 f7       	brne	.-30     	; 0x848 <prvUnlockQueue+0x5e>
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	f8 01       	movw	r30, r16
     86a:	85 8f       	std	Z+29, r24	; 0x1d
     86c:	0f 90       	pop	r0
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	08 95       	ret

0000087c <xQueueGenericReset>:
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	0f 92       	push	r0
     888:	e8 81       	ld	r30, Y
     88a:	f9 81       	ldd	r31, Y+1	; 0x01
     88c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     88e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	82 9f       	mul	r24, r18
     896:	a0 01       	movw	r20, r0
     898:	83 9f       	mul	r24, r19
     89a:	50 0d       	add	r21, r0
     89c:	92 9f       	mul	r25, r18
     89e:	50 0d       	add	r21, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	4e 0f       	add	r20, r30
     8a4:	5f 1f       	adc	r21, r31
     8a6:	5d 83       	std	Y+5, r21	; 0x05
     8a8:	4c 83       	std	Y+4, r20	; 0x04
     8aa:	1a 8e       	std	Y+26, r1	; 0x1a
     8ac:	fb 83       	std	Y+3, r31	; 0x03
     8ae:	ea 83       	std	Y+2, r30	; 0x02
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	82 9f       	mul	r24, r18
     8b4:	a0 01       	movw	r20, r0
     8b6:	83 9f       	mul	r24, r19
     8b8:	50 0d       	add	r21, r0
     8ba:	92 9f       	mul	r25, r18
     8bc:	50 0d       	add	r21, r0
     8be:	11 24       	eor	r1, r1
     8c0:	cf 01       	movw	r24, r30
     8c2:	84 0f       	add	r24, r20
     8c4:	95 1f       	adc	r25, r21
     8c6:	9f 83       	std	Y+7, r25	; 0x07
     8c8:	8e 83       	std	Y+6, r24	; 0x06
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	8d 8f       	std	Y+29, r24	; 0x1d
     8ce:	8e 8f       	std	Y+30, r24	; 0x1e
     8d0:	61 11       	cpse	r22, r1
     8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <xQueueGenericReset+0x6c>
     8d4:	88 85       	ldd	r24, Y+8	; 0x08
     8d6:	88 23       	and	r24, r24
     8d8:	69 f0       	breq	.+26     	; 0x8f4 <xQueueGenericReset+0x78>
     8da:	ce 01       	movw	r24, r28
     8dc:	08 96       	adiw	r24, 0x08	; 8
     8de:	60 d6       	rcall	.+3264   	; 0x15a0 <xTaskRemoveFromEventList>
     8e0:	88 23       	and	r24, r24
     8e2:	41 f0       	breq	.+16     	; 0x8f4 <xQueueGenericReset+0x78>
     8e4:	1f de       	rcall	.-962    	; 0x524 <vPortYield>
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <xQueueGenericReset+0x78>
     8e8:	ce 01       	movw	r24, r28
     8ea:	08 96       	adiw	r24, 0x08	; 8
     8ec:	5e dd       	rcall	.-1348   	; 0x3aa <vListInitialise>
     8ee:	ce 01       	movw	r24, r28
     8f0:	41 96       	adiw	r24, 0x11	; 17
     8f2:	5b dd       	rcall	.-1354   	; 0x3aa <vListInitialise>
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <xQueueGenericCreate>:
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	08 2f       	mov	r16, r24
     90a:	16 2f       	mov	r17, r22
     90c:	86 9f       	mul	r24, r22
     90e:	c0 01       	movw	r24, r0
     910:	11 24       	eor	r1, r1
     912:	4f 96       	adiw	r24, 0x1f	; 31
     914:	cc de       	rcall	.-616    	; 0x6ae <pvPortMalloc>
     916:	ec 01       	movw	r28, r24
     918:	00 97       	sbiw	r24, 0x00	; 0
     91a:	69 f0       	breq	.+26     	; 0x936 <xQueueGenericCreate+0x36>
     91c:	11 11       	cpse	r17, r1
     91e:	03 c0       	rjmp	.+6      	; 0x926 <xQueueGenericCreate+0x26>
     920:	99 83       	std	Y+1, r25	; 0x01
     922:	88 83       	st	Y, r24
     924:	03 c0       	rjmp	.+6      	; 0x92c <xQueueGenericCreate+0x2c>
     926:	4f 96       	adiw	r24, 0x1f	; 31
     928:	99 83       	std	Y+1, r25	; 0x01
     92a:	88 83       	st	Y, r24
     92c:	0b 8f       	std	Y+27, r16	; 0x1b
     92e:	1c 8f       	std	Y+28, r17	; 0x1c
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	ce 01       	movw	r24, r28
     934:	a3 df       	rcall	.-186    	; 0x87c <xQueueGenericReset>
     936:	ce 01       	movw	r24, r28
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret

00000942 <xQueueGenericSend>:
     942:	9f 92       	push	r9
     944:	af 92       	push	r10
     946:	bf 92       	push	r11
     948:	cf 92       	push	r12
     94a:	df 92       	push	r13
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	00 d0       	rcall	.+0      	; 0x95a <xQueueGenericSend+0x18>
     95a:	1f 92       	push	r1
     95c:	1f 92       	push	r1
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	8c 01       	movw	r16, r24
     964:	6b 01       	movw	r12, r22
     966:	5d 83       	std	Y+5, r21	; 0x05
     968:	4c 83       	std	Y+4, r20	; 0x04
     96a:	a2 2e       	mov	r10, r18
     96c:	b1 2c       	mov	r11, r1
     96e:	99 24       	eor	r9, r9
     970:	93 94       	inc	r9
     972:	7c 01       	movw	r14, r24
     974:	88 e0       	ldi	r24, 0x08	; 8
     976:	e8 0e       	add	r14, r24
     978:	f1 1c       	adc	r15, r1
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	0f 92       	push	r0
     980:	f8 01       	movw	r30, r16
     982:	92 8d       	ldd	r25, Z+26	; 0x1a
     984:	83 8d       	ldd	r24, Z+27	; 0x1b
     986:	98 17       	cp	r25, r24
     988:	18 f0       	brcs	.+6      	; 0x990 <xQueueGenericSend+0x4e>
     98a:	f2 e0       	ldi	r31, 0x02	; 2
     98c:	af 12       	cpse	r10, r31
     98e:	15 c0       	rjmp	.+42     	; 0x9ba <xQueueGenericSend+0x78>
     990:	4a 2d       	mov	r20, r10
     992:	b6 01       	movw	r22, r12
     994:	c8 01       	movw	r24, r16
     996:	b0 de       	rcall	.-672    	; 0x6f8 <prvCopyDataToQueue>
     998:	f8 01       	movw	r30, r16
     99a:	91 89       	ldd	r25, Z+17	; 0x11
     99c:	99 23       	and	r25, r25
     99e:	39 f0       	breq	.+14     	; 0x9ae <xQueueGenericSend+0x6c>
     9a0:	c8 01       	movw	r24, r16
     9a2:	41 96       	adiw	r24, 0x11	; 17
     9a4:	fd d5       	rcall	.+3066   	; 0x15a0 <xTaskRemoveFromEventList>
     9a6:	88 23       	and	r24, r24
     9a8:	21 f0       	breq	.+8      	; 0x9b2 <xQueueGenericSend+0x70>
     9aa:	bc dd       	rcall	.-1160   	; 0x524 <vPortYield>
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <xQueueGenericSend+0x70>
     9ae:	81 11       	cpse	r24, r1
     9b0:	b9 dd       	rcall	.-1166   	; 0x524 <vPortYield>
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	45 c0       	rjmp	.+138    	; 0xa44 <xQueueGenericSend+0x102>
     9ba:	8c 81       	ldd	r24, Y+4	; 0x04
     9bc:	9d 81       	ldd	r25, Y+5	; 0x05
     9be:	89 2b       	or	r24, r25
     9c0:	21 f4       	brne	.+8      	; 0x9ca <xQueueGenericSend+0x88>
     9c2:	0f 90       	pop	r0
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	3d c0       	rjmp	.+122    	; 0xa44 <xQueueGenericSend+0x102>
     9ca:	b1 10       	cpse	r11, r1
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <xQueueGenericSend+0x94>
     9ce:	ce 01       	movw	r24, r28
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	a4 d6       	rcall	.+3400   	; 0x171c <vTaskInternalSetTimeOutState>
     9d4:	b9 2c       	mov	r11, r9
     9d6:	0f 90       	pop	r0
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	1a d3       	rcall	.+1588   	; 0x1010 <vTaskSuspendAll>
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	0f 92       	push	r0
     9e2:	f8 01       	movw	r30, r16
     9e4:	85 8d       	ldd	r24, Z+29	; 0x1d
     9e6:	8f 3f       	cpi	r24, 0xFF	; 255
     9e8:	09 f4       	brne	.+2      	; 0x9ec <xQueueGenericSend+0xaa>
     9ea:	15 8e       	std	Z+29, r1	; 0x1d
     9ec:	f8 01       	movw	r30, r16
     9ee:	86 8d       	ldd	r24, Z+30	; 0x1e
     9f0:	8f 3f       	cpi	r24, 0xFF	; 255
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <xQueueGenericSend+0xb4>
     9f4:	16 8e       	std	Z+30, r1	; 0x1e
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	be 01       	movw	r22, r28
     9fc:	6c 5f       	subi	r22, 0xFC	; 252
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	ce 01       	movw	r24, r28
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	96 d6       	rcall	.+3372   	; 0x1732 <xTaskCheckForTimeOut>
     a06:	81 11       	cpse	r24, r1
     a08:	19 c0       	rjmp	.+50     	; 0xa3c <xQueueGenericSend+0xfa>
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	0f 92       	push	r0
     a10:	f8 01       	movw	r30, r16
     a12:	92 8d       	ldd	r25, Z+26	; 0x1a
     a14:	83 8d       	ldd	r24, Z+27	; 0x1b
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	98 13       	cpse	r25, r24
     a1c:	0b c0       	rjmp	.+22     	; 0xa34 <xQueueGenericSend+0xf2>
     a1e:	6c 81       	ldd	r22, Y+4	; 0x04
     a20:	7d 81       	ldd	r23, Y+5	; 0x05
     a22:	c7 01       	movw	r24, r14
     a24:	64 d5       	rcall	.+2760   	; 0x14ee <vTaskPlaceOnEventList>
     a26:	c8 01       	movw	r24, r16
     a28:	e0 de       	rcall	.-576    	; 0x7ea <prvUnlockQueue>
     a2a:	20 d4       	rcall	.+2112   	; 0x126c <xTaskResumeAll>
     a2c:	81 11       	cpse	r24, r1
     a2e:	a5 cf       	rjmp	.-182    	; 0x97a <xQueueGenericSend+0x38>
     a30:	79 dd       	rcall	.-1294   	; 0x524 <vPortYield>
     a32:	a3 cf       	rjmp	.-186    	; 0x97a <xQueueGenericSend+0x38>
     a34:	c8 01       	movw	r24, r16
     a36:	d9 de       	rcall	.-590    	; 0x7ea <prvUnlockQueue>
     a38:	19 d4       	rcall	.+2098   	; 0x126c <xTaskResumeAll>
     a3a:	9f cf       	rjmp	.-194    	; 0x97a <xQueueGenericSend+0x38>
     a3c:	c8 01       	movw	r24, r16
     a3e:	d5 de       	rcall	.-598    	; 0x7ea <prvUnlockQueue>
     a40:	15 d4       	rcall	.+2090   	; 0x126c <xTaskResumeAll>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	bf 90       	pop	r11
     a60:	af 90       	pop	r10
     a62:	9f 90       	pop	r9
     a64:	08 95       	ret

00000a66 <xQueueGenericSendFromISR>:
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	8a 01       	movw	r16, r20
     a74:	fc 01       	movw	r30, r24
     a76:	52 8d       	ldd	r21, Z+26	; 0x1a
     a78:	33 8d       	ldd	r19, Z+27	; 0x1b
     a7a:	53 17       	cp	r21, r19
     a7c:	10 f0       	brcs	.+4      	; 0xa82 <xQueueGenericSendFromISR+0x1c>
     a7e:	22 30       	cpi	r18, 0x02	; 2
     a80:	f1 f4       	brne	.+60     	; 0xabe <xQueueGenericSendFromISR+0x58>
     a82:	42 2f       	mov	r20, r18
     a84:	78 01       	movw	r14, r16
     a86:	ec 01       	movw	r28, r24
     a88:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a8c:	ce 01       	movw	r24, r28
     a8e:	34 de       	rcall	.-920    	; 0x6f8 <prvCopyDataToQueue>
     a90:	1f 3f       	cpi	r17, 0xFF	; 255
     a92:	79 f4       	brne	.+30     	; 0xab2 <xQueueGenericSendFromISR+0x4c>
     a94:	89 89       	ldd	r24, Y+17	; 0x11
     a96:	88 23       	and	r24, r24
     a98:	a1 f0       	breq	.+40     	; 0xac2 <xQueueGenericSendFromISR+0x5c>
     a9a:	ce 01       	movw	r24, r28
     a9c:	41 96       	adiw	r24, 0x11	; 17
     a9e:	80 d5       	rcall	.+2816   	; 0x15a0 <xTaskRemoveFromEventList>
     aa0:	88 23       	and	r24, r24
     aa2:	89 f0       	breq	.+34     	; 0xac6 <xQueueGenericSendFromISR+0x60>
     aa4:	e1 14       	cp	r14, r1
     aa6:	f1 04       	cpc	r15, r1
     aa8:	81 f0       	breq	.+32     	; 0xaca <xQueueGenericSendFromISR+0x64>
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	f7 01       	movw	r30, r14
     aae:	80 83       	st	Z, r24
     ab0:	0d c0       	rjmp	.+26     	; 0xacc <xQueueGenericSendFromISR+0x66>
     ab2:	ff 24       	eor	r15, r15
     ab4:	f3 94       	inc	r15
     ab6:	f1 0e       	add	r15, r17
     ab8:	fe 8e       	std	Y+30, r15	; 0x1e
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	07 c0       	rjmp	.+14     	; 0xacc <xQueueGenericSendFromISR+0x66>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <xQueueGenericSendFromISR+0x66>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	03 c0       	rjmp	.+6      	; 0xacc <xQueueGenericSendFromISR+0x66>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <xQueueGenericSendFromISR+0x66>
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	08 95       	ret

00000ada <xQueueReceive>:
     ada:	9f 92       	push	r9
     adc:	af 92       	push	r10
     ade:	bf 92       	push	r11
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <xQueueReceive+0x18>
     af2:	1f 92       	push	r1
     af4:	1f 92       	push	r1
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	8c 01       	movw	r16, r24
     afc:	5b 01       	movw	r10, r22
     afe:	5d 83       	std	Y+5, r21	; 0x05
     b00:	4c 83       	std	Y+4, r20	; 0x04
     b02:	e1 2c       	mov	r14, r1
     b04:	99 24       	eor	r9, r9
     b06:	93 94       	inc	r9
     b08:	6c 01       	movw	r12, r24
     b0a:	81 e1       	ldi	r24, 0x11	; 17
     b0c:	c8 0e       	add	r12, r24
     b0e:	d1 1c       	adc	r13, r1
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	0f 92       	push	r0
     b16:	f8 01       	movw	r30, r16
     b18:	f2 8c       	ldd	r15, Z+26	; 0x1a
     b1a:	ff 20       	and	r15, r15
     b1c:	91 f0       	breq	.+36     	; 0xb42 <xQueueReceive+0x68>
     b1e:	b5 01       	movw	r22, r10
     b20:	c8 01       	movw	r24, r16
     b22:	49 de       	rcall	.-878    	; 0x7b6 <prvCopyDataFromQueue>
     b24:	fa 94       	dec	r15
     b26:	f8 01       	movw	r30, r16
     b28:	f2 8e       	std	Z+26, r15	; 0x1a
     b2a:	80 85       	ldd	r24, Z+8	; 0x08
     b2c:	88 23       	and	r24, r24
     b2e:	29 f0       	breq	.+10     	; 0xb3a <xQueueReceive+0x60>
     b30:	c8 01       	movw	r24, r16
     b32:	08 96       	adiw	r24, 0x08	; 8
     b34:	35 d5       	rcall	.+2666   	; 0x15a0 <xTaskRemoveFromEventList>
     b36:	81 11       	cpse	r24, r1
     b38:	f5 dc       	rcall	.-1558   	; 0x524 <vPortYield>
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	44 c0       	rjmp	.+136    	; 0xbca <xQueueReceive+0xf0>
     b42:	8c 81       	ldd	r24, Y+4	; 0x04
     b44:	9d 81       	ldd	r25, Y+5	; 0x05
     b46:	89 2b       	or	r24, r25
     b48:	21 f4       	brne	.+8      	; 0xb52 <xQueueReceive+0x78>
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	3c c0       	rjmp	.+120    	; 0xbca <xQueueReceive+0xf0>
     b52:	e1 10       	cpse	r14, r1
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <xQueueReceive+0x84>
     b56:	ce 01       	movw	r24, r28
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	e0 d5       	rcall	.+3008   	; 0x171c <vTaskInternalSetTimeOutState>
     b5c:	e9 2c       	mov	r14, r9
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	56 d2       	rcall	.+1196   	; 0x1010 <vTaskSuspendAll>
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	0f 92       	push	r0
     b6a:	f8 01       	movw	r30, r16
     b6c:	85 8d       	ldd	r24, Z+29	; 0x1d
     b6e:	8f 3f       	cpi	r24, 0xFF	; 255
     b70:	09 f4       	brne	.+2      	; 0xb74 <xQueueReceive+0x9a>
     b72:	15 8e       	std	Z+29, r1	; 0x1d
     b74:	f8 01       	movw	r30, r16
     b76:	86 8d       	ldd	r24, Z+30	; 0x1e
     b78:	8f 3f       	cpi	r24, 0xFF	; 255
     b7a:	09 f4       	brne	.+2      	; 0xb7e <xQueueReceive+0xa4>
     b7c:	16 8e       	std	Z+30, r1	; 0x1e
     b7e:	0f 90       	pop	r0
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	be 01       	movw	r22, r28
     b84:	6c 5f       	subi	r22, 0xFC	; 252
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	ce 01       	movw	r24, r28
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	d2 d5       	rcall	.+2980   	; 0x1732 <xTaskCheckForTimeOut>
     b8e:	81 11       	cpse	r24, r1
     b90:	13 c0       	rjmp	.+38     	; 0xbb8 <xQueueReceive+0xde>
     b92:	c8 01       	movw	r24, r16
     b94:	a6 dd       	rcall	.-1204   	; 0x6e2 <prvIsQueueEmpty>
     b96:	88 23       	and	r24, r24
     b98:	59 f0       	breq	.+22     	; 0xbb0 <xQueueReceive+0xd6>
     b9a:	6c 81       	ldd	r22, Y+4	; 0x04
     b9c:	7d 81       	ldd	r23, Y+5	; 0x05
     b9e:	c6 01       	movw	r24, r12
     ba0:	a6 d4       	rcall	.+2380   	; 0x14ee <vTaskPlaceOnEventList>
     ba2:	c8 01       	movw	r24, r16
     ba4:	22 de       	rcall	.-956    	; 0x7ea <prvUnlockQueue>
     ba6:	62 d3       	rcall	.+1732   	; 0x126c <xTaskResumeAll>
     ba8:	81 11       	cpse	r24, r1
     baa:	b2 cf       	rjmp	.-156    	; 0xb10 <xQueueReceive+0x36>
     bac:	bb dc       	rcall	.-1674   	; 0x524 <vPortYield>
     bae:	b0 cf       	rjmp	.-160    	; 0xb10 <xQueueReceive+0x36>
     bb0:	c8 01       	movw	r24, r16
     bb2:	1b de       	rcall	.-970    	; 0x7ea <prvUnlockQueue>
     bb4:	5b d3       	rcall	.+1718   	; 0x126c <xTaskResumeAll>
     bb6:	ac cf       	rjmp	.-168    	; 0xb10 <xQueueReceive+0x36>
     bb8:	c8 01       	movw	r24, r16
     bba:	17 de       	rcall	.-978    	; 0x7ea <prvUnlockQueue>
     bbc:	57 d3       	rcall	.+1710   	; 0x126c <xTaskResumeAll>
     bbe:	c8 01       	movw	r24, r16
     bc0:	90 dd       	rcall	.-1248   	; 0x6e2 <prvIsQueueEmpty>
     bc2:	88 23       	and	r24, r24
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <xQueueReceive+0xee>
     bc6:	a4 cf       	rjmp	.-184    	; 0xb10 <xQueueReceive+0x36>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	9f 90       	pop	r9
     bea:	08 95       	ret

00000bec <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	0f 92       	push	r0
     bf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bfa:	8f 3f       	cpi	r24, 0xFF	; 255
     bfc:	09 f4       	brne	.+2      	; 0xc00 <vQueueWaitForMessageRestricted+0x14>
     bfe:	1d 8e       	std	Y+29, r1	; 0x1d
     c00:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c02:	8f 3f       	cpi	r24, 0xFF	; 255
     c04:	09 f4       	brne	.+2      	; 0xc08 <vQueueWaitForMessageRestricted+0x1c>
     c06:	1e 8e       	std	Y+30, r1	; 0x1e
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     c0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c0e:	81 11       	cpse	r24, r1
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     c12:	ce 01       	movw	r24, r28
     c14:	41 96       	adiw	r24, 0x11	; 17
     c16:	7c d4       	rcall	.+2296   	; 0x1510 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     c18:	ce 01       	movw	r24, r28
     c1a:	e7 dd       	rcall	.-1074   	; 0x7ea <prvUnlockQueue>
    }
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <prvResetNextTaskUnblockTime>:
     c22:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <pxDelayedTaskList>
     c26:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <pxDelayedTaskList+0x1>
     c2a:	80 81       	ld	r24, Z
     c2c:	81 11       	cpse	r24, r1
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <prvResetNextTaskUnblockTime+0x1c>
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	9f ef       	ldi	r25, 0xFF	; 255
     c34:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <xNextTaskUnblockTime+0x1>
     c38:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <xNextTaskUnblockTime>
     c3c:	08 95       	ret
     c3e:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <pxDelayedTaskList>
     c42:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <pxDelayedTaskList+0x1>
     c46:	05 80       	ldd	r0, Z+5	; 0x05
     c48:	f6 81       	ldd	r31, Z+6	; 0x06
     c4a:	e0 2d       	mov	r30, r0
     c4c:	80 81       	ld	r24, Z
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
     c50:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <xNextTaskUnblockTime+0x1>
     c54:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <xNextTaskUnblockTime>
     c58:	08 95       	ret

00000c5a <prvAddCurrentTaskToDelayedList>:
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	ec 01       	movw	r28, r24
     c66:	f6 2e       	mov	r15, r22
     c68:	00 91 78 02 	lds	r16, 0x0278	; 0x800278 <xTickCount>
     c6c:	10 91 79 02 	lds	r17, 0x0279	; 0x800279 <xTickCount+0x1>
     c70:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     c74:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     c78:	02 96       	adiw	r24, 0x02	; 2
     c7a:	da db       	rcall	.-2124   	; 0x430 <uxListRemove>
     c7c:	cf 3f       	cpi	r28, 0xFF	; 255
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	d8 07       	cpc	r29, r24
     c82:	b1 f5       	brne	.+108    	; 0xcf0 <prvAddCurrentTaskToDelayedList+0x96>
     c84:	ff 20       	and	r15, r15
     c86:	a1 f1       	breq	.+104    	; 0xcf0 <prvAddCurrentTaskToDelayedList+0x96>
     c88:	eb e7       	ldi	r30, 0x7B	; 123
     c8a:	f2 e0       	ldi	r31, 0x02	; 2
     c8c:	a1 81       	ldd	r26, Z+1	; 0x01
     c8e:	b2 81       	ldd	r27, Z+2	; 0x02
     c90:	c0 91 d1 02 	lds	r28, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     c94:	d0 91 d2 02 	lds	r29, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     c98:	bd 83       	std	Y+5, r27	; 0x05
     c9a:	ac 83       	std	Y+4, r26	; 0x04
     c9c:	c0 91 d1 02 	lds	r28, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     ca0:	d0 91 d2 02 	lds	r29, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     ca4:	14 96       	adiw	r26, 0x04	; 4
     ca6:	8d 91       	ld	r24, X+
     ca8:	9c 91       	ld	r25, X
     caa:	15 97       	sbiw	r26, 0x05	; 5
     cac:	9f 83       	std	Y+7, r25	; 0x07
     cae:	8e 83       	std	Y+6, r24	; 0x06
     cb0:	14 96       	adiw	r26, 0x04	; 4
     cb2:	cd 91       	ld	r28, X+
     cb4:	dc 91       	ld	r29, X
     cb6:	15 97       	sbiw	r26, 0x05	; 5
     cb8:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     cbc:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     cc0:	02 96       	adiw	r24, 0x02	; 2
     cc2:	9b 83       	std	Y+3, r25	; 0x03
     cc4:	8a 83       	std	Y+2, r24	; 0x02
     cc6:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     cca:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     cce:	02 96       	adiw	r24, 0x02	; 2
     cd0:	15 96       	adiw	r26, 0x05	; 5
     cd2:	9c 93       	st	X, r25
     cd4:	8e 93       	st	-X, r24
     cd6:	14 97       	sbiw	r26, 0x04	; 4
     cd8:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     cdc:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     ce0:	1b 96       	adiw	r26, 0x0b	; 11
     ce2:	fc 93       	st	X, r31
     ce4:	ee 93       	st	-X, r30
     ce6:	1a 97       	sbiw	r26, 0x0a	; 10
     ce8:	80 81       	ld	r24, Z
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	80 83       	st	Z, r24
     cee:	2d c0       	rjmp	.+90     	; 0xd4a <prvAddCurrentTaskToDelayedList+0xf0>
     cf0:	c0 0f       	add	r28, r16
     cf2:	d1 1f       	adc	r29, r17
     cf4:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     cf8:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     cfc:	d3 83       	std	Z+3, r29	; 0x03
     cfe:	c2 83       	std	Z+2, r28	; 0x02
     d00:	c0 17       	cp	r28, r16
     d02:	d1 07       	cpc	r29, r17
     d04:	60 f4       	brcc	.+24     	; 0xd1e <prvAddCurrentTaskToDelayedList+0xc4>
     d06:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     d0a:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     d0e:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <pxOverflowDelayedTaskList>
     d12:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <pxOverflowDelayedTaskList+0x1>
     d16:	6e 5f       	subi	r22, 0xFE	; 254
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	59 db       	rcall	.-2382   	; 0x3ce <vListInsert>
     d1c:	16 c0       	rjmp	.+44     	; 0xd4a <prvAddCurrentTaskToDelayedList+0xf0>
     d1e:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     d22:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     d26:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <pxDelayedTaskList>
     d2a:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <pxDelayedTaskList+0x1>
     d2e:	6e 5f       	subi	r22, 0xFE	; 254
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	4d db       	rcall	.-2406   	; 0x3ce <vListInsert>
     d34:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <xNextTaskUnblockTime>
     d38:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <xNextTaskUnblockTime+0x1>
     d3c:	c8 17       	cp	r28, r24
     d3e:	d9 07       	cpc	r29, r25
     d40:	20 f4       	brcc	.+8      	; 0xd4a <prvAddCurrentTaskToDelayedList+0xf0>
     d42:	d0 93 70 02 	sts	0x0270, r29	; 0x800270 <xNextTaskUnblockTime+0x1>
     d46:	c0 93 6f 02 	sts	0x026F, r28	; 0x80026f <xNextTaskUnblockTime>
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	08 95       	ret

00000d56 <xTaskCreate>:
     d56:	4f 92       	push	r4
     d58:	5f 92       	push	r5
     d5a:	6f 92       	push	r6
     d5c:	7f 92       	push	r7
     d5e:	8f 92       	push	r8
     d60:	9f 92       	push	r9
     d62:	af 92       	push	r10
     d64:	bf 92       	push	r11
     d66:	cf 92       	push	r12
     d68:	df 92       	push	r13
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	4c 01       	movw	r8, r24
     d76:	6b 01       	movw	r12, r22
     d78:	5a 01       	movw	r10, r20
     d7a:	29 01       	movw	r4, r18
     d7c:	ca 01       	movw	r24, r20
     d7e:	97 dc       	rcall	.-1746   	; 0x6ae <pvPortMalloc>
     d80:	3c 01       	movw	r6, r24
     d82:	89 2b       	or	r24, r25
     d84:	09 f4       	brne	.+2      	; 0xd88 <xTaskCreate+0x32>
     d86:	06 c1       	rjmp	.+524    	; 0xf94 <xTaskCreate+0x23e>
     d88:	88 e2       	ldi	r24, 0x28	; 40
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	90 dc       	rcall	.-1760   	; 0x6ae <pvPortMalloc>
     d8e:	ec 01       	movw	r28, r24
     d90:	89 2b       	or	r24, r25
     d92:	99 f0       	breq	.+38     	; 0xdba <xTaskCreate+0x64>
     d94:	78 8e       	std	Y+24, r7	; 0x18
     d96:	6f 8a       	std	Y+23, r6	; 0x17
     d98:	a5 01       	movw	r20, r10
     d9a:	65 ea       	ldi	r22, 0xA5	; 165
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	c3 01       	movw	r24, r6
     da0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <memset>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	a8 1a       	sub	r10, r24
     da8:	b1 08       	sbc	r11, r1
     daa:	8f 89       	ldd	r24, Y+23	; 0x17
     dac:	98 8d       	ldd	r25, Y+24	; 0x18
     dae:	a8 0e       	add	r10, r24
     db0:	b9 1e       	adc	r11, r25
     db2:	c1 14       	cp	r12, r1
     db4:	d1 04       	cpc	r13, r1
     db6:	21 f4       	brne	.+8      	; 0xdc0 <xTaskCreate+0x6a>
     db8:	1f c0       	rjmp	.+62     	; 0xdf8 <xTaskCreate+0xa2>
     dba:	c3 01       	movw	r24, r6
     dbc:	85 dc       	rcall	.-1782   	; 0x6c8 <vPortFree>
     dbe:	ea c0       	rjmp	.+468    	; 0xf94 <xTaskCreate+0x23e>
     dc0:	d6 01       	movw	r26, r12
     dc2:	8c 91       	ld	r24, X
     dc4:	89 8f       	std	Y+25, r24	; 0x19
     dc6:	8c 91       	ld	r24, X
     dc8:	88 23       	and	r24, r24
     dca:	a1 f0       	breq	.+40     	; 0xdf4 <xTaskCreate+0x9e>
     dcc:	ae 01       	movw	r20, r28
     dce:	46 5e       	subi	r20, 0xE6	; 230
     dd0:	5f 4f       	sbci	r21, 0xFF	; 255
     dd2:	f6 01       	movw	r30, r12
     dd4:	31 96       	adiw	r30, 0x01	; 1
     dd6:	b8 e0       	ldi	r27, 0x08	; 8
     dd8:	cb 0e       	add	r12, r27
     dda:	d1 1c       	adc	r13, r1
     ddc:	cf 01       	movw	r24, r30
     dde:	21 91       	ld	r18, Z+
     de0:	da 01       	movw	r26, r20
     de2:	2d 93       	st	X+, r18
     de4:	ad 01       	movw	r20, r26
     de6:	dc 01       	movw	r26, r24
     de8:	8c 91       	ld	r24, X
     dea:	88 23       	and	r24, r24
     dec:	19 f0       	breq	.+6      	; 0xdf4 <xTaskCreate+0x9e>
     dee:	ec 15       	cp	r30, r12
     df0:	fd 05       	cpc	r31, r13
     df2:	a1 f7       	brne	.-24     	; 0xddc <xTaskCreate+0x86>
     df4:	18 a2       	std	Y+32, r1	; 0x20
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <xTaskCreate+0xa4>
     df8:	19 8e       	std	Y+25, r1	; 0x19
     dfa:	04 30       	cpi	r16, 0x04	; 4
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <xTaskCreate+0xaa>
     dfe:	03 e0       	ldi	r16, 0x03	; 3
     e00:	0e 8b       	std	Y+22, r16	; 0x16
     e02:	09 a3       	std	Y+33, r16	; 0x21
     e04:	1a a2       	std	Y+34, r1	; 0x22
     e06:	6e 01       	movw	r12, r28
     e08:	b2 e0       	ldi	r27, 0x02	; 2
     e0a:	cb 0e       	add	r12, r27
     e0c:	d1 1c       	adc	r13, r1
     e0e:	c6 01       	movw	r24, r12
     e10:	da da       	rcall	.-2636   	; 0x3c6 <vListInitialiseItem>
     e12:	ce 01       	movw	r24, r28
     e14:	0c 96       	adiw	r24, 0x0c	; 12
     e16:	d7 da       	rcall	.-2642   	; 0x3c6 <vListInitialiseItem>
     e18:	d9 87       	std	Y+9, r29	; 0x09
     e1a:	c8 87       	std	Y+8, r28	; 0x08
     e1c:	84 e0       	ldi	r24, 0x04	; 4
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	80 1b       	sub	r24, r16
     e22:	91 09       	sbc	r25, r1
     e24:	9d 87       	std	Y+13, r25	; 0x0d
     e26:	8c 87       	std	Y+12, r24	; 0x0c
     e28:	db 8b       	std	Y+19, r29	; 0x13
     e2a:	ca 8b       	std	Y+18, r28	; 0x12
     e2c:	84 e0       	ldi	r24, 0x04	; 4
     e2e:	fe 01       	movw	r30, r28
     e30:	b3 96       	adiw	r30, 0x23	; 35
     e32:	df 01       	movw	r26, r30
     e34:	1d 92       	st	X+, r1
     e36:	8a 95       	dec	r24
     e38:	e9 f7       	brne	.-6      	; 0xe34 <xTaskCreate+0xde>
     e3a:	1f a2       	std	Y+39, r1	; 0x27
     e3c:	a2 01       	movw	r20, r4
     e3e:	b4 01       	movw	r22, r8
     e40:	c5 01       	movw	r24, r10
     e42:	1d db       	rcall	.-2502   	; 0x47e <pxPortInitialiseStack>
     e44:	99 83       	std	Y+1, r25	; 0x01
     e46:	88 83       	st	Y, r24
     e48:	e1 14       	cp	r14, r1
     e4a:	f1 04       	cpc	r15, r1
     e4c:	19 f0       	breq	.+6      	; 0xe54 <xTaskCreate+0xfe>
     e4e:	f7 01       	movw	r30, r14
     e50:	d1 83       	std	Z+1, r29	; 0x01
     e52:	c0 83       	st	Z, r28
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	0f 92       	push	r0
     e5a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <uxCurrentNumberOfTasks>
     e5e:	8f 5f       	subi	r24, 0xFF	; 255
     e60:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <uxCurrentNumberOfTasks>
     e64:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     e68:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     e6c:	89 2b       	or	r24, r25
     e6e:	89 f5       	brne	.+98     	; 0xed2 <xTaskCreate+0x17c>
     e70:	d0 93 d2 02 	sts	0x02D2, r29	; 0x8002d2 <pxCurrentTCB+0x1>
     e74:	c0 93 d1 02 	sts	0x02D1, r28	; 0x8002d1 <pxCurrentTCB>
     e78:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <uxCurrentNumberOfTasks>
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	09 f0       	breq	.+2      	; 0xe82 <xTaskCreate+0x12c>
     e80:	38 c0       	rjmp	.+112    	; 0xef2 <xTaskCreate+0x19c>
     e82:	8d ea       	ldi	r24, 0xAD	; 173
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	91 da       	rcall	.-2782   	; 0x3aa <vListInitialise>
     e88:	86 eb       	ldi	r24, 0xB6	; 182
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	8e da       	rcall	.-2788   	; 0x3aa <vListInitialise>
     e8e:	8f eb       	ldi	r24, 0xBF	; 191
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	8b da       	rcall	.-2794   	; 0x3aa <vListInitialise>
     e94:	88 ec       	ldi	r24, 0xC8	; 200
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	88 da       	rcall	.-2800   	; 0x3aa <vListInitialise>
     e9a:	84 ea       	ldi	r24, 0xA4	; 164
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	85 da       	rcall	.-2806   	; 0x3aa <vListInitialise>
     ea0:	8b e9       	ldi	r24, 0x9B	; 155
     ea2:	92 e0       	ldi	r25, 0x02	; 2
     ea4:	82 da       	rcall	.-2812   	; 0x3aa <vListInitialise>
     ea6:	8e e8       	ldi	r24, 0x8E	; 142
     ea8:	92 e0       	ldi	r25, 0x02	; 2
     eaa:	7f da       	rcall	.-2818   	; 0x3aa <vListInitialise>
     eac:	85 e8       	ldi	r24, 0x85	; 133
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	7c da       	rcall	.-2824   	; 0x3aa <vListInitialise>
     eb2:	8b e7       	ldi	r24, 0x7B	; 123
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	79 da       	rcall	.-2830   	; 0x3aa <vListInitialise>
     eb8:	84 ea       	ldi	r24, 0xA4	; 164
     eba:	92 e0       	ldi	r25, 0x02	; 2
     ebc:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <pxDelayedTaskList+0x1>
     ec0:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <pxDelayedTaskList>
     ec4:	8b e9       	ldi	r24, 0x9B	; 155
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <pxOverflowDelayedTaskList+0x1>
     ecc:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <pxOverflowDelayedTaskList>
     ed0:	10 c0       	rjmp	.+32     	; 0xef2 <xTaskCreate+0x19c>
     ed2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <xSchedulerRunning>
     ed6:	81 11       	cpse	r24, r1
     ed8:	0c c0       	rjmp	.+24     	; 0xef2 <xTaskCreate+0x19c>
     eda:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     ede:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     ee2:	96 89       	ldd	r25, Z+22	; 0x16
     ee4:	8e 89       	ldd	r24, Y+22	; 0x16
     ee6:	89 17       	cp	r24, r25
     ee8:	20 f0       	brcs	.+8      	; 0xef2 <xTaskCreate+0x19c>
     eea:	d0 93 d2 02 	sts	0x02D2, r29	; 0x8002d2 <pxCurrentTCB+0x1>
     eee:	c0 93 d1 02 	sts	0x02D1, r28	; 0x8002d1 <pxCurrentTCB>
     ef2:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <uxTaskNumber>
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <uxTaskNumber>
     efc:	8e 89       	ldd	r24, Y+22	; 0x16
     efe:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <uxTopReadyPriority>
     f02:	98 17       	cp	r25, r24
     f04:	10 f4       	brcc	.+4      	; 0xf0a <xTaskCreate+0x1b4>
     f06:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <uxTopReadyPriority>
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	fc 01       	movw	r30, r24
     f0e:	ee 0f       	add	r30, r30
     f10:	ff 1f       	adc	r31, r31
     f12:	ee 0f       	add	r30, r30
     f14:	ff 1f       	adc	r31, r31
     f16:	ee 0f       	add	r30, r30
     f18:	ff 1f       	adc	r31, r31
     f1a:	8e 0f       	add	r24, r30
     f1c:	9f 1f       	adc	r25, r31
     f1e:	fc 01       	movw	r30, r24
     f20:	e3 55       	subi	r30, 0x53	; 83
     f22:	fd 4f       	sbci	r31, 0xFD	; 253
     f24:	01 80       	ldd	r0, Z+1	; 0x01
     f26:	f2 81       	ldd	r31, Z+2	; 0x02
     f28:	e0 2d       	mov	r30, r0
     f2a:	fd 83       	std	Y+5, r31	; 0x05
     f2c:	ec 83       	std	Y+4, r30	; 0x04
     f2e:	84 81       	ldd	r24, Z+4	; 0x04
     f30:	95 81       	ldd	r25, Z+5	; 0x05
     f32:	9f 83       	std	Y+7, r25	; 0x07
     f34:	8e 83       	std	Y+6, r24	; 0x06
     f36:	a4 81       	ldd	r26, Z+4	; 0x04
     f38:	b5 81       	ldd	r27, Z+5	; 0x05
     f3a:	13 96       	adiw	r26, 0x03	; 3
     f3c:	dc 92       	st	X, r13
     f3e:	ce 92       	st	-X, r12
     f40:	12 97       	sbiw	r26, 0x02	; 2
     f42:	d5 82       	std	Z+5, r13	; 0x05
     f44:	c4 82       	std	Z+4, r12	; 0x04
     f46:	ee 89       	ldd	r30, Y+22	; 0x16
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	cf 01       	movw	r24, r30
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	e8 0f       	add	r30, r24
     f5a:	f9 1f       	adc	r31, r25
     f5c:	e3 55       	subi	r30, 0x53	; 83
     f5e:	fd 4f       	sbci	r31, 0xFD	; 253
     f60:	fb 87       	std	Y+11, r31	; 0x0b
     f62:	ea 87       	std	Y+10, r30	; 0x0a
     f64:	80 81       	ld	r24, Z
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	80 83       	st	Z, r24
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <xSchedulerRunning>
     f72:	88 23       	and	r24, r24
     f74:	59 f0       	breq	.+22     	; 0xf8c <xTaskCreate+0x236>
     f76:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <pxCurrentTCB>
     f7a:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
     f7e:	96 89       	ldd	r25, Z+22	; 0x16
     f80:	8e 89       	ldd	r24, Y+22	; 0x16
     f82:	98 17       	cp	r25, r24
     f84:	28 f4       	brcc	.+10     	; 0xf90 <xTaskCreate+0x23a>
     f86:	ce da       	rcall	.-2660   	; 0x524 <vPortYield>
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	05 c0       	rjmp	.+10     	; 0xf96 <xTaskCreate+0x240>
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <xTaskCreate+0x240>
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <xTaskCreate+0x240>
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	ef 90       	pop	r14
     fa0:	df 90       	pop	r13
     fa2:	cf 90       	pop	r12
     fa4:	bf 90       	pop	r11
     fa6:	af 90       	pop	r10
     fa8:	9f 90       	pop	r9
     faa:	8f 90       	pop	r8
     fac:	7f 90       	pop	r7
     fae:	6f 90       	pop	r6
     fb0:	5f 90       	pop	r5
     fb2:	4f 90       	pop	r4
     fb4:	08 95       	ret

00000fb6 <vTaskStartScheduler>:
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	0f 2e       	mov	r0, r31
     fbe:	fd e6       	ldi	r31, 0x6D	; 109
     fc0:	ef 2e       	mov	r14, r31
     fc2:	f2 e0       	ldi	r31, 0x02	; 2
     fc4:	ff 2e       	mov	r15, r31
     fc6:	f0 2d       	mov	r31, r0
     fc8:	00 e0       	ldi	r16, 0x00	; 0
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 ec       	ldi	r20, 0xC0	; 192
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	67 e0       	ldi	r22, 0x07	; 7
     fd4:	72 e0       	ldi	r23, 0x02	; 2
     fd6:	8c e7       	ldi	r24, 0x7C	; 124
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	bd de       	rcall	.-646    	; 0xd56 <xTaskCreate>
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	91 f4       	brne	.+36     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     fe0:	ad d4       	rcall	.+2394   	; 0x193c <xTimerCreateTimerTask>
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	79 f4       	brne	.+30     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     fe6:	f8 94       	cli
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	9f ef       	ldi	r25, 0xFF	; 255
     fec:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <xNextTaskUnblockTime+0x1>
     ff0:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <xNextTaskUnblockTime>
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <xSchedulerRunning>
     ffa:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <xTickCount+0x1>
     ffe:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <xTickCount>
    1002:	54 da       	rcall	.-2904   	; 0x4ac <xPortStartScheduler>
    1004:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	08 95       	ret

00001010 <vTaskSuspendAll>:
    1010:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
    1014:	8f 5f       	subi	r24, 0xFF	; 255
    1016:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
    101a:	08 95       	ret

0000101c <xTaskGetTickCount>:
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	0f 92       	push	r0
    1022:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <xTickCount>
    1026:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <xTickCount+0x1>
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	08 95       	ret

00001030 <xTaskIncrementTick>:
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
    1040:	81 11       	cpse	r24, r1
    1042:	03 c1       	rjmp	.+518    	; 0x124a <xTaskIncrementTick+0x21a>
    1044:	c0 91 78 02 	lds	r28, 0x0278	; 0x800278 <xTickCount>
    1048:	d0 91 79 02 	lds	r29, 0x0279	; 0x800279 <xTickCount+0x1>
    104c:	7e 01       	movw	r14, r28
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	e8 1a       	sub	r14, r24
    1052:	f8 0a       	sbc	r15, r24
    1054:	f0 92 79 02 	sts	0x0279, r15	; 0x800279 <xTickCount+0x1>
    1058:	e0 92 78 02 	sts	0x0278, r14	; 0x800278 <xTickCount>
    105c:	e1 14       	cp	r14, r1
    105e:	f1 04       	cpc	r15, r1
    1060:	b1 f4       	brne	.+44     	; 0x108e <xTaskIncrementTick+0x5e>
    1062:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <pxDelayedTaskList>
    1066:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <pxDelayedTaskList+0x1>
    106a:	20 91 97 02 	lds	r18, 0x0297	; 0x800297 <pxOverflowDelayedTaskList>
    106e:	30 91 98 02 	lds	r19, 0x0298	; 0x800298 <pxOverflowDelayedTaskList+0x1>
    1072:	30 93 9a 02 	sts	0x029A, r19	; 0x80029a <pxDelayedTaskList+0x1>
    1076:	20 93 99 02 	sts	0x0299, r18	; 0x800299 <pxDelayedTaskList>
    107a:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <pxOverflowDelayedTaskList+0x1>
    107e:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <pxOverflowDelayedTaskList>
    1082:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <xNumOfOverflows>
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <xNumOfOverflows>
    108c:	ca dd       	rcall	.-1132   	; 0xc22 <prvResetNextTaskUnblockTime>
    108e:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <xNextTaskUnblockTime>
    1092:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <xNextTaskUnblockTime+0x1>
    1096:	e8 16       	cp	r14, r24
    1098:	f9 06       	cpc	r15, r25
    109a:	10 f4       	brcc	.+4      	; 0x10a0 <xTaskIncrementTick+0x70>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	b9 c0       	rjmp	.+370    	; 0x1212 <xTaskIncrementTick+0x1e2>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <pxDelayedTaskList>
    10a8:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <pxDelayedTaskList+0x1>
    10ac:	90 81       	ld	r25, Z
    10ae:	91 11       	cpse	r25, r1
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <xTaskIncrementTick+0x90>
    10b2:	2f ef       	ldi	r18, 0xFF	; 255
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	30 93 70 02 	sts	0x0270, r19	; 0x800270 <xNextTaskUnblockTime+0x1>
    10ba:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <xNextTaskUnblockTime>
    10be:	a9 c0       	rjmp	.+338    	; 0x1212 <xTaskIncrementTick+0x1e2>
    10c0:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <pxDelayedTaskList>
    10c4:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <pxDelayedTaskList+0x1>
    10c8:	05 80       	ldd	r0, Z+5	; 0x05
    10ca:	f6 81       	ldd	r31, Z+6	; 0x06
    10cc:	e0 2d       	mov	r30, r0
    10ce:	06 80       	ldd	r0, Z+6	; 0x06
    10d0:	f7 81       	ldd	r31, Z+7	; 0x07
    10d2:	e0 2d       	mov	r30, r0
    10d4:	22 81       	ldd	r18, Z+2	; 0x02
    10d6:	33 81       	ldd	r19, Z+3	; 0x03
    10d8:	e2 16       	cp	r14, r18
    10da:	f3 06       	cpc	r15, r19
    10dc:	28 f4       	brcc	.+10     	; 0x10e8 <xTaskIncrementTick+0xb8>
    10de:	30 93 70 02 	sts	0x0270, r19	; 0x800270 <xNextTaskUnblockTime+0x1>
    10e2:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <xNextTaskUnblockTime>
    10e6:	95 c0       	rjmp	.+298    	; 0x1212 <xTaskIncrementTick+0x1e2>
    10e8:	a2 85       	ldd	r26, Z+10	; 0x0a
    10ea:	b3 85       	ldd	r27, Z+11	; 0x0b
    10ec:	24 81       	ldd	r18, Z+4	; 0x04
    10ee:	35 81       	ldd	r19, Z+5	; 0x05
    10f0:	46 81       	ldd	r20, Z+6	; 0x06
    10f2:	57 81       	ldd	r21, Z+7	; 0x07
    10f4:	e9 01       	movw	r28, r18
    10f6:	5d 83       	std	Y+5, r21	; 0x05
    10f8:	4c 83       	std	Y+4, r20	; 0x04
    10fa:	26 81       	ldd	r18, Z+6	; 0x06
    10fc:	37 81       	ldd	r19, Z+7	; 0x07
    10fe:	44 81       	ldd	r20, Z+4	; 0x04
    1100:	55 81       	ldd	r21, Z+5	; 0x05
    1102:	e9 01       	movw	r28, r18
    1104:	5b 83       	std	Y+3, r21	; 0x03
    1106:	4a 83       	std	Y+2, r20	; 0x02
    1108:	af 01       	movw	r20, r30
    110a:	4e 5f       	subi	r20, 0xFE	; 254
    110c:	5f 4f       	sbci	r21, 0xFF	; 255
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	2d 91       	ld	r18, X+
    1112:	3c 91       	ld	r19, X
    1114:	12 97       	sbiw	r26, 0x02	; 2
    1116:	24 17       	cp	r18, r20
    1118:	35 07       	cpc	r19, r21
    111a:	31 f4       	brne	.+12     	; 0x1128 <xTaskIncrementTick+0xf8>
    111c:	26 81       	ldd	r18, Z+6	; 0x06
    111e:	37 81       	ldd	r19, Z+7	; 0x07
    1120:	12 96       	adiw	r26, 0x02	; 2
    1122:	3c 93       	st	X, r19
    1124:	2e 93       	st	-X, r18
    1126:	11 97       	sbiw	r26, 0x01	; 1
    1128:	13 86       	std	Z+11, r1	; 0x0b
    112a:	12 86       	std	Z+10, r1	; 0x0a
    112c:	9c 91       	ld	r25, X
    112e:	91 50       	subi	r25, 0x01	; 1
    1130:	9c 93       	st	X, r25
    1132:	a4 89       	ldd	r26, Z+20	; 0x14
    1134:	b5 89       	ldd	r27, Z+21	; 0x15
    1136:	10 97       	sbiw	r26, 0x00	; 0
    1138:	19 f1       	breq	.+70     	; 0x1180 <xTaskIncrementTick+0x150>
    113a:	26 85       	ldd	r18, Z+14	; 0x0e
    113c:	37 85       	ldd	r19, Z+15	; 0x0f
    113e:	00 89       	ldd	r16, Z+16	; 0x10
    1140:	11 89       	ldd	r17, Z+17	; 0x11
    1142:	e9 01       	movw	r28, r18
    1144:	1d 83       	std	Y+5, r17	; 0x05
    1146:	0c 83       	std	Y+4, r16	; 0x04
    1148:	20 89       	ldd	r18, Z+16	; 0x10
    114a:	31 89       	ldd	r19, Z+17	; 0x11
    114c:	06 85       	ldd	r16, Z+14	; 0x0e
    114e:	17 85       	ldd	r17, Z+15	; 0x0f
    1150:	e9 01       	movw	r28, r18
    1152:	1b 83       	std	Y+3, r17	; 0x03
    1154:	0a 83       	std	Y+2, r16	; 0x02
    1156:	11 96       	adiw	r26, 0x01	; 1
    1158:	0d 91       	ld	r16, X+
    115a:	1c 91       	ld	r17, X
    115c:	12 97       	sbiw	r26, 0x02	; 2
    115e:	9f 01       	movw	r18, r30
    1160:	24 5f       	subi	r18, 0xF4	; 244
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	02 17       	cp	r16, r18
    1166:	13 07       	cpc	r17, r19
    1168:	31 f4       	brne	.+12     	; 0x1176 <xTaskIncrementTick+0x146>
    116a:	20 89       	ldd	r18, Z+16	; 0x10
    116c:	31 89       	ldd	r19, Z+17	; 0x11
    116e:	12 96       	adiw	r26, 0x02	; 2
    1170:	3c 93       	st	X, r19
    1172:	2e 93       	st	-X, r18
    1174:	11 97       	sbiw	r26, 0x01	; 1
    1176:	15 8a       	std	Z+21, r1	; 0x15
    1178:	14 8a       	std	Z+20, r1	; 0x14
    117a:	9c 91       	ld	r25, X
    117c:	91 50       	subi	r25, 0x01	; 1
    117e:	9c 93       	st	X, r25
    1180:	26 89       	ldd	r18, Z+22	; 0x16
    1182:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <uxTopReadyPriority>
    1186:	92 17       	cp	r25, r18
    1188:	10 f4       	brcc	.+4      	; 0x118e <xTaskIncrementTick+0x15e>
    118a:	20 93 77 02 	sts	0x0277, r18	; 0x800277 <uxTopReadyPriority>
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	d9 01       	movw	r26, r18
    1192:	aa 0f       	add	r26, r26
    1194:	bb 1f       	adc	r27, r27
    1196:	aa 0f       	add	r26, r26
    1198:	bb 1f       	adc	r27, r27
    119a:	aa 0f       	add	r26, r26
    119c:	bb 1f       	adc	r27, r27
    119e:	2a 0f       	add	r18, r26
    11a0:	3b 1f       	adc	r19, r27
    11a2:	d9 01       	movw	r26, r18
    11a4:	a3 55       	subi	r26, 0x53	; 83
    11a6:	bd 4f       	sbci	r27, 0xFD	; 253
    11a8:	11 96       	adiw	r26, 0x01	; 1
    11aa:	0d 90       	ld	r0, X+
    11ac:	bc 91       	ld	r27, X
    11ae:	a0 2d       	mov	r26, r0
    11b0:	b5 83       	std	Z+5, r27	; 0x05
    11b2:	a4 83       	std	Z+4, r26	; 0x04
    11b4:	14 96       	adiw	r26, 0x04	; 4
    11b6:	2d 91       	ld	r18, X+
    11b8:	3c 91       	ld	r19, X
    11ba:	15 97       	sbiw	r26, 0x05	; 5
    11bc:	37 83       	std	Z+7, r19	; 0x07
    11be:	26 83       	std	Z+6, r18	; 0x06
    11c0:	14 96       	adiw	r26, 0x04	; 4
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	15 97       	sbiw	r26, 0x05	; 5
    11c8:	e9 01       	movw	r28, r18
    11ca:	5b 83       	std	Y+3, r21	; 0x03
    11cc:	4a 83       	std	Y+2, r20	; 0x02
    11ce:	15 96       	adiw	r26, 0x05	; 5
    11d0:	5c 93       	st	X, r21
    11d2:	4e 93       	st	-X, r20
    11d4:	14 97       	sbiw	r26, 0x04	; 4
    11d6:	a6 89       	ldd	r26, Z+22	; 0x16
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	9d 01       	movw	r18, r26
    11dc:	22 0f       	add	r18, r18
    11de:	33 1f       	adc	r19, r19
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	22 0f       	add	r18, r18
    11e6:	33 1f       	adc	r19, r19
    11e8:	a2 0f       	add	r26, r18
    11ea:	b3 1f       	adc	r27, r19
    11ec:	a3 55       	subi	r26, 0x53	; 83
    11ee:	bd 4f       	sbci	r27, 0xFD	; 253
    11f0:	b3 87       	std	Z+11, r27	; 0x0b
    11f2:	a2 87       	std	Z+10, r26	; 0x0a
    11f4:	9c 91       	ld	r25, X
    11f6:	9f 5f       	subi	r25, 0xFF	; 255
    11f8:	9c 93       	st	X, r25
    11fa:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    11fe:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
    1202:	26 89       	ldd	r18, Z+22	; 0x16
    1204:	56 96       	adiw	r26, 0x16	; 22
    1206:	9c 91       	ld	r25, X
    1208:	29 17       	cp	r18, r25
    120a:	08 f4       	brcc	.+2      	; 0x120e <xTaskIncrementTick+0x1de>
    120c:	4b cf       	rjmp	.-362    	; 0x10a4 <xTaskIncrementTick+0x74>
    120e:	86 2f       	mov	r24, r22
    1210:	49 cf       	rjmp	.-366    	; 0x10a4 <xTaskIncrementTick+0x74>
    1212:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    1216:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
    121a:	26 89       	ldd	r18, Z+22	; 0x16
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	f9 01       	movw	r30, r18
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	2e 0f       	add	r18, r30
    122e:	3f 1f       	adc	r19, r31
    1230:	f9 01       	movw	r30, r18
    1232:	e3 55       	subi	r30, 0x53	; 83
    1234:	fd 4f       	sbci	r31, 0xFD	; 253
    1236:	90 81       	ld	r25, Z
    1238:	92 30       	cpi	r25, 0x02	; 2
    123a:	08 f0       	brcs	.+2      	; 0x123e <xTaskIncrementTick+0x20e>
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <xYieldPending>
    1242:	99 23       	and	r25, r25
    1244:	61 f0       	breq	.+24     	; 0x125e <xTaskIncrementTick+0x22e>
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	0a c0       	rjmp	.+20     	; 0x125e <xTaskIncrementTick+0x22e>
    124a:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <xPendedTicks>
    124e:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <xPendedTicks+0x1>
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <xPendedTicks+0x1>
    1258:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <xPendedTicks>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	08 95       	ret

0000126c <xTaskResumeAll>:
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	0f 92       	push	r0
    1278:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
    127c:	81 50       	subi	r24, 0x01	; 1
    127e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
    1282:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
    1286:	81 11       	cpse	r24, r1
    1288:	c3 c0       	rjmp	.+390    	; 0x1410 <xTaskResumeAll+0x1a4>
    128a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <uxCurrentNumberOfTasks>
    128e:	81 11       	cpse	r24, r1
    1290:	9b c0       	rjmp	.+310    	; 0x13c8 <xTaskResumeAll+0x15c>
    1292:	c1 c0       	rjmp	.+386    	; 0x1416 <xTaskResumeAll+0x1aa>
    1294:	db 01       	movw	r26, r22
    1296:	15 96       	adiw	r26, 0x05	; 5
    1298:	ed 91       	ld	r30, X+
    129a:	fc 91       	ld	r31, X
    129c:	16 97       	sbiw	r26, 0x06	; 6
    129e:	06 80       	ldd	r0, Z+6	; 0x06
    12a0:	f7 81       	ldd	r31, Z+7	; 0x07
    12a2:	e0 2d       	mov	r30, r0
    12a4:	a4 89       	ldd	r26, Z+20	; 0x14
    12a6:	b5 89       	ldd	r27, Z+21	; 0x15
    12a8:	86 85       	ldd	r24, Z+14	; 0x0e
    12aa:	97 85       	ldd	r25, Z+15	; 0x0f
    12ac:	20 89       	ldd	r18, Z+16	; 0x10
    12ae:	31 89       	ldd	r19, Z+17	; 0x11
    12b0:	ec 01       	movw	r28, r24
    12b2:	3d 83       	std	Y+5, r19	; 0x05
    12b4:	2c 83       	std	Y+4, r18	; 0x04
    12b6:	80 89       	ldd	r24, Z+16	; 0x10
    12b8:	91 89       	ldd	r25, Z+17	; 0x11
    12ba:	26 85       	ldd	r18, Z+14	; 0x0e
    12bc:	37 85       	ldd	r19, Z+15	; 0x0f
    12be:	ec 01       	movw	r28, r24
    12c0:	3b 83       	std	Y+3, r19	; 0x03
    12c2:	2a 83       	std	Y+2, r18	; 0x02
    12c4:	cf 01       	movw	r24, r30
    12c6:	0c 96       	adiw	r24, 0x0c	; 12
    12c8:	11 96       	adiw	r26, 0x01	; 1
    12ca:	2d 91       	ld	r18, X+
    12cc:	3c 91       	ld	r19, X
    12ce:	12 97       	sbiw	r26, 0x02	; 2
    12d0:	28 17       	cp	r18, r24
    12d2:	39 07       	cpc	r19, r25
    12d4:	31 f4       	brne	.+12     	; 0x12e2 <xTaskResumeAll+0x76>
    12d6:	80 89       	ldd	r24, Z+16	; 0x10
    12d8:	91 89       	ldd	r25, Z+17	; 0x11
    12da:	12 96       	adiw	r26, 0x02	; 2
    12dc:	9c 93       	st	X, r25
    12de:	8e 93       	st	-X, r24
    12e0:	11 97       	sbiw	r26, 0x01	; 1
    12e2:	15 8a       	std	Z+21, r1	; 0x15
    12e4:	14 8a       	std	Z+20, r1	; 0x14
    12e6:	8c 91       	ld	r24, X
    12e8:	81 50       	subi	r24, 0x01	; 1
    12ea:	8c 93       	st	X, r24
    12ec:	a2 85       	ldd	r26, Z+10	; 0x0a
    12ee:	b3 85       	ldd	r27, Z+11	; 0x0b
    12f0:	84 81       	ldd	r24, Z+4	; 0x04
    12f2:	95 81       	ldd	r25, Z+5	; 0x05
    12f4:	26 81       	ldd	r18, Z+6	; 0x06
    12f6:	37 81       	ldd	r19, Z+7	; 0x07
    12f8:	ec 01       	movw	r28, r24
    12fa:	3d 83       	std	Y+5, r19	; 0x05
    12fc:	2c 83       	std	Y+4, r18	; 0x04
    12fe:	86 81       	ldd	r24, Z+6	; 0x06
    1300:	97 81       	ldd	r25, Z+7	; 0x07
    1302:	24 81       	ldd	r18, Z+4	; 0x04
    1304:	35 81       	ldd	r19, Z+5	; 0x05
    1306:	ec 01       	movw	r28, r24
    1308:	3b 83       	std	Y+3, r19	; 0x03
    130a:	2a 83       	std	Y+2, r18	; 0x02
    130c:	9f 01       	movw	r18, r30
    130e:	2e 5f       	subi	r18, 0xFE	; 254
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	11 96       	adiw	r26, 0x01	; 1
    1314:	8d 91       	ld	r24, X+
    1316:	9c 91       	ld	r25, X
    1318:	12 97       	sbiw	r26, 0x02	; 2
    131a:	82 17       	cp	r24, r18
    131c:	93 07       	cpc	r25, r19
    131e:	31 f4       	brne	.+12     	; 0x132c <xTaskResumeAll+0xc0>
    1320:	86 81       	ldd	r24, Z+6	; 0x06
    1322:	97 81       	ldd	r25, Z+7	; 0x07
    1324:	12 96       	adiw	r26, 0x02	; 2
    1326:	9c 93       	st	X, r25
    1328:	8e 93       	st	-X, r24
    132a:	11 97       	sbiw	r26, 0x01	; 1
    132c:	13 86       	std	Z+11, r1	; 0x0b
    132e:	12 86       	std	Z+10, r1	; 0x0a
    1330:	8c 91       	ld	r24, X
    1332:	81 50       	subi	r24, 0x01	; 1
    1334:	8c 93       	st	X, r24
    1336:	86 89       	ldd	r24, Z+22	; 0x16
    1338:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <uxTopReadyPriority>
    133c:	98 17       	cp	r25, r24
    133e:	10 f4       	brcc	.+4      	; 0x1344 <xTaskResumeAll+0xd8>
    1340:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <uxTopReadyPriority>
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	dc 01       	movw	r26, r24
    1348:	aa 0f       	add	r26, r26
    134a:	bb 1f       	adc	r27, r27
    134c:	aa 0f       	add	r26, r26
    134e:	bb 1f       	adc	r27, r27
    1350:	aa 0f       	add	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	8a 0f       	add	r24, r26
    1356:	9b 1f       	adc	r25, r27
    1358:	dc 01       	movw	r26, r24
    135a:	a3 55       	subi	r26, 0x53	; 83
    135c:	bd 4f       	sbci	r27, 0xFD	; 253
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	0d 90       	ld	r0, X+
    1362:	bc 91       	ld	r27, X
    1364:	a0 2d       	mov	r26, r0
    1366:	b5 83       	std	Z+5, r27	; 0x05
    1368:	a4 83       	std	Z+4, r26	; 0x04
    136a:	14 96       	adiw	r26, 0x04	; 4
    136c:	8d 91       	ld	r24, X+
    136e:	9c 91       	ld	r25, X
    1370:	15 97       	sbiw	r26, 0x05	; 5
    1372:	97 83       	std	Z+7, r25	; 0x07
    1374:	86 83       	std	Z+6, r24	; 0x06
    1376:	14 96       	adiw	r26, 0x04	; 4
    1378:	8d 91       	ld	r24, X+
    137a:	9c 91       	ld	r25, X
    137c:	15 97       	sbiw	r26, 0x05	; 5
    137e:	ec 01       	movw	r28, r24
    1380:	3b 83       	std	Y+3, r19	; 0x03
    1382:	2a 83       	std	Y+2, r18	; 0x02
    1384:	15 96       	adiw	r26, 0x05	; 5
    1386:	3c 93       	st	X, r19
    1388:	2e 93       	st	-X, r18
    138a:	14 97       	sbiw	r26, 0x04	; 4
    138c:	a6 89       	ldd	r26, Z+22	; 0x16
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	cd 01       	movw	r24, r26
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	a8 0f       	add	r26, r24
    13a0:	b9 1f       	adc	r27, r25
    13a2:	a3 55       	subi	r26, 0x53	; 83
    13a4:	bd 4f       	sbci	r27, 0xFD	; 253
    13a6:	b3 87       	std	Z+11, r27	; 0x0b
    13a8:	a2 87       	std	Z+10, r26	; 0x0a
    13aa:	8c 91       	ld	r24, X
    13ac:	8f 5f       	subi	r24, 0xFF	; 255
    13ae:	8c 93       	st	X, r24
    13b0:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    13b4:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
    13b8:	96 89       	ldd	r25, Z+22	; 0x16
    13ba:	56 96       	adiw	r26, 0x16	; 22
    13bc:	8c 91       	ld	r24, X
    13be:	98 17       	cp	r25, r24
    13c0:	40 f0       	brcs	.+16     	; 0x13d2 <xTaskResumeAll+0x166>
    13c2:	40 93 73 02 	sts	0x0273, r20	; 0x800273 <xYieldPending>
    13c6:	05 c0       	rjmp	.+10     	; 0x13d2 <xTaskResumeAll+0x166>
    13c8:	e0 e0       	ldi	r30, 0x00	; 0
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	6e e8       	ldi	r22, 0x8E	; 142
    13ce:	72 e0       	ldi	r23, 0x02	; 2
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	db 01       	movw	r26, r22
    13d4:	8c 91       	ld	r24, X
    13d6:	81 11       	cpse	r24, r1
    13d8:	5d cf       	rjmp	.-326    	; 0x1294 <xTaskResumeAll+0x28>
    13da:	ef 2b       	or	r30, r31
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <xTaskResumeAll+0x174>
    13de:	21 dc       	rcall	.-1982   	; 0xc22 <prvResetNextTaskUnblockTime>
    13e0:	c0 91 74 02 	lds	r28, 0x0274	; 0x800274 <xPendedTicks>
    13e4:	d0 91 75 02 	lds	r29, 0x0275	; 0x800275 <xPendedTicks+0x1>
    13e8:	20 97       	sbiw	r28, 0x00	; 0
    13ea:	59 f0       	breq	.+22     	; 0x1402 <xTaskResumeAll+0x196>
    13ec:	11 e0       	ldi	r17, 0x01	; 1
    13ee:	20 de       	rcall	.-960    	; 0x1030 <xTaskIncrementTick>
    13f0:	81 11       	cpse	r24, r1
    13f2:	10 93 73 02 	sts	0x0273, r17	; 0x800273 <xYieldPending>
    13f6:	21 97       	sbiw	r28, 0x01	; 1
    13f8:	d1 f7       	brne	.-12     	; 0x13ee <xTaskResumeAll+0x182>
    13fa:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <xPendedTicks+0x1>
    13fe:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <xPendedTicks>
    1402:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <xYieldPending>
    1406:	88 23       	and	r24, r24
    1408:	29 f0       	breq	.+10     	; 0x1414 <xTaskResumeAll+0x1a8>
    140a:	8c d8       	rcall	.-3816   	; 0x524 <vPortYield>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <xTaskResumeAll+0x1aa>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <xTaskResumeAll+0x1aa>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	08 95       	ret

00001422 <vTaskSwitchContext>:
    1422:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
    1426:	88 23       	and	r24, r24
    1428:	21 f0       	breq	.+8      	; 0x1432 <vTaskSwitchContext+0x10>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <xYieldPending>
    1430:	08 95       	ret
    1432:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <xYieldPending>
    1436:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <uxTopReadyPriority>
    143a:	82 2f       	mov	r24, r18
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	fc 01       	movw	r30, r24
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	e8 0f       	add	r30, r24
    144e:	f9 1f       	adc	r31, r25
    1450:	e3 55       	subi	r30, 0x53	; 83
    1452:	fd 4f       	sbci	r31, 0xFD	; 253
    1454:	30 81       	ld	r19, Z
    1456:	31 11       	cpse	r19, r1
    1458:	11 c0       	rjmp	.+34     	; 0x147c <vTaskSwitchContext+0x5a>
    145a:	21 50       	subi	r18, 0x01	; 1
    145c:	82 2f       	mov	r24, r18
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	fc 01       	movw	r30, r24
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	e8 0f       	add	r30, r24
    1470:	f9 1f       	adc	r31, r25
    1472:	e3 55       	subi	r30, 0x53	; 83
    1474:	fd 4f       	sbci	r31, 0xFD	; 253
    1476:	30 81       	ld	r19, Z
    1478:	33 23       	and	r19, r19
    147a:	79 f3       	breq	.-34     	; 0x145a <vTaskSwitchContext+0x38>
    147c:	ac 01       	movw	r20, r24
    147e:	44 0f       	add	r20, r20
    1480:	55 1f       	adc	r21, r21
    1482:	44 0f       	add	r20, r20
    1484:	55 1f       	adc	r21, r21
    1486:	44 0f       	add	r20, r20
    1488:	55 1f       	adc	r21, r21
    148a:	48 0f       	add	r20, r24
    148c:	59 1f       	adc	r21, r25
    148e:	da 01       	movw	r26, r20
    1490:	a3 55       	subi	r26, 0x53	; 83
    1492:	bd 4f       	sbci	r27, 0xFD	; 253
    1494:	11 96       	adiw	r26, 0x01	; 1
    1496:	ed 91       	ld	r30, X+
    1498:	fc 91       	ld	r31, X
    149a:	12 97       	sbiw	r26, 0x02	; 2
    149c:	02 80       	ldd	r0, Z+2	; 0x02
    149e:	f3 81       	ldd	r31, Z+3	; 0x03
    14a0:	e0 2d       	mov	r30, r0
    14a2:	12 96       	adiw	r26, 0x02	; 2
    14a4:	fc 93       	st	X, r31
    14a6:	ee 93       	st	-X, r30
    14a8:	11 97       	sbiw	r26, 0x01	; 1
    14aa:	40 55       	subi	r20, 0x50	; 80
    14ac:	5d 4f       	sbci	r21, 0xFD	; 253
    14ae:	e4 17       	cp	r30, r20
    14b0:	f5 07       	cpc	r31, r21
    14b2:	29 f4       	brne	.+10     	; 0x14be <vTaskSwitchContext+0x9c>
    14b4:	42 81       	ldd	r20, Z+2	; 0x02
    14b6:	53 81       	ldd	r21, Z+3	; 0x03
    14b8:	fd 01       	movw	r30, r26
    14ba:	52 83       	std	Z+2, r21	; 0x02
    14bc:	41 83       	std	Z+1, r20	; 0x01
    14be:	fc 01       	movw	r30, r24
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	8e 0f       	add	r24, r30
    14ce:	9f 1f       	adc	r25, r31
    14d0:	fc 01       	movw	r30, r24
    14d2:	e3 55       	subi	r30, 0x53	; 83
    14d4:	fd 4f       	sbci	r31, 0xFD	; 253
    14d6:	01 80       	ldd	r0, Z+1	; 0x01
    14d8:	f2 81       	ldd	r31, Z+2	; 0x02
    14da:	e0 2d       	mov	r30, r0
    14dc:	86 81       	ldd	r24, Z+6	; 0x06
    14de:	97 81       	ldd	r25, Z+7	; 0x07
    14e0:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <pxCurrentTCB+0x1>
    14e4:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <pxCurrentTCB>
    14e8:	20 93 77 02 	sts	0x0277, r18	; 0x800277 <uxTopReadyPriority>
    14ec:	08 95       	ret

000014ee <vTaskPlaceOnEventList>:
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	eb 01       	movw	r28, r22
    14f4:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    14f8:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
    14fc:	64 5f       	subi	r22, 0xF4	; 244
    14fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1500:	0e 94 e7 01 	call	0x3ce	; 0x3ce <vListInsert>
    1504:	61 e0       	ldi	r22, 0x01	; 1
    1506:	ce 01       	movw	r24, r28
    1508:	a8 db       	rcall	.-2224   	; 0xc5a <prvAddCurrentTaskToDelayedList>
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	08 95       	ret

00001510 <vTaskPlaceOnEventListRestricted>:
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	fc 01       	movw	r30, r24
    151a:	8b 01       	movw	r16, r22
    151c:	a1 81       	ldd	r26, Z+1	; 0x01
    151e:	b2 81       	ldd	r27, Z+2	; 0x02
    1520:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    1524:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
    1528:	ec 01       	movw	r28, r24
    152a:	bf 87       	std	Y+15, r27	; 0x0f
    152c:	ae 87       	std	Y+14, r26	; 0x0e
    152e:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    1532:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
    1536:	14 96       	adiw	r26, 0x04	; 4
    1538:	2d 91       	ld	r18, X+
    153a:	3c 91       	ld	r19, X
    153c:	15 97       	sbiw	r26, 0x05	; 5
    153e:	ec 01       	movw	r28, r24
    1540:	39 8b       	std	Y+17, r19	; 0x11
    1542:	28 8b       	std	Y+16, r18	; 0x10
    1544:	14 96       	adiw	r26, 0x04	; 4
    1546:	8d 91       	ld	r24, X+
    1548:	9c 91       	ld	r25, X
    154a:	15 97       	sbiw	r26, 0x05	; 5
    154c:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    1550:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
    1554:	24 5f       	subi	r18, 0xF4	; 244
    1556:	3f 4f       	sbci	r19, 0xFF	; 255
    1558:	ec 01       	movw	r28, r24
    155a:	3b 83       	std	Y+3, r19	; 0x03
    155c:	2a 83       	std	Y+2, r18	; 0x02
    155e:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    1562:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
    1566:	24 5f       	subi	r18, 0xF4	; 244
    1568:	3f 4f       	sbci	r19, 0xFF	; 255
    156a:	15 96       	adiw	r26, 0x05	; 5
    156c:	3c 93       	st	X, r19
    156e:	2e 93       	st	-X, r18
    1570:	14 97       	sbiw	r26, 0x04	; 4
    1572:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    1576:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
    157a:	55 96       	adiw	r26, 0x15	; 21
    157c:	fc 93       	st	X, r31
    157e:	ee 93       	st	-X, r30
    1580:	54 97       	sbiw	r26, 0x14	; 20
    1582:	90 81       	ld	r25, Z
    1584:	9f 5f       	subi	r25, 0xFF	; 255
    1586:	90 83       	st	Z, r25
    1588:	44 23       	and	r20, r20
    158a:	11 f0       	breq	.+4      	; 0x1590 <vTaskPlaceOnEventListRestricted+0x80>
    158c:	0f ef       	ldi	r16, 0xFF	; 255
    158e:	1f ef       	ldi	r17, 0xFF	; 255
    1590:	64 2f       	mov	r22, r20
    1592:	c8 01       	movw	r24, r16
    1594:	62 db       	rcall	.-2364   	; 0xc5a <prvAddCurrentTaskToDelayedList>
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <xTaskRemoveFromEventList>:
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	dc 01       	movw	r26, r24
    15a6:	15 96       	adiw	r26, 0x05	; 5
    15a8:	ed 91       	ld	r30, X+
    15aa:	fc 91       	ld	r31, X
    15ac:	16 97       	sbiw	r26, 0x06	; 6
    15ae:	06 80       	ldd	r0, Z+6	; 0x06
    15b0:	f7 81       	ldd	r31, Z+7	; 0x07
    15b2:	e0 2d       	mov	r30, r0
    15b4:	a4 89       	ldd	r26, Z+20	; 0x14
    15b6:	b5 89       	ldd	r27, Z+21	; 0x15
    15b8:	c6 85       	ldd	r28, Z+14	; 0x0e
    15ba:	d7 85       	ldd	r29, Z+15	; 0x0f
    15bc:	80 89       	ldd	r24, Z+16	; 0x10
    15be:	91 89       	ldd	r25, Z+17	; 0x11
    15c0:	9d 83       	std	Y+5, r25	; 0x05
    15c2:	8c 83       	std	Y+4, r24	; 0x04
    15c4:	c0 89       	ldd	r28, Z+16	; 0x10
    15c6:	d1 89       	ldd	r29, Z+17	; 0x11
    15c8:	86 85       	ldd	r24, Z+14	; 0x0e
    15ca:	97 85       	ldd	r25, Z+15	; 0x0f
    15cc:	9b 83       	std	Y+3, r25	; 0x03
    15ce:	8a 83       	std	Y+2, r24	; 0x02
    15d0:	9f 01       	movw	r18, r30
    15d2:	24 5f       	subi	r18, 0xF4	; 244
    15d4:	3f 4f       	sbci	r19, 0xFF	; 255
    15d6:	11 96       	adiw	r26, 0x01	; 1
    15d8:	8d 91       	ld	r24, X+
    15da:	9c 91       	ld	r25, X
    15dc:	12 97       	sbiw	r26, 0x02	; 2
    15de:	82 17       	cp	r24, r18
    15e0:	93 07       	cpc	r25, r19
    15e2:	31 f4       	brne	.+12     	; 0x15f0 <xTaskRemoveFromEventList+0x50>
    15e4:	80 89       	ldd	r24, Z+16	; 0x10
    15e6:	91 89       	ldd	r25, Z+17	; 0x11
    15e8:	12 96       	adiw	r26, 0x02	; 2
    15ea:	9c 93       	st	X, r25
    15ec:	8e 93       	st	-X, r24
    15ee:	11 97       	sbiw	r26, 0x01	; 1
    15f0:	15 8a       	std	Z+21, r1	; 0x15
    15f2:	14 8a       	std	Z+20, r1	; 0x14
    15f4:	8c 91       	ld	r24, X
    15f6:	81 50       	subi	r24, 0x01	; 1
    15f8:	8c 93       	st	X, r24
    15fa:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
    15fe:	81 11       	cpse	r24, r1
    1600:	60 c0       	rjmp	.+192    	; 0x16c2 <xTaskRemoveFromEventList+0x122>
    1602:	a2 85       	ldd	r26, Z+10	; 0x0a
    1604:	b3 85       	ldd	r27, Z+11	; 0x0b
    1606:	c4 81       	ldd	r28, Z+4	; 0x04
    1608:	d5 81       	ldd	r29, Z+5	; 0x05
    160a:	86 81       	ldd	r24, Z+6	; 0x06
    160c:	97 81       	ldd	r25, Z+7	; 0x07
    160e:	9d 83       	std	Y+5, r25	; 0x05
    1610:	8c 83       	std	Y+4, r24	; 0x04
    1612:	c6 81       	ldd	r28, Z+6	; 0x06
    1614:	d7 81       	ldd	r29, Z+7	; 0x07
    1616:	84 81       	ldd	r24, Z+4	; 0x04
    1618:	95 81       	ldd	r25, Z+5	; 0x05
    161a:	9b 83       	std	Y+3, r25	; 0x03
    161c:	8a 83       	std	Y+2, r24	; 0x02
    161e:	9f 01       	movw	r18, r30
    1620:	2e 5f       	subi	r18, 0xFE	; 254
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	11 96       	adiw	r26, 0x01	; 1
    1626:	8d 91       	ld	r24, X+
    1628:	9c 91       	ld	r25, X
    162a:	12 97       	sbiw	r26, 0x02	; 2
    162c:	82 17       	cp	r24, r18
    162e:	93 07       	cpc	r25, r19
    1630:	31 f4       	brne	.+12     	; 0x163e <xTaskRemoveFromEventList+0x9e>
    1632:	86 81       	ldd	r24, Z+6	; 0x06
    1634:	97 81       	ldd	r25, Z+7	; 0x07
    1636:	12 96       	adiw	r26, 0x02	; 2
    1638:	9c 93       	st	X, r25
    163a:	8e 93       	st	-X, r24
    163c:	11 97       	sbiw	r26, 0x01	; 1
    163e:	13 86       	std	Z+11, r1	; 0x0b
    1640:	12 86       	std	Z+10, r1	; 0x0a
    1642:	8c 91       	ld	r24, X
    1644:	81 50       	subi	r24, 0x01	; 1
    1646:	8c 93       	st	X, r24
    1648:	86 89       	ldd	r24, Z+22	; 0x16
    164a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <uxTopReadyPriority>
    164e:	98 17       	cp	r25, r24
    1650:	10 f4       	brcc	.+4      	; 0x1656 <xTaskRemoveFromEventList+0xb6>
    1652:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <uxTopReadyPriority>
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	dc 01       	movw	r26, r24
    165a:	aa 0f       	add	r26, r26
    165c:	bb 1f       	adc	r27, r27
    165e:	aa 0f       	add	r26, r26
    1660:	bb 1f       	adc	r27, r27
    1662:	aa 0f       	add	r26, r26
    1664:	bb 1f       	adc	r27, r27
    1666:	8a 0f       	add	r24, r26
    1668:	9b 1f       	adc	r25, r27
    166a:	dc 01       	movw	r26, r24
    166c:	a3 55       	subi	r26, 0x53	; 83
    166e:	bd 4f       	sbci	r27, 0xFD	; 253
    1670:	11 96       	adiw	r26, 0x01	; 1
    1672:	0d 90       	ld	r0, X+
    1674:	bc 91       	ld	r27, X
    1676:	a0 2d       	mov	r26, r0
    1678:	b5 83       	std	Z+5, r27	; 0x05
    167a:	a4 83       	std	Z+4, r26	; 0x04
    167c:	14 96       	adiw	r26, 0x04	; 4
    167e:	8d 91       	ld	r24, X+
    1680:	9c 91       	ld	r25, X
    1682:	15 97       	sbiw	r26, 0x05	; 5
    1684:	97 83       	std	Z+7, r25	; 0x07
    1686:	86 83       	std	Z+6, r24	; 0x06
    1688:	14 96       	adiw	r26, 0x04	; 4
    168a:	cd 91       	ld	r28, X+
    168c:	dc 91       	ld	r29, X
    168e:	15 97       	sbiw	r26, 0x05	; 5
    1690:	3b 83       	std	Y+3, r19	; 0x03
    1692:	2a 83       	std	Y+2, r18	; 0x02
    1694:	15 96       	adiw	r26, 0x05	; 5
    1696:	3c 93       	st	X, r19
    1698:	2e 93       	st	-X, r18
    169a:	14 97       	sbiw	r26, 0x04	; 4
    169c:	a6 89       	ldd	r26, Z+22	; 0x16
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	cd 01       	movw	r24, r26
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	a8 0f       	add	r26, r24
    16b0:	b9 1f       	adc	r27, r25
    16b2:	a3 55       	subi	r26, 0x53	; 83
    16b4:	bd 4f       	sbci	r27, 0xFD	; 253
    16b6:	b3 87       	std	Z+11, r27	; 0x0b
    16b8:	a2 87       	std	Z+10, r26	; 0x0a
    16ba:	8c 91       	ld	r24, X
    16bc:	8f 5f       	subi	r24, 0xFF	; 255
    16be:	8c 93       	st	X, r24
    16c0:	1c c0       	rjmp	.+56     	; 0x16fa <xTaskRemoveFromEventList+0x15a>
    16c2:	4e e8       	ldi	r20, 0x8E	; 142
    16c4:	52 e0       	ldi	r21, 0x02	; 2
    16c6:	da 01       	movw	r26, r20
    16c8:	11 96       	adiw	r26, 0x01	; 1
    16ca:	cd 91       	ld	r28, X+
    16cc:	dc 91       	ld	r29, X
    16ce:	12 97       	sbiw	r26, 0x02	; 2
    16d0:	d7 87       	std	Z+15, r29	; 0x0f
    16d2:	c6 87       	std	Z+14, r28	; 0x0e
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	91 8b       	std	Z+17, r25	; 0x11
    16da:	80 8b       	std	Z+16, r24	; 0x10
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	9d 81       	ldd	r25, Y+5	; 0x05
    16e0:	dc 01       	movw	r26, r24
    16e2:	13 96       	adiw	r26, 0x03	; 3
    16e4:	3c 93       	st	X, r19
    16e6:	2e 93       	st	-X, r18
    16e8:	12 97       	sbiw	r26, 0x02	; 2
    16ea:	3d 83       	std	Y+5, r19	; 0x05
    16ec:	2c 83       	std	Y+4, r18	; 0x04
    16ee:	55 8b       	std	Z+21, r21	; 0x15
    16f0:	44 8b       	std	Z+20, r20	; 0x14
    16f2:	da 01       	movw	r26, r20
    16f4:	8c 91       	ld	r24, X
    16f6:	8f 5f       	subi	r24, 0xFF	; 255
    16f8:	8c 93       	st	X, r24
    16fa:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <pxCurrentTCB>
    16fe:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <pxCurrentTCB+0x1>
    1702:	96 89       	ldd	r25, Z+22	; 0x16
    1704:	56 96       	adiw	r26, 0x16	; 22
    1706:	8c 91       	ld	r24, X
    1708:	89 17       	cp	r24, r25
    170a:	20 f4       	brcc	.+8      	; 0x1714 <xTaskRemoveFromEventList+0x174>
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <xYieldPending>
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <xTaskRemoveFromEventList+0x176>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <vTaskInternalSetTimeOutState>:
    171c:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <xNumOfOverflows>
    1720:	fc 01       	movw	r30, r24
    1722:	20 83       	st	Z, r18
    1724:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <xTickCount>
    1728:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <xTickCount+0x1>
    172c:	32 83       	std	Z+2, r19	; 0x02
    172e:	21 83       	std	Z+1, r18	; 0x01
    1730:	08 95       	ret

00001732 <xTaskCheckForTimeOut>:
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	0f 92       	push	r0
    173c:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <xTickCount>
    1740:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <xTickCount+0x1>
    1744:	db 01       	movw	r26, r22
    1746:	4d 91       	ld	r20, X+
    1748:	5c 91       	ld	r21, X
    174a:	4f 3f       	cpi	r20, 0xFF	; 255
    174c:	bf ef       	ldi	r27, 0xFF	; 255
    174e:	5b 07       	cpc	r21, r27
    1750:	11 f1       	breq	.+68     	; 0x1796 <xTaskCheckForTimeOut+0x64>
    1752:	ec 01       	movw	r28, r24
    1754:	e9 81       	ldd	r30, Y+1	; 0x01
    1756:	fa 81       	ldd	r31, Y+2	; 0x02
    1758:	a0 91 72 02 	lds	r26, 0x0272	; 0x800272 <xNumOfOverflows>
    175c:	b8 81       	ld	r27, Y
    175e:	ba 17       	cp	r27, r26
    1760:	41 f0       	breq	.+16     	; 0x1772 <xTaskCheckForTimeOut+0x40>
    1762:	2e 17       	cp	r18, r30
    1764:	3f 07       	cpc	r19, r31
    1766:	28 f0       	brcs	.+10     	; 0x1772 <xTaskCheckForTimeOut+0x40>
    1768:	fb 01       	movw	r30, r22
    176a:	11 82       	std	Z+1, r1	; 0x01
    176c:	10 82       	st	Z, r1
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	13 c0       	rjmp	.+38     	; 0x1798 <xTaskCheckForTimeOut+0x66>
    1772:	2e 1b       	sub	r18, r30
    1774:	3f 0b       	sbc	r19, r31
    1776:	24 17       	cp	r18, r20
    1778:	35 07       	cpc	r19, r21
    177a:	40 f4       	brcc	.+16     	; 0x178c <xTaskCheckForTimeOut+0x5a>
    177c:	fb 01       	movw	r30, r22
    177e:	42 1b       	sub	r20, r18
    1780:	53 0b       	sbc	r21, r19
    1782:	51 83       	std	Z+1, r21	; 0x01
    1784:	40 83       	st	Z, r20
    1786:	ca df       	rcall	.-108    	; 0x171c <vTaskInternalSetTimeOutState>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	06 c0       	rjmp	.+12     	; 0x1798 <xTaskCheckForTimeOut+0x66>
    178c:	db 01       	movw	r26, r22
    178e:	1d 92       	st	X+, r1
    1790:	1c 92       	st	X, r1
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <xTaskCheckForTimeOut+0x66>
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <vTaskMissedYield>:
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <xYieldPending>
    17a8:	08 95       	ret

000017aa <xTaskGetSchedulerState>:
    17aa:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <xSchedulerRunning>
    17ae:	88 23       	and	r24, r24
    17b0:	31 f0       	breq	.+12     	; 0x17be <xTaskGetSchedulerState+0x14>
    17b2:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
    17b6:	88 23       	and	r24, r24
    17b8:	21 f0       	breq	.+8      	; 0x17c2 <xTaskGetSchedulerState+0x18>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	08 95       	ret
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	08 95       	ret
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	08 95       	ret

000017c6 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    17d0:	89 2b       	or	r24, r25
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <xTaskPriorityDisinherit+0x10>
    17d4:	51 c0       	rjmp	.+162    	; 0x1878 <xTaskPriorityDisinherit+0xb2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    17d6:	82 a1       	ldd	r24, Z+34	; 0x22
    17d8:	81 50       	subi	r24, 0x01	; 1
    17da:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    17dc:	26 89       	ldd	r18, Z+22	; 0x16
    17de:	91 a1       	ldd	r25, Z+33	; 0x21
    17e0:	29 17       	cp	r18, r25
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <xTaskPriorityDisinherit+0x20>
    17e4:	4b c0       	rjmp	.+150    	; 0x187c <xTaskPriorityDisinherit+0xb6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    17e6:	81 11       	cpse	r24, r1
    17e8:	4b c0       	rjmp	.+150    	; 0x1880 <xTaskPriorityDisinherit+0xba>
    17ea:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    17ec:	8f 01       	movw	r16, r30
    17ee:	0e 5f       	subi	r16, 0xFE	; 254
    17f0:	1f 4f       	sbci	r17, 0xFF	; 255
    17f2:	c8 01       	movw	r24, r16
    17f4:	0e 94 18 02 	call	0x430	; 0x430 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    17f8:	89 a1       	ldd	r24, Y+33	; 0x21
    17fa:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    17fc:	24 e0       	ldi	r18, 0x04	; 4
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	28 1b       	sub	r18, r24
    1802:	31 09       	sbc	r19, r1
    1804:	3d 87       	std	Y+13, r19	; 0x0d
    1806:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    1808:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <uxTopReadyPriority>
    180c:	98 17       	cp	r25, r24
    180e:	10 f4       	brcc	.+4      	; 0x1814 <xTaskPriorityDisinherit+0x4e>
    1810:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <uxTopReadyPriority>
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	fc 01       	movw	r30, r24
    1818:	ee 0f       	add	r30, r30
    181a:	ff 1f       	adc	r31, r31
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	ee 0f       	add	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	8e 0f       	add	r24, r30
    1826:	9f 1f       	adc	r25, r31
    1828:	fc 01       	movw	r30, r24
    182a:	e3 55       	subi	r30, 0x53	; 83
    182c:	fd 4f       	sbci	r31, 0xFD	; 253
    182e:	01 80       	ldd	r0, Z+1	; 0x01
    1830:	f2 81       	ldd	r31, Z+2	; 0x02
    1832:	e0 2d       	mov	r30, r0
    1834:	fd 83       	std	Y+5, r31	; 0x05
    1836:	ec 83       	std	Y+4, r30	; 0x04
    1838:	84 81       	ldd	r24, Z+4	; 0x04
    183a:	95 81       	ldd	r25, Z+5	; 0x05
    183c:	9f 83       	std	Y+7, r25	; 0x07
    183e:	8e 83       	std	Y+6, r24	; 0x06
    1840:	a4 81       	ldd	r26, Z+4	; 0x04
    1842:	b5 81       	ldd	r27, Z+5	; 0x05
    1844:	13 96       	adiw	r26, 0x03	; 3
    1846:	1c 93       	st	X, r17
    1848:	0e 93       	st	-X, r16
    184a:	12 97       	sbiw	r26, 0x02	; 2
    184c:	15 83       	std	Z+5, r17	; 0x05
    184e:	04 83       	std	Z+4, r16	; 0x04
    1850:	ee 89       	ldd	r30, Y+22	; 0x16
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	cf 01       	movw	r24, r30
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	e8 0f       	add	r30, r24
    1864:	f9 1f       	adc	r31, r25
    1866:	e3 55       	subi	r30, 0x53	; 83
    1868:	fd 4f       	sbci	r31, 0xFD	; 253
    186a:	fb 87       	std	Y+11, r31	; 0x0b
    186c:	ea 87       	std	Y+10, r30	; 0x0a
    186e:	80 81       	ld	r24, Z
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <xTaskPriorityDisinherit+0xbc>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <xTaskPriorityDisinherit+0xbc>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <xTaskPriorityDisinherit+0xbc>
    1880:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	08 95       	ret

0000188c <prvInsertTimerInActiveList>:
    188c:	fc 01       	movw	r30, r24
    188e:	73 83       	std	Z+3, r23	; 0x03
    1890:	62 83       	std	Z+2, r22	; 0x02
    1892:	91 87       	std	Z+9, r25	; 0x09
    1894:	80 87       	std	Z+8, r24	; 0x08
    1896:	46 17       	cp	r20, r22
    1898:	57 07       	cpc	r21, r23
    189a:	90 f0       	brcs	.+36     	; 0x18c0 <prvInsertTimerInActiveList+0x34>
    189c:	42 1b       	sub	r20, r18
    189e:	53 0b       	sbc	r21, r19
    18a0:	84 85       	ldd	r24, Z+12	; 0x0c
    18a2:	95 85       	ldd	r25, Z+13	; 0x0d
    18a4:	48 17       	cp	r20, r24
    18a6:	59 07       	cpc	r21, r25
    18a8:	e0 f4       	brcc	.+56     	; 0x18e2 <prvInsertTimerInActiveList+0x56>
    18aa:	bf 01       	movw	r22, r30
    18ac:	6e 5f       	subi	r22, 0xFE	; 254
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <pxOverflowTimerList>
    18b4:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <pxOverflowTimerList+0x1>
    18b8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <vListInsert>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	08 95       	ret
    18c0:	42 17       	cp	r20, r18
    18c2:	53 07       	cpc	r21, r19
    18c4:	18 f4       	brcc	.+6      	; 0x18cc <prvInsertTimerInActiveList+0x40>
    18c6:	62 17       	cp	r22, r18
    18c8:	73 07       	cpc	r23, r19
    18ca:	68 f4       	brcc	.+26     	; 0x18e6 <prvInsertTimerInActiveList+0x5a>
    18cc:	bf 01       	movw	r22, r30
    18ce:	6e 5f       	subi	r22, 0xFE	; 254
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <pxCurrentTimerList>
    18d6:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <pxCurrentTimerList+0x1>
    18da:	0e 94 e7 01 	call	0x3ce	; 0x3ce <vListInsert>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	08 95       	ret
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	08 95       	ret
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	08 95       	ret

000018ea <prvCheckForValidListAndQueue>:
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	0f 92       	push	r0
    18f0:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <xTimerQueue>
    18f4:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <xTimerQueue+0x1>
    18f8:	89 2b       	or	r24, r25
    18fa:	e9 f4       	brne	.+58     	; 0x1936 <prvCheckForValidListAndQueue+0x4c>
    18fc:	86 ee       	ldi	r24, 0xE6	; 230
    18fe:	92 e0       	ldi	r25, 0x02	; 2
    1900:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vListInitialise>
    1904:	8d ed       	ldi	r24, 0xDD	; 221
    1906:	92 e0       	ldi	r25, 0x02	; 2
    1908:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vListInitialise>
    190c:	86 ee       	ldi	r24, 0xE6	; 230
    190e:	92 e0       	ldi	r25, 0x02	; 2
    1910:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <pxCurrentTimerList+0x1>
    1914:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <pxCurrentTimerList>
    1918:	8d ed       	ldi	r24, 0xDD	; 221
    191a:	92 e0       	ldi	r25, 0x02	; 2
    191c:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <pxOverflowTimerList+0x1>
    1920:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <pxOverflowTimerList>
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	65 e0       	ldi	r22, 0x05	; 5
    1928:	8a e0       	ldi	r24, 0x0A	; 10
    192a:	0e 94 80 04 	call	0x900	; 0x900 <xQueueGenericCreate>
    192e:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <xTimerQueue+0x1>
    1932:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <xTimerQueue>
    1936:	0f 90       	pop	r0
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	08 95       	ret

0000193c <xTimerCreateTimerTask>:
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	d3 df       	rcall	.-90     	; 0x18ea <prvCheckForValidListAndQueue>
    1944:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <xTimerQueue>
    1948:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <xTimerQueue+0x1>
    194c:	89 2b       	or	r24, r25
    194e:	89 f0       	breq	.+34     	; 0x1972 <xTimerCreateTimerTask+0x36>
    1950:	0f 2e       	mov	r0, r31
    1952:	f5 ed       	ldi	r31, 0xD5	; 213
    1954:	ef 2e       	mov	r14, r31
    1956:	f2 e0       	ldi	r31, 0x02	; 2
    1958:	ff 2e       	mov	r15, r31
    195a:	f0 2d       	mov	r31, r0
    195c:	03 e0       	ldi	r16, 0x03	; 3
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	45 e5       	ldi	r20, 0x55	; 85
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	6c e0       	ldi	r22, 0x0C	; 12
    1968:	72 e0       	ldi	r23, 0x02	; 2
    196a:	82 eb       	ldi	r24, 0xB2	; 178
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	f3 d9       	rcall	.-3098   	; 0xd56 <xTaskCreate>
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <xTimerCreateTimerTask+0x38>
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	0f 91       	pop	r16
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	08 95       	ret

0000197c <xTimerCreate>:
    197c:	8f 92       	push	r8
    197e:	9f 92       	push	r9
    1980:	af 92       	push	r10
    1982:	bf 92       	push	r11
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	4c 01       	movw	r8, r24
    1994:	5b 01       	movw	r10, r22
    1996:	f4 2e       	mov	r15, r20
    1998:	69 01       	movw	r12, r18
    199a:	83 e1       	ldi	r24, 0x13	; 19
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 57 03 	call	0x6ae	; 0x6ae <pvPortMalloc>
    19a2:	ec 01       	movw	r28, r24
    19a4:	89 2b       	or	r24, r25
    19a6:	99 f0       	breq	.+38     	; 0x19ce <xTimerCreate+0x52>
    19a8:	1a 8a       	std	Y+18, r1	; 0x12
    19aa:	9f df       	rcall	.-194    	; 0x18ea <prvCheckForValidListAndQueue>
    19ac:	99 82       	std	Y+1, r9	; 0x01
    19ae:	88 82       	st	Y, r8
    19b0:	bd 86       	std	Y+13, r11	; 0x0d
    19b2:	ac 86       	std	Y+12, r10	; 0x0c
    19b4:	df 86       	std	Y+15, r13	; 0x0f
    19b6:	ce 86       	std	Y+14, r12	; 0x0e
    19b8:	19 8b       	std	Y+17, r17	; 0x11
    19ba:	08 8b       	std	Y+16, r16	; 0x10
    19bc:	ce 01       	movw	r24, r28
    19be:	02 96       	adiw	r24, 0x02	; 2
    19c0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vListInitialiseItem>
    19c4:	ff 20       	and	r15, r15
    19c6:	19 f0       	breq	.+6      	; 0x19ce <xTimerCreate+0x52>
    19c8:	8a 89       	ldd	r24, Y+18	; 0x12
    19ca:	84 60       	ori	r24, 0x04	; 4
    19cc:	8a 8b       	std	Y+18, r24	; 0x12
    19ce:	ce 01       	movw	r24, r28
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	bf 90       	pop	r11
    19e0:	af 90       	pop	r10
    19e2:	9f 90       	pop	r9
    19e4:	8f 90       	pop	r8
    19e6:	08 95       	ret

000019e8 <xTimerGenericCommand>:
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <xTimerGenericCommand+0xa>
    19f2:	1f 92       	push	r1
    19f4:	1f 92       	push	r1
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <xTimerQueue>
    19fe:	f0 91 d8 02 	lds	r31, 0x02D8	; 0x8002d8 <xTimerQueue+0x1>
    1a02:	30 97       	sbiw	r30, 0x00	; 0
    1a04:	61 f1       	breq	.+88     	; 0x1a5e <xTimerGenericCommand+0x76>
    1a06:	d9 01       	movw	r26, r18
    1a08:	69 83       	std	Y+1, r22	; 0x01
    1a0a:	5b 83       	std	Y+3, r21	; 0x03
    1a0c:	4a 83       	std	Y+2, r20	; 0x02
    1a0e:	9d 83       	std	Y+5, r25	; 0x05
    1a10:	8c 83       	std	Y+4, r24	; 0x04
    1a12:	66 30       	cpi	r22, 0x06	; 6
    1a14:	e4 f4       	brge	.+56     	; 0x1a4e <xTimerGenericCommand+0x66>
    1a16:	c9 de       	rcall	.-622    	; 0x17aa <xTaskGetSchedulerState>
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	61 f4       	brne	.+24     	; 0x1a34 <xTimerGenericCommand+0x4c>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	a8 01       	movw	r20, r16
    1a20:	be 01       	movw	r22, r28
    1a22:	6f 5f       	subi	r22, 0xFF	; 255
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255
    1a26:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <xTimerQueue>
    1a2a:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <xTimerQueue+0x1>
    1a2e:	0e 94 a1 04 	call	0x942	; 0x942 <xQueueGenericSend>
    1a32:	16 c0       	rjmp	.+44     	; 0x1a60 <xTimerGenericCommand+0x78>
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	be 01       	movw	r22, r28
    1a3c:	6f 5f       	subi	r22, 0xFF	; 255
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <xTimerQueue>
    1a44:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <xTimerQueue+0x1>
    1a48:	0e 94 a1 04 	call	0x942	; 0x942 <xQueueGenericSend>
    1a4c:	09 c0       	rjmp	.+18     	; 0x1a60 <xTimerGenericCommand+0x78>
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	ad 01       	movw	r20, r26
    1a52:	be 01       	movw	r22, r28
    1a54:	6f 5f       	subi	r22, 0xFF	; 255
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	cf 01       	movw	r24, r30
    1a5a:	05 d8       	rcall	.-4086   	; 0xa66 <xQueueGenericSendFromISR>
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <xTimerGenericCommand+0x78>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	08 95       	ret

00001a74 <prvSampleTimeNow>:
    1a74:	af 92       	push	r10
    1a76:	bf 92       	push	r11
    1a78:	cf 92       	push	r12
    1a7a:	df 92       	push	r13
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	6c 01       	movw	r12, r24
    1a8a:	c8 da       	rcall	.-2672   	; 0x101c <xTaskGetTickCount>
    1a8c:	7c 01       	movw	r14, r24
    1a8e:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <xLastTime.2433>
    1a92:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <xLastTime.2433+0x1>
    1a96:	e8 16       	cp	r14, r24
    1a98:	f9 06       	cpc	r15, r25
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <prvSampleTimeNow+0x2a>
    1a9c:	47 c0       	rjmp	.+142    	; 0x1b2c <prvSampleTimeNow+0xb8>
    1a9e:	2f c0       	rjmp	.+94     	; 0x1afe <prvSampleTimeNow+0x8a>
    1aa0:	05 80       	ldd	r0, Z+5	; 0x05
    1aa2:	f6 81       	ldd	r31, Z+6	; 0x06
    1aa4:	e0 2d       	mov	r30, r0
    1aa6:	a0 80       	ld	r10, Z
    1aa8:	b1 80       	ldd	r11, Z+1	; 0x01
    1aaa:	c6 81       	ldd	r28, Z+6	; 0x06
    1aac:	d7 81       	ldd	r29, Z+7	; 0x07
    1aae:	8e 01       	movw	r16, r28
    1ab0:	0e 5f       	subi	r16, 0xFE	; 254
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	c8 01       	movw	r24, r16
    1ab6:	0e 94 18 02 	call	0x430	; 0x430 <uxListRemove>
    1aba:	e8 89       	ldd	r30, Y+16	; 0x10
    1abc:	f9 89       	ldd	r31, Y+17	; 0x11
    1abe:	ce 01       	movw	r24, r28
    1ac0:	19 95       	eicall
    1ac2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac4:	82 ff       	sbrs	r24, 2
    1ac6:	1b c0       	rjmp	.+54     	; 0x1afe <prvSampleTimeNow+0x8a>
    1ac8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aca:	9d 85       	ldd	r25, Y+13	; 0x0d
    1acc:	8a 0d       	add	r24, r10
    1ace:	9b 1d       	adc	r25, r11
    1ad0:	a8 16       	cp	r10, r24
    1ad2:	b9 06       	cpc	r11, r25
    1ad4:	60 f4       	brcc	.+24     	; 0x1aee <prvSampleTimeNow+0x7a>
    1ad6:	9b 83       	std	Y+3, r25	; 0x03
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
    1ada:	d9 87       	std	Y+9, r29	; 0x09
    1adc:	c8 87       	std	Y+8, r28	; 0x08
    1ade:	b8 01       	movw	r22, r16
    1ae0:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <pxCurrentTimerList>
    1ae4:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <pxCurrentTimerList+0x1>
    1ae8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <vListInsert>
    1aec:	08 c0       	rjmp	.+16     	; 0x1afe <prvSampleTimeNow+0x8a>
    1aee:	00 e0       	ldi	r16, 0x00	; 0
    1af0:	10 e0       	ldi	r17, 0x00	; 0
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	a5 01       	movw	r20, r10
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	ce 01       	movw	r24, r28
    1afc:	75 df       	rcall	.-278    	; 0x19e8 <xTimerGenericCommand>
    1afe:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <pxCurrentTimerList>
    1b02:	f0 91 dc 02 	lds	r31, 0x02DC	; 0x8002dc <pxCurrentTimerList+0x1>
    1b06:	80 81       	ld	r24, Z
    1b08:	81 11       	cpse	r24, r1
    1b0a:	ca cf       	rjmp	.-108    	; 0x1aa0 <prvSampleTimeNow+0x2c>
    1b0c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <pxOverflowTimerList>
    1b10:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <pxOverflowTimerList+0x1>
    1b14:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <pxCurrentTimerList+0x1>
    1b18:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <pxCurrentTimerList>
    1b1c:	f0 93 da 02 	sts	0x02DA, r31	; 0x8002da <pxOverflowTimerList+0x1>
    1b20:	e0 93 d9 02 	sts	0x02D9, r30	; 0x8002d9 <pxOverflowTimerList>
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	f6 01       	movw	r30, r12
    1b28:	80 83       	st	Z, r24
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <prvSampleTimeNow+0xbc>
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	10 82       	st	Z, r1
    1b30:	f0 92 d4 02 	sts	0x02D4, r15	; 0x8002d4 <xLastTime.2433+0x1>
    1b34:	e0 92 d3 02 	sts	0x02D3, r14	; 0x8002d3 <xLastTime.2433>
    1b38:	c7 01       	movw	r24, r14
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	cf 90       	pop	r12
    1b4a:	bf 90       	pop	r11
    1b4c:	af 90       	pop	r10
    1b4e:	08 95       	ret

00001b50 <pvTimerGetTimerID>:
        Timer_t * const pxTimer = xTimer;
        void * pvReturn;

        configASSERT( xTimer );

        taskENTER_CRITICAL();
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	0f 92       	push	r0
        {
            pvReturn = pxTimer->pvTimerID;
    1b56:	fc 01       	movw	r30, r24
    1b58:	86 85       	ldd	r24, Z+14	; 0x0e
    1b5a:	97 85       	ldd	r25, Z+15	; 0x0f
        }
        taskEXIT_CRITICAL();
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63

        return pvReturn;
    }
    1b60:	08 95       	ret

00001b62 <vTimerSetTimerID>:
    {
        Timer_t * const pxTimer = xTimer;

        configASSERT( xTimer );

        taskENTER_CRITICAL();
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	0f 92       	push	r0
        {
            pxTimer->pvTimerID = pvNewID;
    1b68:	fc 01       	movw	r30, r24
    1b6a:	77 87       	std	Z+15, r23	; 0x0f
    1b6c:	66 87       	std	Z+14, r22	; 0x0e
        }
        taskEXIT_CRITICAL();
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	08 95       	ret

00001b74 <usart_init>:


void usart_init()
{
	
	UBRR0 = 0x67;
    1b74:	87 e6       	ldi	r24, 0x67	; 103
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    1b7c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1b80:	88 e1       	ldi	r24, 0x18	; 24
    1b82:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    1b86:	8e e0       	ldi	r24, 0x0E	; 14
    1b88:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
    1b8c:	08 95       	ret

00001b8e <usart_send>:
}

void usart_send(char *data )
{
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
	
	while(*data)
    1b92:	fc 01       	movw	r30, r24
    1b94:	20 81       	ld	r18, Z
    1b96:	22 23       	and	r18, r18
    1b98:	69 f0       	breq	.+26     	; 0x1bb4 <usart_send+0x26>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	11 96       	adiw	r26, 0x01	; 1
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
    1b9e:	e0 ec       	ldi	r30, 0xC0	; 192
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
		
		UDR0 = *data;
    1ba2:	c6 ec       	ldi	r28, 0xC6	; 198
    1ba4:	d0 e0       	ldi	r29, 0x00	; 0
void usart_send(char *data )
{
	
	while(*data)
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
    1ba6:	90 81       	ld	r25, Z
    1ba8:	95 ff       	sbrs	r25, 5
    1baa:	fd cf       	rjmp	.-6      	; 0x1ba6 <usart_send+0x18>
		
		UDR0 = *data;
    1bac:	28 83       	st	Y, r18
}

void usart_send(char *data )
{
	
	while(*data)
    1bae:	2d 91       	ld	r18, X+
    1bb0:	21 11       	cpse	r18, r1
    1bb2:	f9 cf       	rjmp	.-14     	; 0x1ba6 <usart_send+0x18>
		UDR0 = *data;
		data++;
	}
	
	
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	08 95       	ret

00001bba <AOneShotTimerCallback>:

for(;;);
}

void AOneShotTimerCallback( TimerHandle_t xTimer )
{
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	2a 97       	sbiw	r28, 0x0a	; 10
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
TickType_t xTimeNow;
char ticks[10];

xTimeNow = xTaskGetTickCount();          // Getting Tick Count
    1bd2:	24 da       	rcall	.-3000   	; 0x101c <xTaskGetTickCount>
    1bd4:	18 2f       	mov	r17, r24
    1bd6:	09 2f       	mov	r16, r25

usart_send((char*)"One Shot is executing ---> ");
    1bd8:	84 e1       	ldi	r24, 0x14	; 20
    1bda:	92 e0       	ldi	r25, 0x02	; 2
    1bdc:	d8 df       	rcall	.-80     	; 0x1b8e <usart_send>
sprintf(ticks, "%d\r",xTimeNow);
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	84 e5       	ldi	r24, 0x54	; 84
    1be4:	92 e0       	ldi	r25, 0x02	; 2
    1be6:	9f 93       	push	r25
    1be8:	8f 93       	push	r24
    1bea:	8e 01       	movw	r16, r28
    1bec:	0f 5f       	subi	r16, 0xFF	; 255
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	1f 93       	push	r17
    1bf2:	0f 93       	push	r16
usart_send(ticks);
    1bf4:	bd d1       	rcall	.+890    	; 0x1f70 <sprintf>
    1bf6:	c8 01       	movw	r24, r16
    1bf8:	ca df       	rcall	.-108    	; 0x1b8e <usart_send>

}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	2a 96       	adiw	r28, 0x0a	; 10
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	08 95       	ret

00001c1c <AutoReloadTimerCallback>:

void AutoReloadTimerCallback(TimerHandle_t xTimer)
{
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	64 97       	sbiw	r28, 0x14	; 20
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	7c 01       	movw	r14, r24
TickType_t xTimerNow;
char ticks1[20];

int ulExecutionCount;

ulExecutionCount = ( int ) pvTimerGetTimerID( xTimer );   // Getting the Timer Id
    1c3a:	8a df       	rcall	.-236    	; 0x1b50 <pvTimerGetTimerID>
ulExecutionCount++;
    1c3c:	8c 01       	movw	r16, r24
    1c3e:	0f 5f       	subi	r16, 0xFF	; 255
    1c40:	1f 4f       	sbci	r17, 0xFF	; 255
vTimerSetTimerID( xTimer, ( void * ) ulExecutionCount );  // Setting the timer ID
    1c42:	b8 01       	movw	r22, r16
    1c44:	c7 01       	movw	r24, r14


xTimerNow = xTaskGetTickCount();                   // Getting Tick counts.
    1c46:	8d df       	rcall	.-230    	; 0x1b62 <vTimerSetTimerID>
    1c48:	e9 d9       	rcall	.-3118   	; 0x101c <xTaskGetTickCount>
    1c4a:	f8 2e       	mov	r15, r24

usart_send((char*)"Auto reload is executing ---> ");
    1c4c:	e9 2e       	mov	r14, r25
    1c4e:	80 e3       	ldi	r24, 0x30	; 48
    1c50:	92 e0       	ldi	r25, 0x02	; 2
    1c52:	9d df       	rcall	.-198    	; 0x1b8e <usart_send>
sprintf(ticks1, "%d,  %d\r",xTimerNow, ulExecutionCount);
    1c54:	1f 93       	push	r17
    1c56:	0f 93       	push	r16
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	8f e4       	ldi	r24, 0x4F	; 79
    1c5e:	92 e0       	ldi	r25, 0x02	; 2
    1c60:	9f 93       	push	r25
    1c62:	8f 93       	push	r24
    1c64:	8e 01       	movw	r16, r28
    1c66:	0f 5f       	subi	r16, 0xFF	; 255
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	1f 93       	push	r17
    1c6c:	0f 93       	push	r16
usart_send(ticks1);
    1c6e:	80 d1       	rcall	.+768    	; 0x1f70 <sprintf>
    1c70:	c8 01       	movw	r24, r16
    1c72:	8d df       	rcall	.-230    	; 0x1b8e <usart_send>

}
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	64 96       	adiw	r28, 0x14	; 20
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	08 95       	ret

00001c98 <vApplicationIdleHook>:

void AutoReloadTimerCallback(TimerHandle_t xTimer);
void AOneShotTimerCallback( TimerHandle_t xTimer );

void vApplicationIdleHook( void )
{
    1c98:	08 95       	ret

00001c9a <main>:
}

int main(void)
{
usart_init();
    1c9a:	6c df       	rcall	.-296    	; 0x1b74 <usart_init>
TimerHandle_t xAutoReloadTimer, xOneShotTimer;       // Timer Handles
BaseType_t    xTimer1Started, xTimer2Started;


xOneShotTimer = xTimerCreate("OneShot", mainONE_SHOT_TIMER_PERIOD, pdFALSE, 0, AOneShotTimerCallback);   // Creating the timers.
    1c9c:	0d ed       	ldi	r16, 0xDD	; 221
    1c9e:	1d e0       	ldi	r17, 0x0D	; 13
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	6e ec       	ldi	r22, 0xCE	; 206
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	88 e5       	ldi	r24, 0x58	; 88
    1cac:	92 e0       	ldi	r25, 0x02	; 2
    1cae:	66 de       	rcall	.-820    	; 0x197c <xTimerCreate>
    1cb0:	ec 01       	movw	r28, r24

xAutoReloadTimer = xTimerCreate("AutoReload", mainAUTO_RELOAD_TIMER_PERIOD, pdTRUE, 0, AutoReloadTimerCallback);  // Creating the timers.
    1cb2:	0e e0       	ldi	r16, 0x0E	; 14
    1cb4:	1e e0       	ldi	r17, 0x0E	; 14
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	6f e1       	ldi	r22, 0x1F	; 31
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	80 e6       	ldi	r24, 0x60	; 96
    1cc2:	92 e0       	ldi	r25, 0x02	; 2
    1cc4:	5b de       	rcall	.-842    	; 0x197c <xTimerCreate>
    1cc6:	7c 01       	movw	r14, r24

if ((xOneShotTimer != NULL)  &&  (xAutoReloadTimer != NULL))
    1cc8:	20 97       	sbiw	r28, 0x00	; 0
    1cca:	c1 f0       	breq	.+48     	; 0x1cfc <main+0x62>
    1ccc:	89 2b       	or	r24, r25
{
xTimer1Started = xTimerStart(xOneShotTimer, 0);        //  Starting the Timers (This will send commands to 'command Queue')
    1cce:	b1 f0       	breq	.+44     	; 0x1cfc <main+0x62>
    1cd0:	a5 d9       	rcall	.-3254   	; 0x101c <xTaskGetTickCount>
    1cd2:	00 e0       	ldi	r16, 0x00	; 0
    1cd4:	10 e0       	ldi	r17, 0x00	; 0
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	ac 01       	movw	r20, r24
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	ce 01       	movw	r24, r28
    1ce0:	83 de       	rcall	.-762    	; 0x19e8 <xTimerGenericCommand>
xTimer2Started = xTimerStart(xAutoReloadTimer, 0);
    1ce2:	c8 2f       	mov	r28, r24
    1ce4:	9b d9       	rcall	.-3274   	; 0x101c <xTaskGetTickCount>
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	ac 01       	movw	r20, r24
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	c7 01       	movw	r24, r14

if( (xTimer1Started == pdPASS) && (xTimer2Started == pdPASS))
    1cf0:	7b de       	rcall	.-778    	; 0x19e8 <xTimerGenericCommand>
    1cf2:	c1 30       	cpi	r28, 0x01	; 1
    1cf4:	19 f4       	brne	.+6      	; 0x1cfc <main+0x62>
    1cf6:	81 30       	cpi	r24, 0x01	; 1

{
vTaskStartScheduler();			// Starting the Scheduler...
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <main+0x62>
    1cfa:	5d d9       	rcall	.-3398   	; 0xfb6 <vTaskStartScheduler>
    1cfc:	ff cf       	rjmp	.-2      	; 0x1cfc <main+0x62>

00001cfe <__tablejump2__>:
    1cfe:	ee 0f       	add	r30, r30
    1d00:	ff 1f       	adc	r31, r31
    1d02:	88 1f       	adc	r24, r24
    1d04:	8b bf       	out	0x3b, r24	; 59
    1d06:	07 90       	elpm	r0, Z+
    1d08:	f6 91       	elpm	r31, Z
    1d0a:	e0 2d       	mov	r30, r0
    1d0c:	19 94       	eijmp

00001d0e <malloc>:
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	82 30       	cpi	r24, 0x02	; 2
    1d18:	91 05       	cpc	r25, r1
    1d1a:	10 f4       	brcc	.+4      	; 0x1d20 <malloc+0x12>
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <__flp>
    1d24:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <__flp+0x1>
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	a0 e0       	ldi	r26, 0x00	; 0
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	30 97       	sbiw	r30, 0x00	; 0
    1d32:	19 f1       	breq	.+70     	; 0x1d7a <malloc+0x6c>
    1d34:	40 81       	ld	r20, Z
    1d36:	51 81       	ldd	r21, Z+1	; 0x01
    1d38:	02 81       	ldd	r16, Z+2	; 0x02
    1d3a:	13 81       	ldd	r17, Z+3	; 0x03
    1d3c:	48 17       	cp	r20, r24
    1d3e:	59 07       	cpc	r21, r25
    1d40:	c8 f0       	brcs	.+50     	; 0x1d74 <malloc+0x66>
    1d42:	84 17       	cp	r24, r20
    1d44:	95 07       	cpc	r25, r21
    1d46:	69 f4       	brne	.+26     	; 0x1d62 <malloc+0x54>
    1d48:	10 97       	sbiw	r26, 0x00	; 0
    1d4a:	31 f0       	breq	.+12     	; 0x1d58 <malloc+0x4a>
    1d4c:	12 96       	adiw	r26, 0x02	; 2
    1d4e:	0c 93       	st	X, r16
    1d50:	12 97       	sbiw	r26, 0x02	; 2
    1d52:	13 96       	adiw	r26, 0x03	; 3
    1d54:	1c 93       	st	X, r17
    1d56:	27 c0       	rjmp	.+78     	; 0x1da6 <malloc+0x98>
    1d58:	00 93 f1 02 	sts	0x02F1, r16	; 0x8002f1 <__flp>
    1d5c:	10 93 f2 02 	sts	0x02F2, r17	; 0x8002f2 <__flp+0x1>
    1d60:	22 c0       	rjmp	.+68     	; 0x1da6 <malloc+0x98>
    1d62:	21 15       	cp	r18, r1
    1d64:	31 05       	cpc	r19, r1
    1d66:	19 f0       	breq	.+6      	; 0x1d6e <malloc+0x60>
    1d68:	42 17       	cp	r20, r18
    1d6a:	53 07       	cpc	r21, r19
    1d6c:	18 f4       	brcc	.+6      	; 0x1d74 <malloc+0x66>
    1d6e:	9a 01       	movw	r18, r20
    1d70:	bd 01       	movw	r22, r26
    1d72:	ef 01       	movw	r28, r30
    1d74:	df 01       	movw	r26, r30
    1d76:	f8 01       	movw	r30, r16
    1d78:	db cf       	rjmp	.-74     	; 0x1d30 <malloc+0x22>
    1d7a:	21 15       	cp	r18, r1
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	f9 f0       	breq	.+62     	; 0x1dbe <malloc+0xb0>
    1d80:	28 1b       	sub	r18, r24
    1d82:	39 0b       	sbc	r19, r25
    1d84:	24 30       	cpi	r18, 0x04	; 4
    1d86:	31 05       	cpc	r19, r1
    1d88:	80 f4       	brcc	.+32     	; 0x1daa <malloc+0x9c>
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8e:	61 15       	cp	r22, r1
    1d90:	71 05       	cpc	r23, r1
    1d92:	21 f0       	breq	.+8      	; 0x1d9c <malloc+0x8e>
    1d94:	fb 01       	movw	r30, r22
    1d96:	93 83       	std	Z+3, r25	; 0x03
    1d98:	82 83       	std	Z+2, r24	; 0x02
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <malloc+0x96>
    1d9c:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <__flp+0x1>
    1da0:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <__flp>
    1da4:	fe 01       	movw	r30, r28
    1da6:	32 96       	adiw	r30, 0x02	; 2
    1da8:	44 c0       	rjmp	.+136    	; 0x1e32 <malloc+0x124>
    1daa:	fe 01       	movw	r30, r28
    1dac:	e2 0f       	add	r30, r18
    1dae:	f3 1f       	adc	r31, r19
    1db0:	81 93       	st	Z+, r24
    1db2:	91 93       	st	Z+, r25
    1db4:	22 50       	subi	r18, 0x02	; 2
    1db6:	31 09       	sbc	r19, r1
    1db8:	39 83       	std	Y+1, r19	; 0x01
    1dba:	28 83       	st	Y, r18
    1dbc:	3a c0       	rjmp	.+116    	; 0x1e32 <malloc+0x124>
    1dbe:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <__brkval>
    1dc2:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <__brkval+0x1>
    1dc6:	23 2b       	or	r18, r19
    1dc8:	41 f4       	brne	.+16     	; 0x1dda <malloc+0xcc>
    1dca:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1dce:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1dd2:	30 93 f0 02 	sts	0x02F0, r19	; 0x8002f0 <__brkval+0x1>
    1dd6:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <__brkval>
    1dda:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1dde:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1de2:	21 15       	cp	r18, r1
    1de4:	31 05       	cpc	r19, r1
    1de6:	41 f4       	brne	.+16     	; 0x1df8 <malloc+0xea>
    1de8:	2d b7       	in	r18, 0x3d	; 61
    1dea:	3e b7       	in	r19, 0x3e	; 62
    1dec:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1df0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1df4:	24 1b       	sub	r18, r20
    1df6:	35 0b       	sbc	r19, r21
    1df8:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <__brkval>
    1dfc:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <__brkval+0x1>
    1e00:	e2 17       	cp	r30, r18
    1e02:	f3 07       	cpc	r31, r19
    1e04:	a0 f4       	brcc	.+40     	; 0x1e2e <malloc+0x120>
    1e06:	2e 1b       	sub	r18, r30
    1e08:	3f 0b       	sbc	r19, r31
    1e0a:	28 17       	cp	r18, r24
    1e0c:	39 07       	cpc	r19, r25
    1e0e:	78 f0       	brcs	.+30     	; 0x1e2e <malloc+0x120>
    1e10:	ac 01       	movw	r20, r24
    1e12:	4e 5f       	subi	r20, 0xFE	; 254
    1e14:	5f 4f       	sbci	r21, 0xFF	; 255
    1e16:	24 17       	cp	r18, r20
    1e18:	35 07       	cpc	r19, r21
    1e1a:	48 f0       	brcs	.+18     	; 0x1e2e <malloc+0x120>
    1e1c:	4e 0f       	add	r20, r30
    1e1e:	5f 1f       	adc	r21, r31
    1e20:	50 93 f0 02 	sts	0x02F0, r21	; 0x8002f0 <__brkval+0x1>
    1e24:	40 93 ef 02 	sts	0x02EF, r20	; 0x8002ef <__brkval>
    1e28:	81 93       	st	Z+, r24
    1e2a:	91 93       	st	Z+, r25
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <malloc+0x124>
    1e2e:	e0 e0       	ldi	r30, 0x00	; 0
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	cf 01       	movw	r24, r30
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	08 95       	ret

00001e3e <free>:
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <free+0xa>
    1e46:	81 c0       	rjmp	.+258    	; 0x1f4a <free+0x10c>
    1e48:	fc 01       	movw	r30, r24
    1e4a:	32 97       	sbiw	r30, 0x02	; 2
    1e4c:	13 82       	std	Z+3, r1	; 0x03
    1e4e:	12 82       	std	Z+2, r1	; 0x02
    1e50:	a0 91 f1 02 	lds	r26, 0x02F1	; 0x8002f1 <__flp>
    1e54:	b0 91 f2 02 	lds	r27, 0x02F2	; 0x8002f2 <__flp+0x1>
    1e58:	10 97       	sbiw	r26, 0x00	; 0
    1e5a:	81 f4       	brne	.+32     	; 0x1e7c <free+0x3e>
    1e5c:	20 81       	ld	r18, Z
    1e5e:	31 81       	ldd	r19, Z+1	; 0x01
    1e60:	82 0f       	add	r24, r18
    1e62:	93 1f       	adc	r25, r19
    1e64:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <__brkval>
    1e68:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <__brkval+0x1>
    1e6c:	28 17       	cp	r18, r24
    1e6e:	39 07       	cpc	r19, r25
    1e70:	51 f5       	brne	.+84     	; 0x1ec6 <free+0x88>
    1e72:	f0 93 f0 02 	sts	0x02F0, r31	; 0x8002f0 <__brkval+0x1>
    1e76:	e0 93 ef 02 	sts	0x02EF, r30	; 0x8002ef <__brkval>
    1e7a:	67 c0       	rjmp	.+206    	; 0x1f4a <free+0x10c>
    1e7c:	ed 01       	movw	r28, r26
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	ce 17       	cp	r28, r30
    1e84:	df 07       	cpc	r29, r31
    1e86:	40 f4       	brcc	.+16     	; 0x1e98 <free+0x5a>
    1e88:	4a 81       	ldd	r20, Y+2	; 0x02
    1e8a:	5b 81       	ldd	r21, Y+3	; 0x03
    1e8c:	9e 01       	movw	r18, r28
    1e8e:	41 15       	cp	r20, r1
    1e90:	51 05       	cpc	r21, r1
    1e92:	f1 f0       	breq	.+60     	; 0x1ed0 <free+0x92>
    1e94:	ea 01       	movw	r28, r20
    1e96:	f5 cf       	rjmp	.-22     	; 0x1e82 <free+0x44>
    1e98:	d3 83       	std	Z+3, r29	; 0x03
    1e9a:	c2 83       	std	Z+2, r28	; 0x02
    1e9c:	40 81       	ld	r20, Z
    1e9e:	51 81       	ldd	r21, Z+1	; 0x01
    1ea0:	84 0f       	add	r24, r20
    1ea2:	95 1f       	adc	r25, r21
    1ea4:	c8 17       	cp	r28, r24
    1ea6:	d9 07       	cpc	r29, r25
    1ea8:	59 f4       	brne	.+22     	; 0x1ec0 <free+0x82>
    1eaa:	88 81       	ld	r24, Y
    1eac:	99 81       	ldd	r25, Y+1	; 0x01
    1eae:	84 0f       	add	r24, r20
    1eb0:	95 1f       	adc	r25, r21
    1eb2:	02 96       	adiw	r24, 0x02	; 2
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	80 83       	st	Z, r24
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	93 83       	std	Z+3, r25	; 0x03
    1ebe:	82 83       	std	Z+2, r24	; 0x02
    1ec0:	21 15       	cp	r18, r1
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	29 f4       	brne	.+10     	; 0x1ed0 <free+0x92>
    1ec6:	f0 93 f2 02 	sts	0x02F2, r31	; 0x8002f2 <__flp+0x1>
    1eca:	e0 93 f1 02 	sts	0x02F1, r30	; 0x8002f1 <__flp>
    1ece:	3d c0       	rjmp	.+122    	; 0x1f4a <free+0x10c>
    1ed0:	e9 01       	movw	r28, r18
    1ed2:	fb 83       	std	Y+3, r31	; 0x03
    1ed4:	ea 83       	std	Y+2, r30	; 0x02
    1ed6:	49 91       	ld	r20, Y+
    1ed8:	59 91       	ld	r21, Y+
    1eda:	c4 0f       	add	r28, r20
    1edc:	d5 1f       	adc	r29, r21
    1ede:	ec 17       	cp	r30, r28
    1ee0:	fd 07       	cpc	r31, r29
    1ee2:	61 f4       	brne	.+24     	; 0x1efc <free+0xbe>
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	84 0f       	add	r24, r20
    1eea:	95 1f       	adc	r25, r21
    1eec:	02 96       	adiw	r24, 0x02	; 2
    1eee:	e9 01       	movw	r28, r18
    1ef0:	99 83       	std	Y+1, r25	; 0x01
    1ef2:	88 83       	st	Y, r24
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	9b 83       	std	Y+3, r25	; 0x03
    1efa:	8a 83       	std	Y+2, r24	; 0x02
    1efc:	e0 e0       	ldi	r30, 0x00	; 0
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	12 96       	adiw	r26, 0x02	; 2
    1f02:	8d 91       	ld	r24, X+
    1f04:	9c 91       	ld	r25, X
    1f06:	13 97       	sbiw	r26, 0x03	; 3
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <free+0xd4>
    1f0c:	fd 01       	movw	r30, r26
    1f0e:	dc 01       	movw	r26, r24
    1f10:	f7 cf       	rjmp	.-18     	; 0x1f00 <free+0xc2>
    1f12:	8d 91       	ld	r24, X+
    1f14:	9c 91       	ld	r25, X
    1f16:	11 97       	sbiw	r26, 0x01	; 1
    1f18:	9d 01       	movw	r18, r26
    1f1a:	2e 5f       	subi	r18, 0xFE	; 254
    1f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1e:	82 0f       	add	r24, r18
    1f20:	93 1f       	adc	r25, r19
    1f22:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <__brkval>
    1f26:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <__brkval+0x1>
    1f2a:	28 17       	cp	r18, r24
    1f2c:	39 07       	cpc	r19, r25
    1f2e:	69 f4       	brne	.+26     	; 0x1f4a <free+0x10c>
    1f30:	30 97       	sbiw	r30, 0x00	; 0
    1f32:	29 f4       	brne	.+10     	; 0x1f3e <free+0x100>
    1f34:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <__flp+0x1>
    1f38:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <__flp>
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <free+0x104>
    1f3e:	13 82       	std	Z+3, r1	; 0x03
    1f40:	12 82       	std	Z+2, r1	; 0x02
    1f42:	b0 93 f0 02 	sts	0x02F0, r27	; 0x8002f0 <__brkval+0x1>
    1f46:	a0 93 ef 02 	sts	0x02EF, r26	; 0x8002ef <__brkval>
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	08 95       	ret

00001f50 <memcpy>:
    1f50:	fb 01       	movw	r30, r22
    1f52:	dc 01       	movw	r26, r24
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <memcpy+0xa>
    1f56:	01 90       	ld	r0, Z+
    1f58:	0d 92       	st	X+, r0
    1f5a:	41 50       	subi	r20, 0x01	; 1
    1f5c:	50 40       	sbci	r21, 0x00	; 0
    1f5e:	d8 f7       	brcc	.-10     	; 0x1f56 <memcpy+0x6>
    1f60:	08 95       	ret

00001f62 <memset>:
    1f62:	dc 01       	movw	r26, r24
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <memset+0x6>
    1f66:	6d 93       	st	X+, r22
    1f68:	41 50       	subi	r20, 0x01	; 1
    1f6a:	50 40       	sbci	r21, 0x00	; 0
    1f6c:	e0 f7       	brcc	.-8      	; 0x1f66 <memset+0x4>
    1f6e:	08 95       	ret

00001f70 <sprintf>:
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	2e 97       	sbiw	r28, 0x0e	; 14
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	0e 89       	ldd	r16, Y+22	; 0x16
    1f8a:	1f 89       	ldd	r17, Y+23	; 0x17
    1f8c:	86 e0       	ldi	r24, 0x06	; 6
    1f8e:	8c 83       	std	Y+4, r24	; 0x04
    1f90:	1a 83       	std	Y+2, r17	; 0x02
    1f92:	09 83       	std	Y+1, r16	; 0x01
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	9f e7       	ldi	r25, 0x7F	; 127
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	ae 01       	movw	r20, r28
    1f9e:	46 5e       	subi	r20, 0xE6	; 230
    1fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa2:	68 8d       	ldd	r22, Y+24	; 0x18
    1fa4:	79 8d       	ldd	r23, Y+25	; 0x19
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	10 d0       	rcall	.+32     	; 0x1fcc <vfprintf>
    1fac:	ef 81       	ldd	r30, Y+7	; 0x07
    1fae:	f8 85       	ldd	r31, Y+8	; 0x08
    1fb0:	e0 0f       	add	r30, r16
    1fb2:	f1 1f       	adc	r31, r17
    1fb4:	10 82       	st	Z, r1
    1fb6:	2e 96       	adiw	r28, 0x0e	; 14
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	1f 91       	pop	r17
    1fc8:	0f 91       	pop	r16
    1fca:	08 95       	ret

00001fcc <vfprintf>:
    1fcc:	2f 92       	push	r2
    1fce:	3f 92       	push	r3
    1fd0:	4f 92       	push	r4
    1fd2:	5f 92       	push	r5
    1fd4:	6f 92       	push	r6
    1fd6:	7f 92       	push	r7
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	2b 97       	sbiw	r28, 0x0b	; 11
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	6c 01       	movw	r12, r24
    2002:	7b 01       	movw	r14, r22
    2004:	8a 01       	movw	r16, r20
    2006:	fc 01       	movw	r30, r24
    2008:	17 82       	std	Z+7, r1	; 0x07
    200a:	16 82       	std	Z+6, r1	; 0x06
    200c:	83 81       	ldd	r24, Z+3	; 0x03
    200e:	81 ff       	sbrs	r24, 1
    2010:	bf c1       	rjmp	.+894    	; 0x2390 <__stack+0x191>
    2012:	ce 01       	movw	r24, r28
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	3c 01       	movw	r6, r24
    2018:	f6 01       	movw	r30, r12
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	f7 01       	movw	r30, r14
    201e:	93 fd       	sbrc	r25, 3
    2020:	85 91       	lpm	r24, Z+
    2022:	93 ff       	sbrs	r25, 3
    2024:	81 91       	ld	r24, Z+
    2026:	7f 01       	movw	r14, r30
    2028:	88 23       	and	r24, r24
    202a:	09 f4       	brne	.+2      	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    202c:	ad c1       	rjmp	.+858    	; 0x2388 <__stack+0x189>
    202e:	85 32       	cpi	r24, 0x25	; 37
    2030:	39 f4       	brne	.+14     	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    2032:	93 fd       	sbrc	r25, 3
    2034:	85 91       	lpm	r24, Z+
    2036:	93 ff       	sbrs	r25, 3
    2038:	81 91       	ld	r24, Z+
    203a:	7f 01       	movw	r14, r30
    203c:	85 32       	cpi	r24, 0x25	; 37
    203e:	21 f4       	brne	.+8      	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
    2040:	b6 01       	movw	r22, r12
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	d6 d1       	rcall	.+940    	; 0x23f2 <fputc>
    2046:	e8 cf       	rjmp	.-48     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    2048:	91 2c       	mov	r9, r1
    204a:	21 2c       	mov	r2, r1
    204c:	31 2c       	mov	r3, r1
    204e:	ff e1       	ldi	r31, 0x1F	; 31
    2050:	f3 15       	cp	r31, r3
    2052:	d8 f0       	brcs	.+54     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2054:	8b 32       	cpi	r24, 0x2B	; 43
    2056:	79 f0       	breq	.+30     	; 0x2076 <__DATA_REGION_LENGTH__+0x76>
    2058:	38 f4       	brcc	.+14     	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
    205a:	80 32       	cpi	r24, 0x20	; 32
    205c:	79 f0       	breq	.+30     	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    205e:	83 32       	cpi	r24, 0x23	; 35
    2060:	a1 f4       	brne	.+40     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2062:	23 2d       	mov	r18, r3
    2064:	20 61       	ori	r18, 0x10	; 16
    2066:	1d c0       	rjmp	.+58     	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
    2068:	8d 32       	cpi	r24, 0x2D	; 45
    206a:	61 f0       	breq	.+24     	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    206c:	80 33       	cpi	r24, 0x30	; 48
    206e:	69 f4       	brne	.+26     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2070:	23 2d       	mov	r18, r3
    2072:	21 60       	ori	r18, 0x01	; 1
    2074:	16 c0       	rjmp	.+44     	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
    2076:	83 2d       	mov	r24, r3
    2078:	82 60       	ori	r24, 0x02	; 2
    207a:	38 2e       	mov	r3, r24
    207c:	e3 2d       	mov	r30, r3
    207e:	e4 60       	ori	r30, 0x04	; 4
    2080:	3e 2e       	mov	r3, r30
    2082:	2a c0       	rjmp	.+84     	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    2084:	f3 2d       	mov	r31, r3
    2086:	f8 60       	ori	r31, 0x08	; 8
    2088:	1d c0       	rjmp	.+58     	; 0x20c4 <__DATA_REGION_LENGTH__+0xc4>
    208a:	37 fc       	sbrc	r3, 7
    208c:	2d c0       	rjmp	.+90     	; 0x20e8 <__DATA_REGION_LENGTH__+0xe8>
    208e:	20 ed       	ldi	r18, 0xD0	; 208
    2090:	28 0f       	add	r18, r24
    2092:	2a 30       	cpi	r18, 0x0A	; 10
    2094:	40 f0       	brcs	.+16     	; 0x20a6 <__DATA_REGION_LENGTH__+0xa6>
    2096:	8e 32       	cpi	r24, 0x2E	; 46
    2098:	b9 f4       	brne	.+46     	; 0x20c8 <__DATA_REGION_LENGTH__+0xc8>
    209a:	36 fc       	sbrc	r3, 6
    209c:	75 c1       	rjmp	.+746    	; 0x2388 <__stack+0x189>
    209e:	23 2d       	mov	r18, r3
    20a0:	20 64       	ori	r18, 0x40	; 64
    20a2:	32 2e       	mov	r3, r18
    20a4:	19 c0       	rjmp	.+50     	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20a6:	36 fe       	sbrs	r3, 6
    20a8:	06 c0       	rjmp	.+12     	; 0x20b6 <__DATA_REGION_LENGTH__+0xb6>
    20aa:	8a e0       	ldi	r24, 0x0A	; 10
    20ac:	98 9e       	mul	r9, r24
    20ae:	20 0d       	add	r18, r0
    20b0:	11 24       	eor	r1, r1
    20b2:	92 2e       	mov	r9, r18
    20b4:	11 c0       	rjmp	.+34     	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20b6:	ea e0       	ldi	r30, 0x0A	; 10
    20b8:	2e 9e       	mul	r2, r30
    20ba:	20 0d       	add	r18, r0
    20bc:	11 24       	eor	r1, r1
    20be:	22 2e       	mov	r2, r18
    20c0:	f3 2d       	mov	r31, r3
    20c2:	f0 62       	ori	r31, 0x20	; 32
    20c4:	3f 2e       	mov	r3, r31
    20c6:	08 c0       	rjmp	.+16     	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20c8:	8c 36       	cpi	r24, 0x6C	; 108
    20ca:	21 f4       	brne	.+8      	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    20cc:	83 2d       	mov	r24, r3
    20ce:	80 68       	ori	r24, 0x80	; 128
    20d0:	38 2e       	mov	r3, r24
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20d4:	88 36       	cpi	r24, 0x68	; 104
    20d6:	41 f4       	brne	.+16     	; 0x20e8 <__DATA_REGION_LENGTH__+0xe8>
    20d8:	f7 01       	movw	r30, r14
    20da:	93 fd       	sbrc	r25, 3
    20dc:	85 91       	lpm	r24, Z+
    20de:	93 ff       	sbrs	r25, 3
    20e0:	81 91       	ld	r24, Z+
    20e2:	7f 01       	movw	r14, r30
    20e4:	81 11       	cpse	r24, r1
    20e6:	b3 cf       	rjmp	.-154    	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    20e8:	98 2f       	mov	r25, r24
    20ea:	9f 7d       	andi	r25, 0xDF	; 223
    20ec:	95 54       	subi	r25, 0x45	; 69
    20ee:	93 30       	cpi	r25, 0x03	; 3
    20f0:	28 f4       	brcc	.+10     	; 0x20fc <__DATA_REGION_LENGTH__+0xfc>
    20f2:	0c 5f       	subi	r16, 0xFC	; 252
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	9f e3       	ldi	r25, 0x3F	; 63
    20f8:	99 83       	std	Y+1, r25	; 0x01
    20fa:	0d c0       	rjmp	.+26     	; 0x2116 <__DATA_REGION_LENGTH__+0x116>
    20fc:	83 36       	cpi	r24, 0x63	; 99
    20fe:	31 f0       	breq	.+12     	; 0x210c <__DATA_REGION_LENGTH__+0x10c>
    2100:	83 37       	cpi	r24, 0x73	; 115
    2102:	71 f0       	breq	.+28     	; 0x2120 <__DATA_REGION_LENGTH__+0x120>
    2104:	83 35       	cpi	r24, 0x53	; 83
    2106:	09 f0       	breq	.+2      	; 0x210a <__DATA_REGION_LENGTH__+0x10a>
    2108:	55 c0       	rjmp	.+170    	; 0x21b4 <__DATA_REGION_LENGTH__+0x1b4>
    210a:	20 c0       	rjmp	.+64     	; 0x214c <__DATA_REGION_LENGTH__+0x14c>
    210c:	f8 01       	movw	r30, r16
    210e:	80 81       	ld	r24, Z
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	0e 5f       	subi	r16, 0xFE	; 254
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	88 24       	eor	r8, r8
    2118:	83 94       	inc	r8
    211a:	91 2c       	mov	r9, r1
    211c:	53 01       	movw	r10, r6
    211e:	12 c0       	rjmp	.+36     	; 0x2144 <__DATA_REGION_LENGTH__+0x144>
    2120:	28 01       	movw	r4, r16
    2122:	f2 e0       	ldi	r31, 0x02	; 2
    2124:	4f 0e       	add	r4, r31
    2126:	51 1c       	adc	r5, r1
    2128:	f8 01       	movw	r30, r16
    212a:	a0 80       	ld	r10, Z
    212c:	b1 80       	ldd	r11, Z+1	; 0x01
    212e:	36 fe       	sbrs	r3, 6
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <__DATA_REGION_LENGTH__+0x138>
    2132:	69 2d       	mov	r22, r9
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	02 c0       	rjmp	.+4      	; 0x213c <__DATA_REGION_LENGTH__+0x13c>
    2138:	6f ef       	ldi	r22, 0xFF	; 255
    213a:	7f ef       	ldi	r23, 0xFF	; 255
    213c:	c5 01       	movw	r24, r10
    213e:	4e d1       	rcall	.+668    	; 0x23dc <strnlen>
    2140:	4c 01       	movw	r8, r24
    2142:	82 01       	movw	r16, r4
    2144:	f3 2d       	mov	r31, r3
    2146:	ff 77       	andi	r31, 0x7F	; 127
    2148:	3f 2e       	mov	r3, r31
    214a:	15 c0       	rjmp	.+42     	; 0x2176 <__DATA_REGION_LENGTH__+0x176>
    214c:	28 01       	movw	r4, r16
    214e:	22 e0       	ldi	r18, 0x02	; 2
    2150:	42 0e       	add	r4, r18
    2152:	51 1c       	adc	r5, r1
    2154:	f8 01       	movw	r30, r16
    2156:	a0 80       	ld	r10, Z
    2158:	b1 80       	ldd	r11, Z+1	; 0x01
    215a:	36 fe       	sbrs	r3, 6
    215c:	03 c0       	rjmp	.+6      	; 0x2164 <__DATA_REGION_LENGTH__+0x164>
    215e:	69 2d       	mov	r22, r9
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <__DATA_REGION_LENGTH__+0x168>
    2164:	6f ef       	ldi	r22, 0xFF	; 255
    2166:	7f ef       	ldi	r23, 0xFF	; 255
    2168:	c5 01       	movw	r24, r10
    216a:	2d d1       	rcall	.+602    	; 0x23c6 <strnlen_P>
    216c:	4c 01       	movw	r8, r24
    216e:	f3 2d       	mov	r31, r3
    2170:	f0 68       	ori	r31, 0x80	; 128
    2172:	3f 2e       	mov	r3, r31
    2174:	82 01       	movw	r16, r4
    2176:	33 fc       	sbrc	r3, 3
    2178:	19 c0       	rjmp	.+50     	; 0x21ac <__DATA_REGION_LENGTH__+0x1ac>
    217a:	82 2d       	mov	r24, r2
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	88 16       	cp	r8, r24
    2180:	99 06       	cpc	r9, r25
    2182:	a0 f4       	brcc	.+40     	; 0x21ac <__DATA_REGION_LENGTH__+0x1ac>
    2184:	b6 01       	movw	r22, r12
    2186:	80 e2       	ldi	r24, 0x20	; 32
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	33 d1       	rcall	.+614    	; 0x23f2 <fputc>
    218c:	2a 94       	dec	r2
    218e:	f5 cf       	rjmp	.-22     	; 0x217a <__DATA_REGION_LENGTH__+0x17a>
    2190:	f5 01       	movw	r30, r10
    2192:	37 fc       	sbrc	r3, 7
    2194:	85 91       	lpm	r24, Z+
    2196:	37 fe       	sbrs	r3, 7
    2198:	81 91       	ld	r24, Z+
    219a:	5f 01       	movw	r10, r30
    219c:	b6 01       	movw	r22, r12
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	28 d1       	rcall	.+592    	; 0x23f2 <fputc>
    21a2:	21 10       	cpse	r2, r1
    21a4:	2a 94       	dec	r2
    21a6:	21 e0       	ldi	r18, 0x01	; 1
    21a8:	82 1a       	sub	r8, r18
    21aa:	91 08       	sbc	r9, r1
    21ac:	81 14       	cp	r8, r1
    21ae:	91 04       	cpc	r9, r1
    21b0:	79 f7       	brne	.-34     	; 0x2190 <__DATA_REGION_LENGTH__+0x190>
    21b2:	e1 c0       	rjmp	.+450    	; 0x2376 <__stack+0x177>
    21b4:	84 36       	cpi	r24, 0x64	; 100
    21b6:	11 f0       	breq	.+4      	; 0x21bc <__DATA_REGION_LENGTH__+0x1bc>
    21b8:	89 36       	cpi	r24, 0x69	; 105
    21ba:	39 f5       	brne	.+78     	; 0x220a <__stack+0xb>
    21bc:	f8 01       	movw	r30, r16
    21be:	37 fe       	sbrs	r3, 7
    21c0:	07 c0       	rjmp	.+14     	; 0x21d0 <__DATA_REGION_LENGTH__+0x1d0>
    21c2:	60 81       	ld	r22, Z
    21c4:	71 81       	ldd	r23, Z+1	; 0x01
    21c6:	82 81       	ldd	r24, Z+2	; 0x02
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	0c 5f       	subi	r16, 0xFC	; 252
    21cc:	1f 4f       	sbci	r17, 0xFF	; 255
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <__DATA_REGION_LENGTH__+0x1e0>
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	07 2e       	mov	r0, r23
    21d6:	00 0c       	add	r0, r0
    21d8:	88 0b       	sbc	r24, r24
    21da:	99 0b       	sbc	r25, r25
    21dc:	0e 5f       	subi	r16, 0xFE	; 254
    21de:	1f 4f       	sbci	r17, 0xFF	; 255
    21e0:	f3 2d       	mov	r31, r3
    21e2:	ff 76       	andi	r31, 0x6F	; 111
    21e4:	3f 2e       	mov	r3, r31
    21e6:	97 ff       	sbrs	r25, 7
    21e8:	09 c0       	rjmp	.+18     	; 0x21fc <__DATA_REGION_LENGTH__+0x1fc>
    21ea:	90 95       	com	r25
    21ec:	80 95       	com	r24
    21ee:	70 95       	com	r23
    21f0:	61 95       	neg	r22
    21f2:	7f 4f       	sbci	r23, 0xFF	; 255
    21f4:	8f 4f       	sbci	r24, 0xFF	; 255
    21f6:	9f 4f       	sbci	r25, 0xFF	; 255
    21f8:	f0 68       	ori	r31, 0x80	; 128
    21fa:	3f 2e       	mov	r3, r31
    21fc:	2a e0       	ldi	r18, 0x0A	; 10
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	a3 01       	movw	r20, r6
    2202:	33 d1       	rcall	.+614    	; 0x246a <__ultoa_invert>
    2204:	88 2e       	mov	r8, r24
    2206:	86 18       	sub	r8, r6
    2208:	44 c0       	rjmp	.+136    	; 0x2292 <__stack+0x93>
    220a:	85 37       	cpi	r24, 0x75	; 117
    220c:	31 f4       	brne	.+12     	; 0x221a <__stack+0x1b>
    220e:	23 2d       	mov	r18, r3
    2210:	2f 7e       	andi	r18, 0xEF	; 239
    2212:	b2 2e       	mov	r11, r18
    2214:	2a e0       	ldi	r18, 0x0A	; 10
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	25 c0       	rjmp	.+74     	; 0x2264 <__stack+0x65>
    221a:	93 2d       	mov	r25, r3
    221c:	99 7f       	andi	r25, 0xF9	; 249
    221e:	b9 2e       	mov	r11, r25
    2220:	8f 36       	cpi	r24, 0x6F	; 111
    2222:	c1 f0       	breq	.+48     	; 0x2254 <__stack+0x55>
    2224:	18 f4       	brcc	.+6      	; 0x222c <__stack+0x2d>
    2226:	88 35       	cpi	r24, 0x58	; 88
    2228:	79 f0       	breq	.+30     	; 0x2248 <__stack+0x49>
    222a:	ae c0       	rjmp	.+348    	; 0x2388 <__stack+0x189>
    222c:	80 37       	cpi	r24, 0x70	; 112
    222e:	19 f0       	breq	.+6      	; 0x2236 <__stack+0x37>
    2230:	88 37       	cpi	r24, 0x78	; 120
    2232:	21 f0       	breq	.+8      	; 0x223c <__stack+0x3d>
    2234:	a9 c0       	rjmp	.+338    	; 0x2388 <__stack+0x189>
    2236:	e9 2f       	mov	r30, r25
    2238:	e0 61       	ori	r30, 0x10	; 16
    223a:	be 2e       	mov	r11, r30
    223c:	b4 fe       	sbrs	r11, 4
    223e:	0d c0       	rjmp	.+26     	; 0x225a <__stack+0x5b>
    2240:	fb 2d       	mov	r31, r11
    2242:	f4 60       	ori	r31, 0x04	; 4
    2244:	bf 2e       	mov	r11, r31
    2246:	09 c0       	rjmp	.+18     	; 0x225a <__stack+0x5b>
    2248:	34 fe       	sbrs	r3, 4
    224a:	0a c0       	rjmp	.+20     	; 0x2260 <__stack+0x61>
    224c:	29 2f       	mov	r18, r25
    224e:	26 60       	ori	r18, 0x06	; 6
    2250:	b2 2e       	mov	r11, r18
    2252:	06 c0       	rjmp	.+12     	; 0x2260 <__stack+0x61>
    2254:	28 e0       	ldi	r18, 0x08	; 8
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	05 c0       	rjmp	.+10     	; 0x2264 <__stack+0x65>
    225a:	20 e1       	ldi	r18, 0x10	; 16
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <__stack+0x65>
    2260:	20 e1       	ldi	r18, 0x10	; 16
    2262:	32 e0       	ldi	r19, 0x02	; 2
    2264:	f8 01       	movw	r30, r16
    2266:	b7 fe       	sbrs	r11, 7
    2268:	07 c0       	rjmp	.+14     	; 0x2278 <__stack+0x79>
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	0c 5f       	subi	r16, 0xFC	; 252
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	06 c0       	rjmp	.+12     	; 0x2284 <__stack+0x85>
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	0e 5f       	subi	r16, 0xFE	; 254
    2282:	1f 4f       	sbci	r17, 0xFF	; 255
    2284:	a3 01       	movw	r20, r6
    2286:	f1 d0       	rcall	.+482    	; 0x246a <__ultoa_invert>
    2288:	88 2e       	mov	r8, r24
    228a:	86 18       	sub	r8, r6
    228c:	fb 2d       	mov	r31, r11
    228e:	ff 77       	andi	r31, 0x7F	; 127
    2290:	3f 2e       	mov	r3, r31
    2292:	36 fe       	sbrs	r3, 6
    2294:	0d c0       	rjmp	.+26     	; 0x22b0 <__stack+0xb1>
    2296:	23 2d       	mov	r18, r3
    2298:	2e 7f       	andi	r18, 0xFE	; 254
    229a:	a2 2e       	mov	r10, r18
    229c:	89 14       	cp	r8, r9
    229e:	58 f4       	brcc	.+22     	; 0x22b6 <__stack+0xb7>
    22a0:	34 fe       	sbrs	r3, 4
    22a2:	0b c0       	rjmp	.+22     	; 0x22ba <__stack+0xbb>
    22a4:	32 fc       	sbrc	r3, 2
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <__stack+0xbb>
    22a8:	83 2d       	mov	r24, r3
    22aa:	8e 7e       	andi	r24, 0xEE	; 238
    22ac:	a8 2e       	mov	r10, r24
    22ae:	05 c0       	rjmp	.+10     	; 0x22ba <__stack+0xbb>
    22b0:	b8 2c       	mov	r11, r8
    22b2:	a3 2c       	mov	r10, r3
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <__stack+0xbd>
    22b6:	b8 2c       	mov	r11, r8
    22b8:	01 c0       	rjmp	.+2      	; 0x22bc <__stack+0xbd>
    22ba:	b9 2c       	mov	r11, r9
    22bc:	a4 fe       	sbrs	r10, 4
    22be:	0f c0       	rjmp	.+30     	; 0x22de <__stack+0xdf>
    22c0:	fe 01       	movw	r30, r28
    22c2:	e8 0d       	add	r30, r8
    22c4:	f1 1d       	adc	r31, r1
    22c6:	80 81       	ld	r24, Z
    22c8:	80 33       	cpi	r24, 0x30	; 48
    22ca:	21 f4       	brne	.+8      	; 0x22d4 <__stack+0xd5>
    22cc:	9a 2d       	mov	r25, r10
    22ce:	99 7e       	andi	r25, 0xE9	; 233
    22d0:	a9 2e       	mov	r10, r25
    22d2:	09 c0       	rjmp	.+18     	; 0x22e6 <__stack+0xe7>
    22d4:	a2 fe       	sbrs	r10, 2
    22d6:	06 c0       	rjmp	.+12     	; 0x22e4 <__stack+0xe5>
    22d8:	b3 94       	inc	r11
    22da:	b3 94       	inc	r11
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <__stack+0xe7>
    22de:	8a 2d       	mov	r24, r10
    22e0:	86 78       	andi	r24, 0x86	; 134
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <__stack+0xe7>
    22e4:	b3 94       	inc	r11
    22e6:	a3 fc       	sbrc	r10, 3
    22e8:	10 c0       	rjmp	.+32     	; 0x230a <__stack+0x10b>
    22ea:	a0 fe       	sbrs	r10, 0
    22ec:	06 c0       	rjmp	.+12     	; 0x22fa <__stack+0xfb>
    22ee:	b2 14       	cp	r11, r2
    22f0:	80 f4       	brcc	.+32     	; 0x2312 <__stack+0x113>
    22f2:	28 0c       	add	r2, r8
    22f4:	92 2c       	mov	r9, r2
    22f6:	9b 18       	sub	r9, r11
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <__stack+0x115>
    22fa:	b2 14       	cp	r11, r2
    22fc:	58 f4       	brcc	.+22     	; 0x2314 <__stack+0x115>
    22fe:	b6 01       	movw	r22, r12
    2300:	80 e2       	ldi	r24, 0x20	; 32
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	76 d0       	rcall	.+236    	; 0x23f2 <fputc>
    2306:	b3 94       	inc	r11
    2308:	f8 cf       	rjmp	.-16     	; 0x22fa <__stack+0xfb>
    230a:	b2 14       	cp	r11, r2
    230c:	18 f4       	brcc	.+6      	; 0x2314 <__stack+0x115>
    230e:	2b 18       	sub	r2, r11
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <__stack+0x117>
    2312:	98 2c       	mov	r9, r8
    2314:	21 2c       	mov	r2, r1
    2316:	a4 fe       	sbrs	r10, 4
    2318:	0f c0       	rjmp	.+30     	; 0x2338 <__stack+0x139>
    231a:	b6 01       	movw	r22, r12
    231c:	80 e3       	ldi	r24, 0x30	; 48
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	68 d0       	rcall	.+208    	; 0x23f2 <fputc>
    2322:	a2 fe       	sbrs	r10, 2
    2324:	16 c0       	rjmp	.+44     	; 0x2352 <__stack+0x153>
    2326:	a1 fc       	sbrc	r10, 1
    2328:	03 c0       	rjmp	.+6      	; 0x2330 <__stack+0x131>
    232a:	88 e7       	ldi	r24, 0x78	; 120
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <__stack+0x135>
    2330:	88 e5       	ldi	r24, 0x58	; 88
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	b6 01       	movw	r22, r12
    2336:	0c c0       	rjmp	.+24     	; 0x2350 <__stack+0x151>
    2338:	8a 2d       	mov	r24, r10
    233a:	86 78       	andi	r24, 0x86	; 134
    233c:	51 f0       	breq	.+20     	; 0x2352 <__stack+0x153>
    233e:	a1 fe       	sbrs	r10, 1
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <__stack+0x147>
    2342:	8b e2       	ldi	r24, 0x2B	; 43
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <__stack+0x149>
    2346:	80 e2       	ldi	r24, 0x20	; 32
    2348:	a7 fc       	sbrc	r10, 7
    234a:	8d e2       	ldi	r24, 0x2D	; 45
    234c:	b6 01       	movw	r22, r12
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	50 d0       	rcall	.+160    	; 0x23f2 <fputc>
    2352:	89 14       	cp	r8, r9
    2354:	30 f4       	brcc	.+12     	; 0x2362 <__stack+0x163>
    2356:	b6 01       	movw	r22, r12
    2358:	80 e3       	ldi	r24, 0x30	; 48
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	4a d0       	rcall	.+148    	; 0x23f2 <fputc>
    235e:	9a 94       	dec	r9
    2360:	f8 cf       	rjmp	.-16     	; 0x2352 <__stack+0x153>
    2362:	8a 94       	dec	r8
    2364:	f3 01       	movw	r30, r6
    2366:	e8 0d       	add	r30, r8
    2368:	f1 1d       	adc	r31, r1
    236a:	80 81       	ld	r24, Z
    236c:	b6 01       	movw	r22, r12
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	40 d0       	rcall	.+128    	; 0x23f2 <fputc>
    2372:	81 10       	cpse	r8, r1
    2374:	f6 cf       	rjmp	.-20     	; 0x2362 <__stack+0x163>
    2376:	22 20       	and	r2, r2
    2378:	09 f4       	brne	.+2      	; 0x237c <__stack+0x17d>
    237a:	4e ce       	rjmp	.-868    	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    237c:	b6 01       	movw	r22, r12
    237e:	80 e2       	ldi	r24, 0x20	; 32
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	37 d0       	rcall	.+110    	; 0x23f2 <fputc>
    2384:	2a 94       	dec	r2
    2386:	f7 cf       	rjmp	.-18     	; 0x2376 <__stack+0x177>
    2388:	f6 01       	movw	r30, r12
    238a:	86 81       	ldd	r24, Z+6	; 0x06
    238c:	97 81       	ldd	r25, Z+7	; 0x07
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <__stack+0x195>
    2390:	8f ef       	ldi	r24, 0xFF	; 255
    2392:	9f ef       	ldi	r25, 0xFF	; 255
    2394:	2b 96       	adiw	r28, 0x0b	; 11
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	df 90       	pop	r13
    23ae:	cf 90       	pop	r12
    23b0:	bf 90       	pop	r11
    23b2:	af 90       	pop	r10
    23b4:	9f 90       	pop	r9
    23b6:	8f 90       	pop	r8
    23b8:	7f 90       	pop	r7
    23ba:	6f 90       	pop	r6
    23bc:	5f 90       	pop	r5
    23be:	4f 90       	pop	r4
    23c0:	3f 90       	pop	r3
    23c2:	2f 90       	pop	r2
    23c4:	08 95       	ret

000023c6 <strnlen_P>:
    23c6:	fc 01       	movw	r30, r24
    23c8:	05 90       	lpm	r0, Z+
    23ca:	61 50       	subi	r22, 0x01	; 1
    23cc:	70 40       	sbci	r23, 0x00	; 0
    23ce:	01 10       	cpse	r0, r1
    23d0:	d8 f7       	brcc	.-10     	; 0x23c8 <strnlen_P+0x2>
    23d2:	80 95       	com	r24
    23d4:	90 95       	com	r25
    23d6:	8e 0f       	add	r24, r30
    23d8:	9f 1f       	adc	r25, r31
    23da:	08 95       	ret

000023dc <strnlen>:
    23dc:	fc 01       	movw	r30, r24
    23de:	61 50       	subi	r22, 0x01	; 1
    23e0:	70 40       	sbci	r23, 0x00	; 0
    23e2:	01 90       	ld	r0, Z+
    23e4:	01 10       	cpse	r0, r1
    23e6:	d8 f7       	brcc	.-10     	; 0x23de <strnlen+0x2>
    23e8:	80 95       	com	r24
    23ea:	90 95       	com	r25
    23ec:	8e 0f       	add	r24, r30
    23ee:	9f 1f       	adc	r25, r31
    23f0:	08 95       	ret

000023f2 <fputc>:
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	fb 01       	movw	r30, r22
    23fc:	23 81       	ldd	r18, Z+3	; 0x03
    23fe:	21 fd       	sbrc	r18, 1
    2400:	03 c0       	rjmp	.+6      	; 0x2408 <fputc+0x16>
    2402:	8f ef       	ldi	r24, 0xFF	; 255
    2404:	9f ef       	ldi	r25, 0xFF	; 255
    2406:	2c c0       	rjmp	.+88     	; 0x2460 <fputc+0x6e>
    2408:	22 ff       	sbrs	r18, 2
    240a:	16 c0       	rjmp	.+44     	; 0x2438 <fputc+0x46>
    240c:	46 81       	ldd	r20, Z+6	; 0x06
    240e:	57 81       	ldd	r21, Z+7	; 0x07
    2410:	24 81       	ldd	r18, Z+4	; 0x04
    2412:	35 81       	ldd	r19, Z+5	; 0x05
    2414:	42 17       	cp	r20, r18
    2416:	53 07       	cpc	r21, r19
    2418:	44 f4       	brge	.+16     	; 0x242a <fputc+0x38>
    241a:	a0 81       	ld	r26, Z
    241c:	b1 81       	ldd	r27, Z+1	; 0x01
    241e:	9d 01       	movw	r18, r26
    2420:	2f 5f       	subi	r18, 0xFF	; 255
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	31 83       	std	Z+1, r19	; 0x01
    2426:	20 83       	st	Z, r18
    2428:	8c 93       	st	X, r24
    242a:	26 81       	ldd	r18, Z+6	; 0x06
    242c:	37 81       	ldd	r19, Z+7	; 0x07
    242e:	2f 5f       	subi	r18, 0xFF	; 255
    2430:	3f 4f       	sbci	r19, 0xFF	; 255
    2432:	37 83       	std	Z+7, r19	; 0x07
    2434:	26 83       	std	Z+6, r18	; 0x06
    2436:	14 c0       	rjmp	.+40     	; 0x2460 <fputc+0x6e>
    2438:	8b 01       	movw	r16, r22
    243a:	ec 01       	movw	r28, r24
    243c:	fb 01       	movw	r30, r22
    243e:	00 84       	ldd	r0, Z+8	; 0x08
    2440:	f1 85       	ldd	r31, Z+9	; 0x09
    2442:	e0 2d       	mov	r30, r0
    2444:	19 95       	eicall
    2446:	89 2b       	or	r24, r25
    2448:	e1 f6       	brne	.-72     	; 0x2402 <fputc+0x10>
    244a:	d8 01       	movw	r26, r16
    244c:	16 96       	adiw	r26, 0x06	; 6
    244e:	8d 91       	ld	r24, X+
    2450:	9c 91       	ld	r25, X
    2452:	17 97       	sbiw	r26, 0x07	; 7
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	17 96       	adiw	r26, 0x07	; 7
    2458:	9c 93       	st	X, r25
    245a:	8e 93       	st	-X, r24
    245c:	16 97       	sbiw	r26, 0x06	; 6
    245e:	ce 01       	movw	r24, r28
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	1f 91       	pop	r17
    2466:	0f 91       	pop	r16
    2468:	08 95       	ret

0000246a <__ultoa_invert>:
    246a:	fa 01       	movw	r30, r20
    246c:	aa 27       	eor	r26, r26
    246e:	28 30       	cpi	r18, 0x08	; 8
    2470:	51 f1       	breq	.+84     	; 0x24c6 <__ultoa_invert+0x5c>
    2472:	20 31       	cpi	r18, 0x10	; 16
    2474:	81 f1       	breq	.+96     	; 0x24d6 <__ultoa_invert+0x6c>
    2476:	e8 94       	clt
    2478:	6f 93       	push	r22
    247a:	6e 7f       	andi	r22, 0xFE	; 254
    247c:	6e 5f       	subi	r22, 0xFE	; 254
    247e:	7f 4f       	sbci	r23, 0xFF	; 255
    2480:	8f 4f       	sbci	r24, 0xFF	; 255
    2482:	9f 4f       	sbci	r25, 0xFF	; 255
    2484:	af 4f       	sbci	r26, 0xFF	; 255
    2486:	b1 e0       	ldi	r27, 0x01	; 1
    2488:	3e d0       	rcall	.+124    	; 0x2506 <__ultoa_invert+0x9c>
    248a:	b4 e0       	ldi	r27, 0x04	; 4
    248c:	3c d0       	rcall	.+120    	; 0x2506 <__ultoa_invert+0x9c>
    248e:	67 0f       	add	r22, r23
    2490:	78 1f       	adc	r23, r24
    2492:	89 1f       	adc	r24, r25
    2494:	9a 1f       	adc	r25, r26
    2496:	a1 1d       	adc	r26, r1
    2498:	68 0f       	add	r22, r24
    249a:	79 1f       	adc	r23, r25
    249c:	8a 1f       	adc	r24, r26
    249e:	91 1d       	adc	r25, r1
    24a0:	a1 1d       	adc	r26, r1
    24a2:	6a 0f       	add	r22, r26
    24a4:	71 1d       	adc	r23, r1
    24a6:	81 1d       	adc	r24, r1
    24a8:	91 1d       	adc	r25, r1
    24aa:	a1 1d       	adc	r26, r1
    24ac:	20 d0       	rcall	.+64     	; 0x24ee <__ultoa_invert+0x84>
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <__ultoa_invert+0x48>
    24b0:	68 94       	set
    24b2:	3f 91       	pop	r19
    24b4:	2a e0       	ldi	r18, 0x0A	; 10
    24b6:	26 9f       	mul	r18, r22
    24b8:	11 24       	eor	r1, r1
    24ba:	30 19       	sub	r19, r0
    24bc:	30 5d       	subi	r19, 0xD0	; 208
    24be:	31 93       	st	Z+, r19
    24c0:	de f6       	brtc	.-74     	; 0x2478 <__ultoa_invert+0xe>
    24c2:	cf 01       	movw	r24, r30
    24c4:	08 95       	ret
    24c6:	46 2f       	mov	r20, r22
    24c8:	47 70       	andi	r20, 0x07	; 7
    24ca:	40 5d       	subi	r20, 0xD0	; 208
    24cc:	41 93       	st	Z+, r20
    24ce:	b3 e0       	ldi	r27, 0x03	; 3
    24d0:	0f d0       	rcall	.+30     	; 0x24f0 <__ultoa_invert+0x86>
    24d2:	c9 f7       	brne	.-14     	; 0x24c6 <__ultoa_invert+0x5c>
    24d4:	f6 cf       	rjmp	.-20     	; 0x24c2 <__ultoa_invert+0x58>
    24d6:	46 2f       	mov	r20, r22
    24d8:	4f 70       	andi	r20, 0x0F	; 15
    24da:	40 5d       	subi	r20, 0xD0	; 208
    24dc:	4a 33       	cpi	r20, 0x3A	; 58
    24de:	18 f0       	brcs	.+6      	; 0x24e6 <__ultoa_invert+0x7c>
    24e0:	49 5d       	subi	r20, 0xD9	; 217
    24e2:	31 fd       	sbrc	r19, 1
    24e4:	40 52       	subi	r20, 0x20	; 32
    24e6:	41 93       	st	Z+, r20
    24e8:	02 d0       	rcall	.+4      	; 0x24ee <__ultoa_invert+0x84>
    24ea:	a9 f7       	brne	.-22     	; 0x24d6 <__ultoa_invert+0x6c>
    24ec:	ea cf       	rjmp	.-44     	; 0x24c2 <__ultoa_invert+0x58>
    24ee:	b4 e0       	ldi	r27, 0x04	; 4
    24f0:	a6 95       	lsr	r26
    24f2:	97 95       	ror	r25
    24f4:	87 95       	ror	r24
    24f6:	77 95       	ror	r23
    24f8:	67 95       	ror	r22
    24fa:	ba 95       	dec	r27
    24fc:	c9 f7       	brne	.-14     	; 0x24f0 <__ultoa_invert+0x86>
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	61 05       	cpc	r22, r1
    2502:	71 05       	cpc	r23, r1
    2504:	08 95       	ret
    2506:	9b 01       	movw	r18, r22
    2508:	ac 01       	movw	r20, r24
    250a:	0a 2e       	mov	r0, r26
    250c:	06 94       	lsr	r0
    250e:	57 95       	ror	r21
    2510:	47 95       	ror	r20
    2512:	37 95       	ror	r19
    2514:	27 95       	ror	r18
    2516:	ba 95       	dec	r27
    2518:	c9 f7       	brne	.-14     	; 0x250c <__ultoa_invert+0xa2>
    251a:	62 0f       	add	r22, r18
    251c:	73 1f       	adc	r23, r19
    251e:	84 1f       	adc	r24, r20
    2520:	95 1f       	adc	r25, r21
    2522:	a0 1d       	adc	r26, r0
    2524:	08 95       	ret

00002526 <_exit>:
    2526:	f8 94       	cli

00002528 <__stop_program>:
    2528:	ff cf       	rjmp	.-2      	; 0x2528 <__stop_program>
