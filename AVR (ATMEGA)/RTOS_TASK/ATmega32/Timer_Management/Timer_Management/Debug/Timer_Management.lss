
Timer_Management.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ff2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00001ff2  00002086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000673  008000c0  008000c0  000020e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ac6  00000000  00000000  00002598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013e7  00000000  00000000  0000805e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003da5  00000000  00000000  00009445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dec  00000000  00000000  0000d1ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000f5b6  00000000  00000000  0000dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a7c  00000000  00000000  0001d58e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  0002300a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000124d  00000000  00000000  000234f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4e c0       	rjmp	.+156    	; 0xa2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c0       	rjmp	.+152    	; 0xa2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c0       	rjmp	.+148    	; 0xa2 <__bad_interrupt>
       e:	00 00       	nop
      10:	48 c0       	rjmp	.+144    	; 0xa2 <__bad_interrupt>
      12:	00 00       	nop
      14:	46 c0       	rjmp	.+140    	; 0xa2 <__bad_interrupt>
      16:	00 00       	nop
      18:	44 c0       	rjmp	.+136    	; 0xa2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c7 c1       	rjmp	.+910    	; 0x3ac <__vector_7>
      1e:	00 00       	nop
      20:	40 c0       	rjmp	.+128    	; 0xa2 <__bad_interrupt>
      22:	00 00       	nop
      24:	3e c0       	rjmp	.+124    	; 0xa2 <__bad_interrupt>
      26:	00 00       	nop
      28:	3c c0       	rjmp	.+120    	; 0xa2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3a c0       	rjmp	.+116    	; 0xa2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	38 c0       	rjmp	.+112    	; 0xa2 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__vector_13>
      38:	34 c0       	rjmp	.+104    	; 0xa2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c0       	rjmp	.+100    	; 0xa2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	30 c0       	rjmp	.+96     	; 0xa2 <__bad_interrupt>
      42:	00 00       	nop
      44:	2e c0       	rjmp	.+92     	; 0xa2 <__bad_interrupt>
      46:	00 00       	nop
      48:	2c c0       	rjmp	.+88     	; 0xa2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2a c0       	rjmp	.+84     	; 0xa2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	28 c0       	rjmp	.+80     	; 0xa2 <__bad_interrupt>
      52:	00 00       	nop
      54:	c8 0b       	sbc	r28, r24
      56:	c8 0b       	sbc	r28, r24
      58:	c8 0b       	sbc	r28, r24
      5a:	f6 0b       	sbc	r31, r22
      5c:	fe 0b       	sbc	r31, r30
      5e:	0d 0c       	add	r0, r13
      60:	c8 0b       	sbc	r28, r24
      62:	c8 0b       	sbc	r28, r24
      64:	f6 0b       	sbc	r31, r22
      66:	fe 0b       	sbc	r31, r30

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	10 e0       	ldi	r17, 0x00	; 0
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e2 ef       	ldi	r30, 0xF2	; 242
      7c:	ff e1       	ldi	r31, 0x1F	; 31
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3c       	cpi	r26, 0xC0	; 192
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a0 ec       	ldi	r26, 0xC0	; 192
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 33       	cpi	r26, 0x33	; 51
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <main>
      9e:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <_exit>

000000a2 <__bad_interrupt>:
      a2:	ae cf       	rjmp	.-164    	; 0x0 <__vectors>

000000a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
      a4:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      a6:	03 96       	adiw	r24, 0x03	; 3
      a8:	92 83       	std	Z+2, r25	; 0x02
      aa:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
      ac:	2f ef       	ldi	r18, 0xFF	; 255
      ae:	3f ef       	ldi	r19, 0xFF	; 255
      b0:	34 83       	std	Z+4, r19	; 0x04
      b2:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      b4:	96 83       	std	Z+6, r25	; 0x06
      b6:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      b8:	90 87       	std	Z+8, r25	; 0x08
      ba:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
      bc:	10 82       	st	Z, r1
      be:	08 95       	ret

000000c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
      c0:	fc 01       	movw	r30, r24
      c2:	11 86       	std	Z+9, r1	; 0x09
      c4:	10 86       	std	Z+8, r1	; 0x08
      c6:	08 95       	ret

000000c8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	9c 01       	movw	r18, r24
      ce:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
      d0:	dc 01       	movw	r26, r24
      d2:	11 96       	adiw	r26, 0x01	; 1
      d4:	cd 91       	ld	r28, X+
      d6:	dc 91       	ld	r29, X
      d8:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
      da:	d3 83       	std	Z+3, r29	; 0x03
      dc:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
      de:	8c 81       	ldd	r24, Y+4	; 0x04
      e0:	9d 81       	ldd	r25, Y+5	; 0x05
      e2:	95 83       	std	Z+5, r25	; 0x05
      e4:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
      e6:	8c 81       	ldd	r24, Y+4	; 0x04
      e8:	9d 81       	ldd	r25, Y+5	; 0x05
      ea:	dc 01       	movw	r26, r24
      ec:	13 96       	adiw	r26, 0x03	; 3
      ee:	7c 93       	st	X, r23
      f0:	6e 93       	st	-X, r22
      f2:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
      f4:	7d 83       	std	Y+5, r23	; 0x05
      f6:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
      f8:	31 87       	std	Z+9, r19	; 0x09
      fa:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
      fc:	f9 01       	movw	r30, r18
      fe:	80 81       	ld	r24, Z
     100:	8f 5f       	subi	r24, 0xFF	; 255
     102:	80 83       	st	Z, r24
}
     104:	df 91       	pop	r29
     106:	cf 91       	pop	r28
     108:	08 95       	ret

0000010a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     110:	48 81       	ld	r20, Y
     112:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     114:	4f 3f       	cpi	r20, 0xFF	; 255
     116:	2f ef       	ldi	r18, 0xFF	; 255
     118:	52 07       	cpc	r21, r18
     11a:	21 f4       	brne	.+8      	; 0x124 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     11c:	fc 01       	movw	r30, r24
     11e:	a7 81       	ldd	r26, Z+7	; 0x07
     120:	b0 85       	ldd	r27, Z+8	; 0x08
     122:	0d c0       	rjmp	.+26     	; 0x13e <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     124:	dc 01       	movw	r26, r24
     126:	13 96       	adiw	r26, 0x03	; 3
     128:	01 c0       	rjmp	.+2      	; 0x12c <vListInsert+0x22>
     12a:	df 01       	movw	r26, r30
     12c:	12 96       	adiw	r26, 0x02	; 2
     12e:	ed 91       	ld	r30, X+
     130:	fc 91       	ld	r31, X
     132:	13 97       	sbiw	r26, 0x03	; 3
     134:	20 81       	ld	r18, Z
     136:	31 81       	ldd	r19, Z+1	; 0x01
     138:	42 17       	cp	r20, r18
     13a:	53 07       	cpc	r21, r19
     13c:	b0 f7       	brcc	.-20     	; 0x12a <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     13e:	12 96       	adiw	r26, 0x02	; 2
     140:	ed 91       	ld	r30, X+
     142:	fc 91       	ld	r31, X
     144:	13 97       	sbiw	r26, 0x03	; 3
     146:	fb 83       	std	Y+3, r31	; 0x03
     148:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     14a:	d5 83       	std	Z+5, r29	; 0x05
     14c:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     14e:	bd 83       	std	Y+5, r27	; 0x05
     150:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     152:	13 96       	adiw	r26, 0x03	; 3
     154:	dc 93       	st	X, r29
     156:	ce 93       	st	-X, r28
     158:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     15a:	99 87       	std	Y+9, r25	; 0x09
     15c:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     15e:	fc 01       	movw	r30, r24
     160:	20 81       	ld	r18, Z
     162:	2f 5f       	subi	r18, 0xFF	; 255
     164:	20 83       	st	Z, r18
}
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	08 95       	ret

0000016c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     172:	a0 85       	ldd	r26, Z+8	; 0x08
     174:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     176:	c2 81       	ldd	r28, Z+2	; 0x02
     178:	d3 81       	ldd	r29, Z+3	; 0x03
     17a:	84 81       	ldd	r24, Z+4	; 0x04
     17c:	95 81       	ldd	r25, Z+5	; 0x05
     17e:	9d 83       	std	Y+5, r25	; 0x05
     180:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     182:	c4 81       	ldd	r28, Z+4	; 0x04
     184:	d5 81       	ldd	r29, Z+5	; 0x05
     186:	82 81       	ldd	r24, Z+2	; 0x02
     188:	93 81       	ldd	r25, Z+3	; 0x03
     18a:	9b 83       	std	Y+3, r25	; 0x03
     18c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     18e:	11 96       	adiw	r26, 0x01	; 1
     190:	8d 91       	ld	r24, X+
     192:	9c 91       	ld	r25, X
     194:	12 97       	sbiw	r26, 0x02	; 2
     196:	e8 17       	cp	r30, r24
     198:	f9 07       	cpc	r31, r25
     19a:	31 f4       	brne	.+12     	; 0x1a8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     19c:	84 81       	ldd	r24, Z+4	; 0x04
     19e:	95 81       	ldd	r25, Z+5	; 0x05
     1a0:	12 96       	adiw	r26, 0x02	; 2
     1a2:	9c 93       	st	X, r25
     1a4:	8e 93       	st	-X, r24
     1a6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     1a8:	11 86       	std	Z+9, r1	; 0x09
     1aa:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     1ac:	8c 91       	ld	r24, X
     1ae:	81 50       	subi	r24, 0x01	; 1
     1b0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1b2:	8c 91       	ld	r24, X
}
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <pxPortInitialiseStack>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
     1ba:	31 e1       	ldi	r19, 0x11	; 17
     1bc:	fc 01       	movw	r30, r24
     1be:	30 83       	st	Z, r19
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	22 e2       	ldi	r18, 0x22	; 34
     1c4:	20 83       	st	Z, r18
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	a3 e3       	ldi	r26, 0x33	; 51
     1ca:	a0 83       	st	Z, r26
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	60 83       	st	Z, r22
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	70 83       	st	Z, r23
     1d4:	31 97       	sbiw	r30, 0x01	; 1
     1d6:	10 82       	st	Z, r1
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	60 e8       	ldi	r22, 0x80	; 128
     1dc:	60 83       	st	Z, r22
     1de:	31 97       	sbiw	r30, 0x01	; 1
     1e0:	10 82       	st	Z, r1
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	62 e0       	ldi	r22, 0x02	; 2
     1e6:	60 83       	st	Z, r22
     1e8:	31 97       	sbiw	r30, 0x01	; 1
     1ea:	63 e0       	ldi	r22, 0x03	; 3
     1ec:	60 83       	st	Z, r22
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	64 e0       	ldi	r22, 0x04	; 4
     1f2:	60 83       	st	Z, r22
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	65 e0       	ldi	r22, 0x05	; 5
     1f8:	60 83       	st	Z, r22
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	66 e0       	ldi	r22, 0x06	; 6
     1fe:	60 83       	st	Z, r22
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	67 e0       	ldi	r22, 0x07	; 7
     204:	60 83       	st	Z, r22
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	68 e0       	ldi	r22, 0x08	; 8
     20a:	60 83       	st	Z, r22
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	69 e0       	ldi	r22, 0x09	; 9
     210:	60 83       	st	Z, r22
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	60 e1       	ldi	r22, 0x10	; 16
     216:	60 83       	st	Z, r22
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	30 83       	st	Z, r19
     21c:	31 97       	sbiw	r30, 0x01	; 1
     21e:	32 e1       	ldi	r19, 0x12	; 18
     220:	30 83       	st	Z, r19
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	33 e1       	ldi	r19, 0x13	; 19
     226:	30 83       	st	Z, r19
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	34 e1       	ldi	r19, 0x14	; 20
     22c:	30 83       	st	Z, r19
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	35 e1       	ldi	r19, 0x15	; 21
     232:	30 83       	st	Z, r19
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	36 e1       	ldi	r19, 0x16	; 22
     238:	30 83       	st	Z, r19
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	37 e1       	ldi	r19, 0x17	; 23
     23e:	30 83       	st	Z, r19
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	38 e1       	ldi	r19, 0x18	; 24
     244:	30 83       	st	Z, r19
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	39 e1       	ldi	r19, 0x19	; 25
     24a:	30 83       	st	Z, r19
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	30 e2       	ldi	r19, 0x20	; 32
     250:	30 83       	st	Z, r19
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	31 e2       	ldi	r19, 0x21	; 33
     256:	30 83       	st	Z, r19
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	20 83       	st	Z, r18
     25c:	31 97       	sbiw	r30, 0x01	; 1
     25e:	23 e2       	ldi	r18, 0x23	; 35
     260:	20 83       	st	Z, r18
     262:	31 97       	sbiw	r30, 0x01	; 1
     264:	40 83       	st	Z, r20
     266:	31 97       	sbiw	r30, 0x01	; 1
     268:	50 83       	st	Z, r21
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	26 e2       	ldi	r18, 0x26	; 38
     26e:	20 83       	st	Z, r18
     270:	31 97       	sbiw	r30, 0x01	; 1
     272:	27 e2       	ldi	r18, 0x27	; 39
     274:	20 83       	st	Z, r18
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	28 e2       	ldi	r18, 0x28	; 40
     27a:	20 83       	st	Z, r18
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	29 e2       	ldi	r18, 0x29	; 41
     280:	20 83       	st	Z, r18
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	20 e3       	ldi	r18, 0x30	; 48
     286:	20 83       	st	Z, r18
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	21 e3       	ldi	r18, 0x31	; 49
     28c:	20 83       	st	Z, r18
     28e:	86 97       	sbiw	r24, 0x26	; 38
     290:	08 95       	ret

00000292 <xPortStartScheduler>:
     292:	1b bc       	out	0x2b, r1	; 43
     294:	8c e7       	ldi	r24, 0x7C	; 124
     296:	8a bd       	out	0x2a, r24	; 42
     298:	8b e0       	ldi	r24, 0x0B	; 11
     29a:	8e bd       	out	0x2e, r24	; 46
     29c:	89 b7       	in	r24, 0x39	; 57
     29e:	80 61       	ori	r24, 0x10	; 16
     2a0:	89 bf       	out	0x39, r24	; 57
     2a2:	a0 91 11 07 	lds	r26, 0x0711	; 0x800711 <pxCurrentTCB>
     2a6:	b0 91 12 07 	lds	r27, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     2aa:	cd 91       	ld	r28, X+
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	dd 91       	ld	r29, X+
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	ff 91       	pop	r31
     2b4:	ef 91       	pop	r30
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	bf 91       	pop	r27
     2bc:	af 91       	pop	r26
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	7f 91       	pop	r23
     2c4:	6f 91       	pop	r22
     2c6:	5f 91       	pop	r21
     2c8:	4f 91       	pop	r20
     2ca:	3f 91       	pop	r19
     2cc:	2f 91       	pop	r18
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	ef 90       	pop	r14
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	bf 90       	pop	r11
     2dc:	af 90       	pop	r10
     2de:	9f 90       	pop	r9
     2e0:	8f 90       	pop	r8
     2e2:	7f 90       	pop	r7
     2e4:	6f 90       	pop	r6
     2e6:	5f 90       	pop	r5
     2e8:	4f 90       	pop	r4
     2ea:	3f 90       	pop	r3
     2ec:	2f 90       	pop	r2
     2ee:	1f 90       	pop	r1
     2f0:	0f 90       	pop	r0
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	0f 90       	pop	r0
     2f6:	08 95       	ret
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	08 95       	ret

000002fc <vPortYield>:
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	0f 92       	push	r0
     304:	1f 92       	push	r1
     306:	11 24       	eor	r1, r1
     308:	2f 92       	push	r2
     30a:	3f 92       	push	r3
     30c:	4f 92       	push	r4
     30e:	5f 92       	push	r5
     310:	6f 92       	push	r6
     312:	7f 92       	push	r7
     314:	8f 92       	push	r8
     316:	9f 92       	push	r9
     318:	af 92       	push	r10
     31a:	bf 92       	push	r11
     31c:	cf 92       	push	r12
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	2f 93       	push	r18
     32a:	3f 93       	push	r19
     32c:	4f 93       	push	r20
     32e:	5f 93       	push	r21
     330:	6f 93       	push	r22
     332:	7f 93       	push	r23
     334:	8f 93       	push	r24
     336:	9f 93       	push	r25
     338:	af 93       	push	r26
     33a:	bf 93       	push	r27
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
     344:	a0 91 11 07 	lds	r26, 0x0711	; 0x800711 <pxCurrentTCB>
     348:	b0 91 12 07 	lds	r27, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     34c:	0d b6       	in	r0, 0x3d	; 61
     34e:	0d 92       	st	X+, r0
     350:	0e b6       	in	r0, 0x3e	; 62
     352:	0d 92       	st	X+, r0
     354:	08 d7       	rcall	.+3600   	; 0x1166 <vTaskSwitchContext>
     356:	a0 91 11 07 	lds	r26, 0x0711	; 0x800711 <pxCurrentTCB>
     35a:	b0 91 12 07 	lds	r27, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     35e:	cd 91       	ld	r28, X+
     360:	cd bf       	out	0x3d, r28	; 61
     362:	dd 91       	ld	r29, X+
     364:	de bf       	out	0x3e, r29	; 62
     366:	ff 91       	pop	r31
     368:	ef 91       	pop	r30
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	bf 91       	pop	r27
     370:	af 91       	pop	r26
     372:	9f 91       	pop	r25
     374:	8f 91       	pop	r24
     376:	7f 91       	pop	r23
     378:	6f 91       	pop	r22
     37a:	5f 91       	pop	r21
     37c:	4f 91       	pop	r20
     37e:	3f 91       	pop	r19
     380:	2f 91       	pop	r18
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	df 90       	pop	r13
     38c:	cf 90       	pop	r12
     38e:	bf 90       	pop	r11
     390:	af 90       	pop	r10
     392:	9f 90       	pop	r9
     394:	8f 90       	pop	r8
     396:	7f 90       	pop	r7
     398:	6f 90       	pop	r6
     39a:	5f 90       	pop	r5
     39c:	4f 90       	pop	r4
     39e:	3f 90       	pop	r3
     3a0:	2f 90       	pop	r2
     3a2:	1f 90       	pop	r1
     3a4:	0f 90       	pop	r0
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	0f 90       	pop	r0
     3aa:	08 95       	ret

000003ac <__vector_7>:
	 * tick count.  We don't need to switch context, this can only be done by
	 * manual calls to taskYIELD();
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
	void TIMER1_COMPA_vect( void )
	{
     3ac:	1f 92       	push	r1
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	0f 92       	push	r0
     3b4:	11 24       	eor	r1, r1
     3b6:	2f 93       	push	r18
     3b8:	3f 93       	push	r19
     3ba:	4f 93       	push	r20
     3bc:	5f 93       	push	r21
     3be:	6f 93       	push	r22
     3c0:	7f 93       	push	r23
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
     3c6:	af 93       	push	r26
     3c8:	bf 93       	push	r27
     3ca:	ef 93       	push	r30
     3cc:	ff 93       	push	r31
		xTaskIncrementTick();
     3ce:	b4 d5       	rcall	.+2920   	; 0xf38 <xTaskIncrementTick>
	}
     3d0:	ff 91       	pop	r31
     3d2:	ef 91       	pop	r30
     3d4:	bf 91       	pop	r27
     3d6:	af 91       	pop	r26
     3d8:	9f 91       	pop	r25
     3da:	8f 91       	pop	r24
     3dc:	7f 91       	pop	r23
     3de:	6f 91       	pop	r22
     3e0:	5f 91       	pop	r21
     3e2:	4f 91       	pop	r20
     3e4:	3f 91       	pop	r19
     3e6:	2f 91       	pop	r18
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     3f8:	ec ec       	ldi	r30, 0xCC	; 204
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	f9 01       	movw	r30, r18
     400:	20 81       	ld	r18, Z
     402:	31 81       	ldd	r19, Z+1	; 0x01
     404:	2a 17       	cp	r18, r26
     406:	3b 07       	cpc	r19, r27
     408:	d0 f3       	brcs	.-12     	; 0x3fe <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     40a:	82 81       	ldd	r24, Z+2	; 0x02
     40c:	93 81       	ldd	r25, Z+3	; 0x03
     40e:	af 01       	movw	r20, r30
     410:	48 0f       	add	r20, r24
     412:	59 1f       	adc	r21, r25
     414:	a4 17       	cp	r26, r20
     416:	b5 07       	cpc	r27, r21
     418:	49 f4       	brne	.+18     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     41a:	12 96       	adiw	r26, 0x02	; 2
     41c:	4d 91       	ld	r20, X+
     41e:	5c 91       	ld	r21, X
     420:	13 97       	sbiw	r26, 0x03	; 3
     422:	84 0f       	add	r24, r20
     424:	95 1f       	adc	r25, r21
     426:	93 83       	std	Z+3, r25	; 0x03
     428:	82 83       	std	Z+2, r24	; 0x02
     42a:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     42c:	12 96       	adiw	r26, 0x02	; 2
     42e:	8d 91       	ld	r24, X+
     430:	9c 91       	ld	r25, X
     432:	13 97       	sbiw	r26, 0x03	; 3
     434:	ed 01       	movw	r28, r26
     436:	c8 0f       	add	r28, r24
     438:	d9 1f       	adc	r29, r25
     43a:	2c 17       	cp	r18, r28
     43c:	3d 07       	cpc	r19, r29
     43e:	d9 f4       	brne	.+54     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     440:	20 91 ca 00 	lds	r18, 0x00CA	; 0x8000ca <pxEnd>
     444:	30 91 cb 00 	lds	r19, 0x00CB	; 0x8000cb <pxEnd+0x1>
     448:	c2 17       	cp	r28, r18
     44a:	d3 07       	cpc	r29, r19
     44c:	81 f0       	breq	.+32     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     44e:	2a 81       	ldd	r18, Y+2	; 0x02
     450:	3b 81       	ldd	r19, Y+3	; 0x03
     452:	82 0f       	add	r24, r18
     454:	93 1f       	adc	r25, r19
     456:	13 96       	adiw	r26, 0x03	; 3
     458:	9c 93       	st	X, r25
     45a:	8e 93       	st	-X, r24
     45c:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     45e:	c0 81       	ld	r28, Z
     460:	d1 81       	ldd	r29, Z+1	; 0x01
     462:	88 81       	ld	r24, Y
     464:	99 81       	ldd	r25, Y+1	; 0x01
     466:	11 96       	adiw	r26, 0x01	; 1
     468:	9c 93       	st	X, r25
     46a:	8e 93       	st	-X, r24
     46c:	07 c0       	rjmp	.+14     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     46e:	11 96       	adiw	r26, 0x01	; 1
     470:	dc 93       	st	X, r29
     472:	ce 93       	st	-X, r28
     474:	03 c0       	rjmp	.+6      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     476:	11 96       	adiw	r26, 0x01	; 1
     478:	3c 93       	st	X, r19
     47a:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     47c:	ae 17       	cp	r26, r30
     47e:	bf 07       	cpc	r27, r31
     480:	11 f0       	breq	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     482:	b1 83       	std	Z+1, r27	; 0x01
     484:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     49e:	3c d5       	rcall	.+2680   	; 0xf18 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     4a0:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <pxEnd>
     4a4:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <pxEnd+0x1>
     4a8:	89 2b       	or	r24, r25
     4aa:	41 f5       	brne	.+80     	; 0x4fc <pvPortMalloc+0x70>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4ac:	ec ec       	ldi	r30, 0xCC	; 204
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	a0 ed       	ldi	r26, 0xD0	; 208
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	b1 83       	std	Z+1, r27	; 0x01
     4b6:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     4b8:	13 82       	std	Z+3, r1	; 0x03
     4ba:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     4bc:	e8 ea       	ldi	r30, 0xA8	; 168
     4be:	f6 e0       	ldi	r31, 0x06	; 6
     4c0:	f0 93 cb 00 	sts	0x00CB, r31	; 0x8000cb <pxEnd+0x1>
     4c4:	e0 93 ca 00 	sts	0x00CA, r30	; 0x8000ca <pxEnd>
    pxEnd->xBlockSize = 0;
     4c8:	13 82       	std	Z+3, r1	; 0x03
     4ca:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     4cc:	11 82       	std	Z+1, r1	; 0x01
     4ce:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     4d0:	88 ed       	ldi	r24, 0xD8	; 216
     4d2:	95 e0       	ldi	r25, 0x05	; 5
     4d4:	13 96       	adiw	r26, 0x03	; 3
     4d6:	9c 93       	st	X, r25
     4d8:	8e 93       	st	-X, r24
     4da:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     4dc:	ed 93       	st	X+, r30
     4de:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     4e0:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <xMinimumEverFreeBytesRemaining+0x1>
     4e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     4e8:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <xFreeBytesRemaining+0x1>
     4ec:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e8       	ldi	r25, 0x80	; 128
     4f4:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__data_end+0x1>
     4f8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_end>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     4fc:	e0 90 c0 00 	lds	r14, 0x00C0	; 0x8000c0 <__data_end>
     500:	f0 90 c1 00 	lds	r15, 0x00C1	; 0x8000c1 <__data_end+0x1>
     504:	c7 01       	movw	r24, r14
     506:	8c 23       	and	r24, r28
     508:	9d 23       	and	r25, r29
     50a:	89 2b       	or	r24, r25
     50c:	09 f0       	breq	.+2      	; 0x510 <pvPortMalloc+0x84>
     50e:	6c c0       	rjmp	.+216    	; 0x5e8 <pvPortMalloc+0x15c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     510:	20 97       	sbiw	r28, 0x00	; 0
     512:	09 f4       	brne	.+2      	; 0x516 <pvPortMalloc+0x8a>
     514:	6c c0       	rjmp	.+216    	; 0x5ee <pvPortMalloc+0x162>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     516:	9e 01       	movw	r18, r28
     518:	2c 5f       	subi	r18, 0xFC	; 252
     51a:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     51c:	c2 17       	cp	r28, r18
     51e:	d3 07       	cpc	r29, r19
     520:	08 f0       	brcs	.+2      	; 0x524 <pvPortMalloc+0x98>
     522:	68 c0       	rjmp	.+208    	; 0x5f4 <pvPortMalloc+0x168>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     524:	21 15       	cp	r18, r1
     526:	31 05       	cpc	r19, r1
     528:	09 f4       	brne	.+2      	; 0x52c <pvPortMalloc+0xa0>
     52a:	67 c0       	rjmp	.+206    	; 0x5fa <pvPortMalloc+0x16e>
     52c:	00 91 c8 00 	lds	r16, 0x00C8	; 0x8000c8 <xFreeBytesRemaining>
     530:	10 91 c9 00 	lds	r17, 0x00C9	; 0x8000c9 <xFreeBytesRemaining+0x1>
     534:	02 17       	cp	r16, r18
     536:	13 07       	cpc	r17, r19
     538:	08 f4       	brcc	.+2      	; 0x53c <pvPortMalloc+0xb0>
     53a:	62 c0       	rjmp	.+196    	; 0x600 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     53c:	c0 91 cc 00 	lds	r28, 0x00CC	; 0x8000cc <xStart>
     540:	d0 91 cd 00 	lds	r29, 0x00CD	; 0x8000cd <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     544:	ec ec       	ldi	r30, 0xCC	; 204
     546:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     548:	02 c0       	rjmp	.+4      	; 0x54e <pvPortMalloc+0xc2>
     54a:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
     54c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     54e:	8a 81       	ldd	r24, Y+2	; 0x02
     550:	9b 81       	ldd	r25, Y+3	; 0x03
     552:	82 17       	cp	r24, r18
     554:	93 07       	cpc	r25, r19
     556:	20 f4       	brcc	.+8      	; 0x560 <pvPortMalloc+0xd4>
     558:	88 81       	ld	r24, Y
     55a:	99 81       	ldd	r25, Y+1	; 0x01
     55c:	00 97       	sbiw	r24, 0x00	; 0
     55e:	a9 f7       	brne	.-22     	; 0x54a <pvPortMalloc+0xbe>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     560:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <pxEnd>
     564:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <pxEnd+0x1>
     568:	c8 17       	cp	r28, r24
     56a:	d9 07       	cpc	r29, r25
     56c:	09 f4       	brne	.+2      	; 0x570 <pvPortMalloc+0xe4>
     56e:	4b c0       	rjmp	.+150    	; 0x606 <pvPortMalloc+0x17a>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     570:	c0 80       	ld	r12, Z
     572:	d1 80       	ldd	r13, Z+1	; 0x01
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	c8 0e       	add	r12, r24
     578:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     57a:	88 81       	ld	r24, Y
     57c:	99 81       	ldd	r25, Y+1	; 0x01
     57e:	91 83       	std	Z+1, r25	; 0x01
     580:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     582:	4a 81       	ldd	r20, Y+2	; 0x02
     584:	5b 81       	ldd	r21, Y+3	; 0x03
     586:	42 1b       	sub	r20, r18
     588:	53 0b       	sbc	r21, r19
     58a:	49 30       	cpi	r20, 0x09	; 9
     58c:	51 05       	cpc	r21, r1
     58e:	48 f0       	brcs	.+18     	; 0x5a2 <pvPortMalloc+0x116>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     590:	ce 01       	movw	r24, r28
     592:	82 0f       	add	r24, r18
     594:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     596:	fc 01       	movw	r30, r24
     598:	53 83       	std	Z+3, r21	; 0x03
     59a:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     59c:	3b 83       	std	Y+3, r19	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     59e:	2a 83       	std	Y+2, r18	; 0x02
     5a0:	28 df       	rcall	.-432    	; 0x3f2 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	9b 81       	ldd	r25, Y+3	; 0x03
     5a6:	08 1b       	sub	r16, r24
     5a8:	19 0b       	sbc	r17, r25
     5aa:	10 93 c9 00 	sts	0x00C9, r17	; 0x8000c9 <xFreeBytesRemaining+0x1>
     5ae:	00 93 c8 00 	sts	0x00C8, r16	; 0x8000c8 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5b2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <xMinimumEverFreeBytesRemaining>
     5b6:	30 91 c7 00 	lds	r19, 0x00C7	; 0x8000c7 <xMinimumEverFreeBytesRemaining+0x1>
     5ba:	02 17       	cp	r16, r18
     5bc:	13 07       	cpc	r17, r19
     5be:	20 f4       	brcc	.+8      	; 0x5c8 <pvPortMalloc+0x13c>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     5c0:	10 93 c7 00 	sts	0x00C7, r17	; 0x8000c7 <xMinimumEverFreeBytesRemaining+0x1>
     5c4:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     5c8:	e8 2a       	or	r14, r24
     5ca:	f9 2a       	or	r15, r25
     5cc:	fb 82       	std	Y+3, r15	; 0x03
     5ce:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     5d0:	19 82       	std	Y+1, r1	; 0x01
     5d2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     5d4:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xNumberOfSuccessfulAllocations>
     5d8:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xNumberOfSuccessfulAllocations+0x1>
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <xNumberOfSuccessfulAllocations+0x1>
     5e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <xNumberOfSuccessfulAllocations>
     5e6:	11 c0       	rjmp	.+34     	; 0x60a <pvPortMalloc+0x17e>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     5e8:	c1 2c       	mov	r12, r1
     5ea:	d1 2c       	mov	r13, r1
     5ec:	0e c0       	rjmp	.+28     	; 0x60a <pvPortMalloc+0x17e>
     5ee:	c1 2c       	mov	r12, r1
     5f0:	d1 2c       	mov	r13, r1
     5f2:	0b c0       	rjmp	.+22     	; 0x60a <pvPortMalloc+0x17e>
     5f4:	c1 2c       	mov	r12, r1
     5f6:	d1 2c       	mov	r13, r1
     5f8:	08 c0       	rjmp	.+16     	; 0x60a <pvPortMalloc+0x17e>
     5fa:	c1 2c       	mov	r12, r1
     5fc:	d1 2c       	mov	r13, r1
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <pvPortMalloc+0x17e>
     600:	c1 2c       	mov	r12, r1
     602:	d1 2c       	mov	r13, r1
     604:	02 c0       	rjmp	.+4      	; 0x60a <pvPortMalloc+0x17e>
     606:	c1 2c       	mov	r12, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     608:	d1 2c       	mov	r13, r1
     60a:	36 d5       	rcall	.+2668   	; 0x1078 <xTaskResumeAll>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     60c:	c6 01       	movw	r24, r12
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	df 90       	pop	r13
     61c:	cf 90       	pop	r12
     61e:	08 95       	ret

00000620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     624:	00 97       	sbiw	r24, 0x00	; 0
     626:	89 f1       	breq	.+98     	; 0x68a <vPortFree+0x6a>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     628:	fc 01       	movw	r30, r24
     62a:	34 97       	sbiw	r30, 0x04	; 4
     62c:	22 81       	ldd	r18, Z+2	; 0x02
     62e:	33 81       	ldd	r19, Z+3	; 0x03
     630:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__data_end>
     634:	50 91 c1 00 	lds	r21, 0x00C1	; 0x8000c1 <__data_end+0x1>
     638:	b9 01       	movw	r22, r18
     63a:	64 23       	and	r22, r20
     63c:	75 23       	and	r23, r21
     63e:	67 2b       	or	r22, r23
     640:	21 f1       	breq	.+72     	; 0x68a <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     642:	60 81       	ld	r22, Z
     644:	71 81       	ldd	r23, Z+1	; 0x01
     646:	67 2b       	or	r22, r23
     648:	01 f5       	brne	.+64     	; 0x68a <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     64a:	ef 01       	movw	r28, r30
     64c:	40 95       	com	r20
     64e:	50 95       	com	r21
     650:	24 23       	and	r18, r20
     652:	35 23       	and	r19, r21
     654:	33 83       	std	Z+3, r19	; 0x03
     656:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
     658:	5f d4       	rcall	.+2238   	; 0xf18 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     65a:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <xFreeBytesRemaining>
     65e:	30 91 c9 00 	lds	r19, 0x00C9	; 0x8000c9 <xFreeBytesRemaining+0x1>
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	9b 81       	ldd	r25, Y+3	; 0x03
     666:	82 0f       	add	r24, r18
     668:	93 1f       	adc	r25, r19
     66a:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <xFreeBytesRemaining+0x1>
     66e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     672:	ce 01       	movw	r24, r28
     674:	be de       	rcall	.-644    	; 0x3f2 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     676:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <xNumberOfSuccessfulFrees>
     67a:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <xNumberOfSuccessfulFrees+0x1>
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <xNumberOfSuccessfulFrees+0x1>
     684:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     688:	f7 d4       	rcall	.+2542   	; 0x1078 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <prvIsQueueEmpty>:
        {
            xReturn = pdFAIL;
        }

        return xReturn;
    }
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	0f 92       	push	r0
     696:	fc 01       	movw	r30, r24
     698:	92 8d       	ldd	r25, Z+26	; 0x1a
     69a:	0f 90       	pop	r0
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	91 11       	cpse	r25, r1
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	08 95       	ret

000006a6 <prvCopyDataToQueue>:
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
     6b0:	04 2f       	mov	r16, r20
     6b2:	1a 8d       	ldd	r17, Y+26	; 0x1a
     6b4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     6b6:	44 23       	and	r20, r20
     6b8:	b9 f1       	breq	.+110    	; 0x728 <prvCopyDataToQueue+0x82>
     6ba:	01 11       	cpse	r16, r1
     6bc:	16 c0       	rjmp	.+44     	; 0x6ea <prvCopyDataToQueue+0x44>
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	8a 81       	ldd	r24, Y+2	; 0x02
     6c2:	9b 81       	ldd	r25, Y+3	; 0x03
     6c4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <memcpy>
     6c8:	2c 8d       	ldd	r18, Y+28	; 0x1c
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	9b 81       	ldd	r25, Y+3	; 0x03
     6ce:	82 0f       	add	r24, r18
     6d0:	91 1d       	adc	r25, r1
     6d2:	9b 83       	std	Y+3, r25	; 0x03
     6d4:	8a 83       	std	Y+2, r24	; 0x02
     6d6:	2c 81       	ldd	r18, Y+4	; 0x04
     6d8:	3d 81       	ldd	r19, Y+5	; 0x05
     6da:	82 17       	cp	r24, r18
     6dc:	93 07       	cpc	r25, r19
     6de:	20 f1       	brcs	.+72     	; 0x728 <prvCopyDataToQueue+0x82>
     6e0:	88 81       	ld	r24, Y
     6e2:	99 81       	ldd	r25, Y+1	; 0x01
     6e4:	9b 83       	std	Y+3, r25	; 0x03
     6e6:	8a 83       	std	Y+2, r24	; 0x02
     6e8:	1f c0       	rjmp	.+62     	; 0x728 <prvCopyDataToQueue+0x82>
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	8e 81       	ldd	r24, Y+6	; 0x06
     6ee:	9f 81       	ldd	r25, Y+7	; 0x07
     6f0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <memcpy>
     6f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	91 95       	neg	r25
     6fa:	81 95       	neg	r24
     6fc:	91 09       	sbc	r25, r1
     6fe:	2e 81       	ldd	r18, Y+6	; 0x06
     700:	3f 81       	ldd	r19, Y+7	; 0x07
     702:	28 0f       	add	r18, r24
     704:	39 1f       	adc	r19, r25
     706:	3f 83       	std	Y+7, r19	; 0x07
     708:	2e 83       	std	Y+6, r18	; 0x06
     70a:	48 81       	ld	r20, Y
     70c:	59 81       	ldd	r21, Y+1	; 0x01
     70e:	24 17       	cp	r18, r20
     710:	35 07       	cpc	r19, r21
     712:	30 f4       	brcc	.+12     	; 0x720 <prvCopyDataToQueue+0x7a>
     714:	2c 81       	ldd	r18, Y+4	; 0x04
     716:	3d 81       	ldd	r19, Y+5	; 0x05
     718:	82 0f       	add	r24, r18
     71a:	93 1f       	adc	r25, r19
     71c:	9f 83       	std	Y+7, r25	; 0x07
     71e:	8e 83       	std	Y+6, r24	; 0x06
     720:	02 30       	cpi	r16, 0x02	; 2
     722:	11 f4       	brne	.+4      	; 0x728 <prvCopyDataToQueue+0x82>
     724:	11 11       	cpse	r17, r1
     726:	11 50       	subi	r17, 0x01	; 1
     728:	1f 5f       	subi	r17, 0xFF	; 255
     72a:	1a 8f       	std	Y+26, r17	; 0x1a
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <prvCopyDataFromQueue>:
     738:	fc 01       	movw	r30, r24
     73a:	44 8d       	ldd	r20, Z+28	; 0x1c
     73c:	44 23       	and	r20, r20
     73e:	a9 f0       	breq	.+42     	; 0x76a <prvCopyDataFromQueue+0x32>
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	26 81       	ldd	r18, Z+6	; 0x06
     744:	37 81       	ldd	r19, Z+7	; 0x07
     746:	24 0f       	add	r18, r20
     748:	35 1f       	adc	r19, r21
     74a:	37 83       	std	Z+7, r19	; 0x07
     74c:	26 83       	std	Z+6, r18	; 0x06
     74e:	84 81       	ldd	r24, Z+4	; 0x04
     750:	95 81       	ldd	r25, Z+5	; 0x05
     752:	28 17       	cp	r18, r24
     754:	39 07       	cpc	r19, r25
     756:	20 f0       	brcs	.+8      	; 0x760 <prvCopyDataFromQueue+0x28>
     758:	80 81       	ld	r24, Z
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	97 83       	std	Z+7, r25	; 0x07
     75e:	86 83       	std	Z+6, r24	; 0x06
     760:	cb 01       	movw	r24, r22
     762:	66 81       	ldd	r22, Z+6	; 0x06
     764:	77 81       	ldd	r23, Z+7	; 0x07
     766:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <memcpy>
     76a:	08 95       	ret

0000076c <prvUnlockQueue>:
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	8c 01       	movw	r16, r24
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	0f 92       	push	r0
     77e:	fc 01       	movw	r30, r24
     780:	c6 8d       	ldd	r28, Z+30	; 0x1e
     782:	1c 16       	cp	r1, r28
     784:	9c f4       	brge	.+38     	; 0x7ac <prvUnlockQueue+0x40>
     786:	81 89       	ldd	r24, Z+17	; 0x11
     788:	81 11       	cpse	r24, r1
     78a:	06 c0       	rjmp	.+12     	; 0x798 <prvUnlockQueue+0x2c>
     78c:	0f c0       	rjmp	.+30     	; 0x7ac <prvUnlockQueue+0x40>
     78e:	f8 01       	movw	r30, r16
     790:	81 89       	ldd	r24, Z+17	; 0x11
     792:	81 11       	cpse	r24, r1
     794:	05 c0       	rjmp	.+10     	; 0x7a0 <prvUnlockQueue+0x34>
     796:	0a c0       	rjmp	.+20     	; 0x7ac <prvUnlockQueue+0x40>
     798:	78 01       	movw	r14, r16
     79a:	f1 e1       	ldi	r31, 0x11	; 17
     79c:	ef 0e       	add	r14, r31
     79e:	f1 1c       	adc	r15, r1
     7a0:	c7 01       	movw	r24, r14
     7a2:	70 d5       	rcall	.+2784   	; 0x1284 <xTaskRemoveFromEventList>
     7a4:	81 11       	cpse	r24, r1
     7a6:	f9 d5       	rcall	.+3058   	; 0x139a <vTaskMissedYield>
     7a8:	c1 50       	subi	r28, 0x01	; 1
     7aa:	89 f7       	brne	.-30     	; 0x78e <prvUnlockQueue+0x22>
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	f8 01       	movw	r30, r16
     7b0:	86 8f       	std	Z+30, r24	; 0x1e
     7b2:	0f 90       	pop	r0
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	0f 92       	push	r0
     7bc:	c5 8d       	ldd	r28, Z+29	; 0x1d
     7be:	1c 16       	cp	r1, r28
     7c0:	9c f4       	brge	.+38     	; 0x7e8 <prvUnlockQueue+0x7c>
     7c2:	80 85       	ldd	r24, Z+8	; 0x08
     7c4:	81 11       	cpse	r24, r1
     7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <prvUnlockQueue+0x68>
     7c8:	0f c0       	rjmp	.+30     	; 0x7e8 <prvUnlockQueue+0x7c>
     7ca:	f8 01       	movw	r30, r16
     7cc:	80 85       	ldd	r24, Z+8	; 0x08
     7ce:	81 11       	cpse	r24, r1
     7d0:	05 c0       	rjmp	.+10     	; 0x7dc <prvUnlockQueue+0x70>
     7d2:	0a c0       	rjmp	.+20     	; 0x7e8 <prvUnlockQueue+0x7c>
     7d4:	78 01       	movw	r14, r16
     7d6:	f8 e0       	ldi	r31, 0x08	; 8
     7d8:	ef 0e       	add	r14, r31
     7da:	f1 1c       	adc	r15, r1
     7dc:	c7 01       	movw	r24, r14
     7de:	52 d5       	rcall	.+2724   	; 0x1284 <xTaskRemoveFromEventList>
     7e0:	81 11       	cpse	r24, r1
     7e2:	db d5       	rcall	.+2998   	; 0x139a <vTaskMissedYield>
     7e4:	c1 50       	subi	r28, 0x01	; 1
     7e6:	89 f7       	brne	.-30     	; 0x7ca <prvUnlockQueue+0x5e>
     7e8:	8f ef       	ldi	r24, 0xFF	; 255
     7ea:	f8 01       	movw	r30, r16
     7ec:	85 8f       	std	Z+29, r24	; 0x1d
     7ee:	0f 90       	pop	r0
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	08 95       	ret

000007fe <xQueueGenericReset>:
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ec 01       	movw	r28, r24
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	0f 92       	push	r0
     80a:	e8 81       	ld	r30, Y
     80c:	f9 81       	ldd	r31, Y+1	; 0x01
     80e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     810:	2c 8d       	ldd	r18, Y+28	; 0x1c
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	82 9f       	mul	r24, r18
     818:	a0 01       	movw	r20, r0
     81a:	83 9f       	mul	r24, r19
     81c:	50 0d       	add	r21, r0
     81e:	92 9f       	mul	r25, r18
     820:	50 0d       	add	r21, r0
     822:	11 24       	eor	r1, r1
     824:	4e 0f       	add	r20, r30
     826:	5f 1f       	adc	r21, r31
     828:	5d 83       	std	Y+5, r21	; 0x05
     82a:	4c 83       	std	Y+4, r20	; 0x04
     82c:	1a 8e       	std	Y+26, r1	; 0x1a
     82e:	fb 83       	std	Y+3, r31	; 0x03
     830:	ea 83       	std	Y+2, r30	; 0x02
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	82 9f       	mul	r24, r18
     836:	a0 01       	movw	r20, r0
     838:	83 9f       	mul	r24, r19
     83a:	50 0d       	add	r21, r0
     83c:	92 9f       	mul	r25, r18
     83e:	50 0d       	add	r21, r0
     840:	11 24       	eor	r1, r1
     842:	cf 01       	movw	r24, r30
     844:	84 0f       	add	r24, r20
     846:	95 1f       	adc	r25, r21
     848:	9f 83       	std	Y+7, r25	; 0x07
     84a:	8e 83       	std	Y+6, r24	; 0x06
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	8d 8f       	std	Y+29, r24	; 0x1d
     850:	8e 8f       	std	Y+30, r24	; 0x1e
     852:	61 11       	cpse	r22, r1
     854:	07 c0       	rjmp	.+14     	; 0x864 <__stack+0x5>
     856:	88 85       	ldd	r24, Y+8	; 0x08
     858:	88 23       	and	r24, r24
     85a:	51 f0       	breq	.+20     	; 0x870 <__stack+0x11>
     85c:	ce 01       	movw	r24, r28
     85e:	08 96       	adiw	r24, 0x08	; 8
     860:	11 d5       	rcall	.+2594   	; 0x1284 <xTaskRemoveFromEventList>
     862:	06 c0       	rjmp	.+12     	; 0x870 <__stack+0x11>
     864:	ce 01       	movw	r24, r28
     866:	08 96       	adiw	r24, 0x08	; 8
     868:	1d dc       	rcall	.-1990   	; 0xa4 <vListInitialise>
     86a:	ce 01       	movw	r24, r28
     86c:	41 96       	adiw	r24, 0x11	; 17
     86e:	1a dc       	rcall	.-1996   	; 0xa4 <vListInitialise>
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <xQueueGenericCreate>:
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	08 2f       	mov	r16, r24
     886:	16 2f       	mov	r17, r22
     888:	86 9f       	mul	r24, r22
     88a:	c0 01       	movw	r24, r0
     88c:	11 24       	eor	r1, r1
     88e:	4f 96       	adiw	r24, 0x1f	; 31
     890:	fd dd       	rcall	.-1030   	; 0x48c <pvPortMalloc>
     892:	ec 01       	movw	r28, r24
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	69 f0       	breq	.+26     	; 0x8b2 <xQueueGenericCreate+0x36>
     898:	11 11       	cpse	r17, r1
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <xQueueGenericCreate+0x26>
     89c:	99 83       	std	Y+1, r25	; 0x01
     89e:	88 83       	st	Y, r24
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <xQueueGenericCreate+0x2c>
     8a2:	4f 96       	adiw	r24, 0x1f	; 31
     8a4:	99 83       	std	Y+1, r25	; 0x01
     8a6:	88 83       	st	Y, r24
     8a8:	0b 8f       	std	Y+27, r16	; 0x1b
     8aa:	1c 8f       	std	Y+28, r17	; 0x1c
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	ce 01       	movw	r24, r28
     8b0:	a6 df       	rcall	.-180    	; 0x7fe <xQueueGenericReset>
     8b2:	ce 01       	movw	r24, r28
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	08 95       	ret

000008be <xQueueGenericSend>:
     8be:	9f 92       	push	r9
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <xQueueGenericSend+0x18>
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <xQueueGenericSend+0x1a>
     8d8:	1f 92       	push	r1
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	8c 01       	movw	r16, r24
     8e0:	6b 01       	movw	r12, r22
     8e2:	5d 83       	std	Y+5, r21	; 0x05
     8e4:	4c 83       	std	Y+4, r20	; 0x04
     8e6:	a2 2e       	mov	r10, r18
     8e8:	b1 2c       	mov	r11, r1
     8ea:	99 24       	eor	r9, r9
     8ec:	93 94       	inc	r9
     8ee:	7c 01       	movw	r14, r24
     8f0:	88 e0       	ldi	r24, 0x08	; 8
     8f2:	e8 0e       	add	r14, r24
     8f4:	f1 1c       	adc	r15, r1
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	0f 92       	push	r0
     8fc:	f8 01       	movw	r30, r16
     8fe:	92 8d       	ldd	r25, Z+26	; 0x1a
     900:	83 8d       	ldd	r24, Z+27	; 0x1b
     902:	98 17       	cp	r25, r24
     904:	18 f0       	brcs	.+6      	; 0x90c <xQueueGenericSend+0x4e>
     906:	f2 e0       	ldi	r31, 0x02	; 2
     908:	af 12       	cpse	r10, r31
     90a:	0f c0       	rjmp	.+30     	; 0x92a <xQueueGenericSend+0x6c>
     90c:	4a 2d       	mov	r20, r10
     90e:	b6 01       	movw	r22, r12
     910:	c8 01       	movw	r24, r16
     912:	c9 de       	rcall	.-622    	; 0x6a6 <prvCopyDataToQueue>
     914:	f8 01       	movw	r30, r16
     916:	81 89       	ldd	r24, Z+17	; 0x11
     918:	88 23       	and	r24, r24
     91a:	19 f0       	breq	.+6      	; 0x922 <xQueueGenericSend+0x64>
     91c:	c8 01       	movw	r24, r16
     91e:	41 96       	adiw	r24, 0x11	; 17
     920:	b1 d4       	rcall	.+2402   	; 0x1284 <xTaskRemoveFromEventList>
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	45 c0       	rjmp	.+138    	; 0x9b4 <xQueueGenericSend+0xf6>
     92a:	8c 81       	ldd	r24, Y+4	; 0x04
     92c:	9d 81       	ldd	r25, Y+5	; 0x05
     92e:	89 2b       	or	r24, r25
     930:	21 f4       	brne	.+8      	; 0x93a <xQueueGenericSend+0x7c>
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	3d c0       	rjmp	.+122    	; 0x9b4 <xQueueGenericSend+0xf6>
     93a:	b1 10       	cpse	r11, r1
     93c:	04 c0       	rjmp	.+8      	; 0x946 <xQueueGenericSend+0x88>
     93e:	ce 01       	movw	r24, r28
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	e8 d4       	rcall	.+2512   	; 0x1314 <vTaskInternalSetTimeOutState>
     944:	b9 2c       	mov	r11, r9
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	e6 d2       	rcall	.+1484   	; 0xf18 <vTaskSuspendAll>
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	0f 92       	push	r0
     952:	f8 01       	movw	r30, r16
     954:	85 8d       	ldd	r24, Z+29	; 0x1d
     956:	8f 3f       	cpi	r24, 0xFF	; 255
     958:	09 f4       	brne	.+2      	; 0x95c <xQueueGenericSend+0x9e>
     95a:	15 8e       	std	Z+29, r1	; 0x1d
     95c:	f8 01       	movw	r30, r16
     95e:	86 8d       	ldd	r24, Z+30	; 0x1e
     960:	8f 3f       	cpi	r24, 0xFF	; 255
     962:	09 f4       	brne	.+2      	; 0x966 <xQueueGenericSend+0xa8>
     964:	16 8e       	std	Z+30, r1	; 0x1e
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	be 01       	movw	r22, r28
     96c:	6c 5f       	subi	r22, 0xFC	; 252
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	da d4       	rcall	.+2484   	; 0x132a <xTaskCheckForTimeOut>
     976:	81 11       	cpse	r24, r1
     978:	19 c0       	rjmp	.+50     	; 0x9ac <xQueueGenericSend+0xee>
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	0f 92       	push	r0
     980:	f8 01       	movw	r30, r16
     982:	92 8d       	ldd	r25, Z+26	; 0x1a
     984:	0f 90       	pop	r0
     986:	0f be       	out	0x3f, r0	; 63
     988:	83 8d       	ldd	r24, Z+27	; 0x1b
     98a:	98 13       	cpse	r25, r24
     98c:	0b c0       	rjmp	.+22     	; 0x9a4 <xQueueGenericSend+0xe6>
     98e:	6c 81       	ldd	r22, Y+4	; 0x04
     990:	7d 81       	ldd	r23, Y+5	; 0x05
     992:	c7 01       	movw	r24, r14
     994:	4e d4       	rcall	.+2204   	; 0x1232 <vTaskPlaceOnEventList>
     996:	c8 01       	movw	r24, r16
     998:	e9 de       	rcall	.-558    	; 0x76c <prvUnlockQueue>
     99a:	6e d3       	rcall	.+1756   	; 0x1078 <xTaskResumeAll>
     99c:	81 11       	cpse	r24, r1
     99e:	ab cf       	rjmp	.-170    	; 0x8f6 <xQueueGenericSend+0x38>
     9a0:	ad dc       	rcall	.-1702   	; 0x2fc <vPortYield>
     9a2:	a9 cf       	rjmp	.-174    	; 0x8f6 <xQueueGenericSend+0x38>
     9a4:	c8 01       	movw	r24, r16
     9a6:	e2 de       	rcall	.-572    	; 0x76c <prvUnlockQueue>
     9a8:	67 d3       	rcall	.+1742   	; 0x1078 <xTaskResumeAll>
     9aa:	a5 cf       	rjmp	.-182    	; 0x8f6 <xQueueGenericSend+0x38>
     9ac:	c8 01       	movw	r24, r16
     9ae:	de de       	rcall	.-580    	; 0x76c <prvUnlockQueue>
     9b0:	63 d3       	rcall	.+1734   	; 0x1078 <xTaskResumeAll>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	9f 90       	pop	r9
     9d4:	08 95       	ret

000009d6 <xQueueGenericSendFromISR>:
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	8a 01       	movw	r16, r20
     9e4:	fc 01       	movw	r30, r24
     9e6:	52 8d       	ldd	r21, Z+26	; 0x1a
     9e8:	33 8d       	ldd	r19, Z+27	; 0x1b
     9ea:	53 17       	cp	r21, r19
     9ec:	10 f0       	brcs	.+4      	; 0x9f2 <xQueueGenericSendFromISR+0x1c>
     9ee:	22 30       	cpi	r18, 0x02	; 2
     9f0:	f1 f4       	brne	.+60     	; 0xa2e <xQueueGenericSendFromISR+0x58>
     9f2:	42 2f       	mov	r20, r18
     9f4:	78 01       	movw	r14, r16
     9f6:	ec 01       	movw	r28, r24
     9f8:	1e 8d       	ldd	r17, Y+30	; 0x1e
     9fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9fc:	ce 01       	movw	r24, r28
     9fe:	53 de       	rcall	.-858    	; 0x6a6 <prvCopyDataToQueue>
     a00:	1f 3f       	cpi	r17, 0xFF	; 255
     a02:	79 f4       	brne	.+30     	; 0xa22 <xQueueGenericSendFromISR+0x4c>
     a04:	89 89       	ldd	r24, Y+17	; 0x11
     a06:	88 23       	and	r24, r24
     a08:	a1 f0       	breq	.+40     	; 0xa32 <xQueueGenericSendFromISR+0x5c>
     a0a:	ce 01       	movw	r24, r28
     a0c:	41 96       	adiw	r24, 0x11	; 17
     a0e:	3a d4       	rcall	.+2164   	; 0x1284 <xTaskRemoveFromEventList>
     a10:	88 23       	and	r24, r24
     a12:	89 f0       	breq	.+34     	; 0xa36 <xQueueGenericSendFromISR+0x60>
     a14:	e1 14       	cp	r14, r1
     a16:	f1 04       	cpc	r15, r1
     a18:	81 f0       	breq	.+32     	; 0xa3a <xQueueGenericSendFromISR+0x64>
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	f7 01       	movw	r30, r14
     a1e:	80 83       	st	Z, r24
     a20:	0d c0       	rjmp	.+26     	; 0xa3c <xQueueGenericSendFromISR+0x66>
     a22:	ff 24       	eor	r15, r15
     a24:	f3 94       	inc	r15
     a26:	f1 0e       	add	r15, r17
     a28:	fe 8e       	std	Y+30, r15	; 0x1e
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	07 c0       	rjmp	.+14     	; 0xa3c <xQueueGenericSendFromISR+0x66>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	05 c0       	rjmp	.+10     	; 0xa3c <xQueueGenericSendFromISR+0x66>
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	03 c0       	rjmp	.+6      	; 0xa3c <xQueueGenericSendFromISR+0x66>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <xQueueGenericSendFromISR+0x66>
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	08 95       	ret

00000a4a <xQueueReceive>:
     a4a:	9f 92       	push	r9
     a4c:	af 92       	push	r10
     a4e:	bf 92       	push	r11
     a50:	cf 92       	push	r12
     a52:	df 92       	push	r13
     a54:	ef 92       	push	r14
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	00 d0       	rcall	.+0      	; 0xa62 <xQueueReceive+0x18>
     a62:	00 d0       	rcall	.+0      	; 0xa64 <xQueueReceive+0x1a>
     a64:	1f 92       	push	r1
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	8c 01       	movw	r16, r24
     a6c:	5b 01       	movw	r10, r22
     a6e:	5d 83       	std	Y+5, r21	; 0x05
     a70:	4c 83       	std	Y+4, r20	; 0x04
     a72:	e1 2c       	mov	r14, r1
     a74:	99 24       	eor	r9, r9
     a76:	93 94       	inc	r9
     a78:	6c 01       	movw	r12, r24
     a7a:	81 e1       	ldi	r24, 0x11	; 17
     a7c:	c8 0e       	add	r12, r24
     a7e:	d1 1c       	adc	r13, r1
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	0f 92       	push	r0
     a86:	f8 01       	movw	r30, r16
     a88:	f2 8c       	ldd	r15, Z+26	; 0x1a
     a8a:	ff 20       	and	r15, r15
     a8c:	81 f0       	breq	.+32     	; 0xaae <xQueueReceive+0x64>
     a8e:	b5 01       	movw	r22, r10
     a90:	c8 01       	movw	r24, r16
     a92:	52 de       	rcall	.-860    	; 0x738 <prvCopyDataFromQueue>
     a94:	fa 94       	dec	r15
     a96:	f8 01       	movw	r30, r16
     a98:	f2 8e       	std	Z+26, r15	; 0x1a
     a9a:	80 85       	ldd	r24, Z+8	; 0x08
     a9c:	88 23       	and	r24, r24
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <xQueueReceive+0x5c>
     aa0:	c8 01       	movw	r24, r16
     aa2:	08 96       	adiw	r24, 0x08	; 8
     aa4:	ef d3       	rcall	.+2014   	; 0x1284 <xTaskRemoveFromEventList>
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	44 c0       	rjmp	.+136    	; 0xb36 <xQueueReceive+0xec>
     aae:	8c 81       	ldd	r24, Y+4	; 0x04
     ab0:	9d 81       	ldd	r25, Y+5	; 0x05
     ab2:	89 2b       	or	r24, r25
     ab4:	21 f4       	brne	.+8      	; 0xabe <xQueueReceive+0x74>
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	3c c0       	rjmp	.+120    	; 0xb36 <xQueueReceive+0xec>
     abe:	e1 10       	cpse	r14, r1
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <xQueueReceive+0x80>
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	26 d4       	rcall	.+2124   	; 0x1314 <vTaskInternalSetTimeOutState>
     ac8:	e9 2c       	mov	r14, r9
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	24 d2       	rcall	.+1096   	; 0xf18 <vTaskSuspendAll>
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	0f 92       	push	r0
     ad6:	f8 01       	movw	r30, r16
     ad8:	85 8d       	ldd	r24, Z+29	; 0x1d
     ada:	8f 3f       	cpi	r24, 0xFF	; 255
     adc:	09 f4       	brne	.+2      	; 0xae0 <xQueueReceive+0x96>
     ade:	15 8e       	std	Z+29, r1	; 0x1d
     ae0:	f8 01       	movw	r30, r16
     ae2:	86 8d       	ldd	r24, Z+30	; 0x1e
     ae4:	8f 3f       	cpi	r24, 0xFF	; 255
     ae6:	09 f4       	brne	.+2      	; 0xaea <xQueueReceive+0xa0>
     ae8:	16 8e       	std	Z+30, r1	; 0x1e
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	be 01       	movw	r22, r28
     af0:	6c 5f       	subi	r22, 0xFC	; 252
     af2:	7f 4f       	sbci	r23, 0xFF	; 255
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	18 d4       	rcall	.+2096   	; 0x132a <xTaskCheckForTimeOut>
     afa:	81 11       	cpse	r24, r1
     afc:	13 c0       	rjmp	.+38     	; 0xb24 <xQueueReceive+0xda>
     afe:	c8 01       	movw	r24, r16
     b00:	c7 dd       	rcall	.-1138   	; 0x690 <prvIsQueueEmpty>
     b02:	88 23       	and	r24, r24
     b04:	59 f0       	breq	.+22     	; 0xb1c <xQueueReceive+0xd2>
     b06:	6c 81       	ldd	r22, Y+4	; 0x04
     b08:	7d 81       	ldd	r23, Y+5	; 0x05
     b0a:	c6 01       	movw	r24, r12
     b0c:	92 d3       	rcall	.+1828   	; 0x1232 <vTaskPlaceOnEventList>
     b0e:	c8 01       	movw	r24, r16
     b10:	2d de       	rcall	.-934    	; 0x76c <prvUnlockQueue>
     b12:	b2 d2       	rcall	.+1380   	; 0x1078 <xTaskResumeAll>
     b14:	81 11       	cpse	r24, r1
     b16:	b4 cf       	rjmp	.-152    	; 0xa80 <xQueueReceive+0x36>
     b18:	f1 db       	rcall	.-2078   	; 0x2fc <vPortYield>
     b1a:	b2 cf       	rjmp	.-156    	; 0xa80 <xQueueReceive+0x36>
     b1c:	c8 01       	movw	r24, r16
     b1e:	26 de       	rcall	.-948    	; 0x76c <prvUnlockQueue>
     b20:	ab d2       	rcall	.+1366   	; 0x1078 <xTaskResumeAll>
     b22:	ae cf       	rjmp	.-164    	; 0xa80 <xQueueReceive+0x36>
     b24:	c8 01       	movw	r24, r16
     b26:	22 de       	rcall	.-956    	; 0x76c <prvUnlockQueue>
     b28:	a7 d2       	rcall	.+1358   	; 0x1078 <xTaskResumeAll>
     b2a:	c8 01       	movw	r24, r16
     b2c:	b1 dd       	rcall	.-1182   	; 0x690 <prvIsQueueEmpty>
     b2e:	88 23       	and	r24, r24
     b30:	09 f4       	brne	.+2      	; 0xb34 <xQueueReceive+0xea>
     b32:	a6 cf       	rjmp	.-180    	; 0xa80 <xQueueReceive+0x36>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	bf 90       	pop	r11
     b52:	af 90       	pop	r10
     b54:	9f 90       	pop	r9
     b56:	08 95       	ret

00000b58 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	0f 92       	push	r0
     b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b66:	8f 3f       	cpi	r24, 0xFF	; 255
     b68:	09 f4       	brne	.+2      	; 0xb6c <vQueueWaitForMessageRestricted+0x14>
     b6a:	1d 8e       	std	Y+29, r1	; 0x1d
     b6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b6e:	8f 3f       	cpi	r24, 0xFF	; 255
     b70:	09 f4       	brne	.+2      	; 0xb74 <vQueueWaitForMessageRestricted+0x1c>
     b72:	1e 8e       	std	Y+30, r1	; 0x1e
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     b78:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b7a:	81 11       	cpse	r24, r1
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     b7e:	ce 01       	movw	r24, r28
     b80:	41 96       	adiw	r24, 0x11	; 17
     b82:	68 d3       	rcall	.+1744   	; 0x1254 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     b84:	ce 01       	movw	r24, r28
     b86:	f2 dd       	rcall	.-1052   	; 0x76c <prvUnlockQueue>
    }
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     b8e:	e0 91 d9 06 	lds	r30, 0x06D9	; 0x8006d9 <pxDelayedTaskList>
     b92:	f0 91 da 06 	lds	r31, 0x06DA	; 0x8006da <pxDelayedTaskList+0x1>
     b96:	80 81       	ld	r24, Z
     b98:	81 11       	cpse	r24, r1
     b9a:	07 c0       	rjmp	.+14     	; 0xbaa <prvResetNextTaskUnblockTime+0x1c>
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <xNextTaskUnblockTime+0x1>
     ba4:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <xNextTaskUnblockTime>
     ba8:	08 95       	ret
     baa:	e0 91 d9 06 	lds	r30, 0x06D9	; 0x8006d9 <pxDelayedTaskList>
     bae:	f0 91 da 06 	lds	r31, 0x06DA	; 0x8006da <pxDelayedTaskList+0x1>
     bb2:	05 80       	ldd	r0, Z+5	; 0x05
     bb4:	f6 81       	ldd	r31, Z+6	; 0x06
     bb6:	e0 2d       	mov	r30, r0
     bb8:	80 81       	ld	r24, Z
     bba:	91 81       	ldd	r25, Z+1	; 0x01
     bbc:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <xNextTaskUnblockTime+0x1>
     bc0:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <xNextTaskUnblockTime>
     bc4:	08 95       	ret

00000bc6 <prvAddCurrentTaskToDelayedList>:
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	ec 01       	movw	r28, r24
     bd2:	f6 2e       	mov	r15, r22
     bd4:	00 91 b8 06 	lds	r16, 0x06B8	; 0x8006b8 <xTickCount>
     bd8:	10 91 b9 06 	lds	r17, 0x06B9	; 0x8006b9 <xTickCount+0x1>
     bdc:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxCurrentTCB>
     be0:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     be4:	02 96       	adiw	r24, 0x02	; 2
     be6:	c2 da       	rcall	.-2684   	; 0x16c <uxListRemove>
     be8:	cf 3f       	cpi	r28, 0xFF	; 255
     bea:	8f ef       	ldi	r24, 0xFF	; 255
     bec:	d8 07       	cpc	r29, r24
     bee:	61 f4       	brne	.+24     	; 0xc08 <prvAddCurrentTaskToDelayedList+0x42>
     bf0:	ff 20       	and	r15, r15
     bf2:	51 f0       	breq	.+20     	; 0xc08 <prvAddCurrentTaskToDelayedList+0x42>
     bf4:	60 91 11 07 	lds	r22, 0x0711	; 0x800711 <pxCurrentTCB>
     bf8:	70 91 12 07 	lds	r23, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     bfc:	6e 5f       	subi	r22, 0xFE	; 254
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	8b eb       	ldi	r24, 0xBB	; 187
     c02:	96 e0       	ldi	r25, 0x06	; 6
     c04:	61 da       	rcall	.-2878   	; 0xc8 <vListInsertEnd>
     c06:	2d c0       	rjmp	.+90     	; 0xc62 <prvAddCurrentTaskToDelayedList+0x9c>
     c08:	c0 0f       	add	r28, r16
     c0a:	d1 1f       	adc	r29, r17
     c0c:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <pxCurrentTCB>
     c10:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     c14:	d3 83       	std	Z+3, r29	; 0x03
     c16:	c2 83       	std	Z+2, r28	; 0x02
     c18:	c0 17       	cp	r28, r16
     c1a:	d1 07       	cpc	r29, r17
     c1c:	60 f4       	brcc	.+24     	; 0xc36 <prvAddCurrentTaskToDelayedList+0x70>
     c1e:	60 91 11 07 	lds	r22, 0x0711	; 0x800711 <pxCurrentTCB>
     c22:	70 91 12 07 	lds	r23, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     c26:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <pxOverflowDelayedTaskList>
     c2a:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <pxOverflowDelayedTaskList+0x1>
     c2e:	6e 5f       	subi	r22, 0xFE	; 254
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	6b da       	rcall	.-2858   	; 0x10a <vListInsert>
     c34:	16 c0       	rjmp	.+44     	; 0xc62 <prvAddCurrentTaskToDelayedList+0x9c>
     c36:	60 91 11 07 	lds	r22, 0x0711	; 0x800711 <pxCurrentTCB>
     c3a:	70 91 12 07 	lds	r23, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     c3e:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <pxDelayedTaskList>
     c42:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <pxDelayedTaskList+0x1>
     c46:	6e 5f       	subi	r22, 0xFE	; 254
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	5f da       	rcall	.-2882   	; 0x10a <vListInsert>
     c4c:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <xNextTaskUnblockTime>
     c50:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <xNextTaskUnblockTime+0x1>
     c54:	c8 17       	cp	r28, r24
     c56:	d9 07       	cpc	r29, r25
     c58:	20 f4       	brcc	.+8      	; 0xc62 <prvAddCurrentTaskToDelayedList+0x9c>
     c5a:	d0 93 b0 06 	sts	0x06B0, r29	; 0x8006b0 <xNextTaskUnblockTime+0x1>
     c5e:	c0 93 af 06 	sts	0x06AF, r28	; 0x8006af <xNextTaskUnblockTime>
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	08 95       	ret

00000c6e <prvIdleTask>:
     c6e:	05 ec       	ldi	r16, 0xC5	; 197
     c70:	16 e0       	ldi	r17, 0x06	; 6
     c72:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <uxDeletedTasksWaitingCleanUp>
     c76:	88 23       	and	r24, r24
     c78:	11 f1       	breq	.+68     	; 0xcbe <prvIdleTask+0x50>
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	0f 92       	push	r0
     c80:	d8 01       	movw	r26, r16
     c82:	15 96       	adiw	r26, 0x05	; 5
     c84:	ed 91       	ld	r30, X+
     c86:	fc 91       	ld	r31, X
     c88:	16 97       	sbiw	r26, 0x06	; 6
     c8a:	c6 81       	ldd	r28, Z+6	; 0x06
     c8c:	d7 81       	ldd	r29, Z+7	; 0x07
     c8e:	ce 01       	movw	r24, r28
     c90:	02 96       	adiw	r24, 0x02	; 2
     c92:	6c da       	rcall	.-2856   	; 0x16c <uxListRemove>
     c94:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <uxCurrentNumberOfTasks>
     c98:	81 50       	subi	r24, 0x01	; 1
     c9a:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <uxCurrentNumberOfTasks>
     c9e:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <uxDeletedTasksWaitingCleanUp>
     ca2:	81 50       	subi	r24, 0x01	; 1
     ca4:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <uxDeletedTasksWaitingCleanUp>
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	8f 89       	ldd	r24, Y+23	; 0x17
     cae:	98 8d       	ldd	r25, Y+24	; 0x18
     cb0:	b7 dc       	rcall	.-1682   	; 0x620 <vPortFree>
     cb2:	ce 01       	movw	r24, r28
     cb4:	b5 dc       	rcall	.-1686   	; 0x620 <vPortFree>
     cb6:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <uxDeletedTasksWaitingCleanUp>
     cba:	81 11       	cpse	r24, r1
     cbc:	de cf       	rjmp	.-68     	; 0xc7a <prvIdleTask+0xc>
     cbe:	1e db       	rcall	.-2500   	; 0x2fc <vPortYield>
     cc0:	6e d6       	rcall	.+3292   	; 0x199e <vApplicationIdleHook>
     cc2:	d7 cf       	rjmp	.-82     	; 0xc72 <prvIdleTask+0x4>

00000cc4 <xTaskCreate>:
     cc4:	4f 92       	push	r4
     cc6:	5f 92       	push	r5
     cc8:	6f 92       	push	r6
     cca:	7f 92       	push	r7
     ccc:	8f 92       	push	r8
     cce:	9f 92       	push	r9
     cd0:	af 92       	push	r10
     cd2:	bf 92       	push	r11
     cd4:	cf 92       	push	r12
     cd6:	df 92       	push	r13
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	4c 01       	movw	r8, r24
     ce4:	6b 01       	movw	r12, r22
     ce6:	5a 01       	movw	r10, r20
     ce8:	29 01       	movw	r4, r18
     cea:	ca 01       	movw	r24, r20
     cec:	cf db       	rcall	.-2146   	; 0x48c <pvPortMalloc>
     cee:	3c 01       	movw	r6, r24
     cf0:	89 2b       	or	r24, r25
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <xTaskCreate+0x32>
     cf4:	d3 c0       	rjmp	.+422    	; 0xe9c <xTaskCreate+0x1d8>
     cf6:	86 e2       	ldi	r24, 0x26	; 38
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	c8 db       	rcall	.-2160   	; 0x48c <pvPortMalloc>
     cfc:	ec 01       	movw	r28, r24
     cfe:	89 2b       	or	r24, r25
     d00:	59 f0       	breq	.+22     	; 0xd18 <xTaskCreate+0x54>
     d02:	78 8e       	std	Y+24, r7	; 0x18
     d04:	6f 8a       	std	Y+23, r6	; 0x17
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	a8 1a       	sub	r10, r24
     d0a:	b1 08       	sbc	r11, r1
     d0c:	a6 0c       	add	r10, r6
     d0e:	b7 1c       	adc	r11, r7
     d10:	c1 14       	cp	r12, r1
     d12:	d1 04       	cpc	r13, r1
     d14:	21 f4       	brne	.+8      	; 0xd1e <xTaskCreate+0x5a>
     d16:	1f c0       	rjmp	.+62     	; 0xd56 <xTaskCreate+0x92>
     d18:	c3 01       	movw	r24, r6
     d1a:	82 dc       	rcall	.-1788   	; 0x620 <vPortFree>
     d1c:	bf c0       	rjmp	.+382    	; 0xe9c <xTaskCreate+0x1d8>
     d1e:	d6 01       	movw	r26, r12
     d20:	8c 91       	ld	r24, X
     d22:	89 8f       	std	Y+25, r24	; 0x19
     d24:	8c 91       	ld	r24, X
     d26:	88 23       	and	r24, r24
     d28:	a1 f0       	breq	.+40     	; 0xd52 <xTaskCreate+0x8e>
     d2a:	ae 01       	movw	r20, r28
     d2c:	46 5e       	subi	r20, 0xE6	; 230
     d2e:	5f 4f       	sbci	r21, 0xFF	; 255
     d30:	f6 01       	movw	r30, r12
     d32:	31 96       	adiw	r30, 0x01	; 1
     d34:	b8 e0       	ldi	r27, 0x08	; 8
     d36:	cb 0e       	add	r12, r27
     d38:	d1 1c       	adc	r13, r1
     d3a:	cf 01       	movw	r24, r30
     d3c:	21 91       	ld	r18, Z+
     d3e:	da 01       	movw	r26, r20
     d40:	2d 93       	st	X+, r18
     d42:	ad 01       	movw	r20, r26
     d44:	dc 01       	movw	r26, r24
     d46:	8c 91       	ld	r24, X
     d48:	88 23       	and	r24, r24
     d4a:	19 f0       	breq	.+6      	; 0xd52 <xTaskCreate+0x8e>
     d4c:	ec 15       	cp	r30, r12
     d4e:	fd 05       	cpc	r31, r13
     d50:	a1 f7       	brne	.-24     	; 0xd3a <xTaskCreate+0x76>
     d52:	18 a2       	std	Y+32, r1	; 0x20
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <xTaskCreate+0x94>
     d56:	19 8e       	std	Y+25, r1	; 0x19
     d58:	04 30       	cpi	r16, 0x04	; 4
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <xTaskCreate+0x9a>
     d5c:	03 e0       	ldi	r16, 0x03	; 3
     d5e:	0e 8b       	std	Y+22, r16	; 0x16
     d60:	6e 01       	movw	r12, r28
     d62:	b2 e0       	ldi	r27, 0x02	; 2
     d64:	cb 0e       	add	r12, r27
     d66:	d1 1c       	adc	r13, r1
     d68:	c6 01       	movw	r24, r12
     d6a:	aa d9       	rcall	.-3244   	; 0xc0 <vListInitialiseItem>
     d6c:	ce 01       	movw	r24, r28
     d6e:	0c 96       	adiw	r24, 0x0c	; 12
     d70:	a7 d9       	rcall	.-3250   	; 0xc0 <vListInitialiseItem>
     d72:	d9 87       	std	Y+9, r29	; 0x09
     d74:	c8 87       	std	Y+8, r28	; 0x08
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	80 1b       	sub	r24, r16
     d7c:	91 09       	sbc	r25, r1
     d7e:	9d 87       	std	Y+13, r25	; 0x0d
     d80:	8c 87       	std	Y+12, r24	; 0x0c
     d82:	db 8b       	std	Y+19, r29	; 0x13
     d84:	ca 8b       	std	Y+18, r28	; 0x12
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	fe 01       	movw	r30, r28
     d8a:	b1 96       	adiw	r30, 0x21	; 33
     d8c:	df 01       	movw	r26, r30
     d8e:	1d 92       	st	X+, r1
     d90:	8a 95       	dec	r24
     d92:	e9 f7       	brne	.-6      	; 0xd8e <xTaskCreate+0xca>
     d94:	1d a2       	std	Y+37, r1	; 0x25
     d96:	a2 01       	movw	r20, r4
     d98:	b4 01       	movw	r22, r8
     d9a:	c5 01       	movw	r24, r10
     d9c:	0e da       	rcall	.-3044   	; 0x1ba <pxPortInitialiseStack>
     d9e:	99 83       	std	Y+1, r25	; 0x01
     da0:	88 83       	st	Y, r24
     da2:	e1 14       	cp	r14, r1
     da4:	f1 04       	cpc	r15, r1
     da6:	19 f0       	breq	.+6      	; 0xdae <xTaskCreate+0xea>
     da8:	f7 01       	movw	r30, r14
     daa:	d1 83       	std	Z+1, r29	; 0x01
     dac:	c0 83       	st	Z, r28
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	0f 92       	push	r0
     db4:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <uxCurrentNumberOfTasks>
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <uxCurrentNumberOfTasks>
     dbe:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxCurrentTCB>
     dc2:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     dc6:	89 2b       	or	r24, r25
     dc8:	89 f5       	brne	.+98     	; 0xe2c <xTaskCreate+0x168>
     dca:	d0 93 12 07 	sts	0x0712, r29	; 0x800712 <pxCurrentTCB+0x1>
     dce:	c0 93 11 07 	sts	0x0711, r28	; 0x800711 <pxCurrentTCB>
     dd2:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <uxCurrentNumberOfTasks>
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	09 f0       	breq	.+2      	; 0xddc <xTaskCreate+0x118>
     dda:	38 c0       	rjmp	.+112    	; 0xe4c <xTaskCreate+0x188>
     ddc:	8d ee       	ldi	r24, 0xED	; 237
     dde:	96 e0       	ldi	r25, 0x06	; 6
     de0:	61 d9       	rcall	.-3390   	; 0xa4 <vListInitialise>
     de2:	86 ef       	ldi	r24, 0xF6	; 246
     de4:	96 e0       	ldi	r25, 0x06	; 6
     de6:	5e d9       	rcall	.-3396   	; 0xa4 <vListInitialise>
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	96 e0       	ldi	r25, 0x06	; 6
     dec:	5b d9       	rcall	.-3402   	; 0xa4 <vListInitialise>
     dee:	88 e0       	ldi	r24, 0x08	; 8
     df0:	97 e0       	ldi	r25, 0x07	; 7
     df2:	58 d9       	rcall	.-3408   	; 0xa4 <vListInitialise>
     df4:	84 ee       	ldi	r24, 0xE4	; 228
     df6:	96 e0       	ldi	r25, 0x06	; 6
     df8:	55 d9       	rcall	.-3414   	; 0xa4 <vListInitialise>
     dfa:	8b ed       	ldi	r24, 0xDB	; 219
     dfc:	96 e0       	ldi	r25, 0x06	; 6
     dfe:	52 d9       	rcall	.-3420   	; 0xa4 <vListInitialise>
     e00:	8e ec       	ldi	r24, 0xCE	; 206
     e02:	96 e0       	ldi	r25, 0x06	; 6
     e04:	4f d9       	rcall	.-3426   	; 0xa4 <vListInitialise>
     e06:	85 ec       	ldi	r24, 0xC5	; 197
     e08:	96 e0       	ldi	r25, 0x06	; 6
     e0a:	4c d9       	rcall	.-3432   	; 0xa4 <vListInitialise>
     e0c:	8b eb       	ldi	r24, 0xBB	; 187
     e0e:	96 e0       	ldi	r25, 0x06	; 6
     e10:	49 d9       	rcall	.-3438   	; 0xa4 <vListInitialise>
     e12:	84 ee       	ldi	r24, 0xE4	; 228
     e14:	96 e0       	ldi	r25, 0x06	; 6
     e16:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <pxDelayedTaskList+0x1>
     e1a:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <pxDelayedTaskList>
     e1e:	8b ed       	ldi	r24, 0xDB	; 219
     e20:	96 e0       	ldi	r25, 0x06	; 6
     e22:	90 93 d8 06 	sts	0x06D8, r25	; 0x8006d8 <pxOverflowDelayedTaskList+0x1>
     e26:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <pxOverflowDelayedTaskList>
     e2a:	10 c0       	rjmp	.+32     	; 0xe4c <xTaskCreate+0x188>
     e2c:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <xSchedulerRunning>
     e30:	81 11       	cpse	r24, r1
     e32:	0c c0       	rjmp	.+24     	; 0xe4c <xTaskCreate+0x188>
     e34:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <pxCurrentTCB>
     e38:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     e3c:	96 89       	ldd	r25, Z+22	; 0x16
     e3e:	8e 89       	ldd	r24, Y+22	; 0x16
     e40:	89 17       	cp	r24, r25
     e42:	20 f0       	brcs	.+8      	; 0xe4c <xTaskCreate+0x188>
     e44:	d0 93 12 07 	sts	0x0712, r29	; 0x800712 <pxCurrentTCB+0x1>
     e48:	c0 93 11 07 	sts	0x0711, r28	; 0x800711 <pxCurrentTCB>
     e4c:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <uxTaskNumber>
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <uxTaskNumber>
     e56:	8e 89       	ldd	r24, Y+22	; 0x16
     e58:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <uxTopReadyPriority>
     e5c:	98 17       	cp	r25, r24
     e5e:	10 f4       	brcc	.+4      	; 0xe64 <xTaskCreate+0x1a0>
     e60:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <uxTopReadyPriority>
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9c 01       	movw	r18, r24
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	82 0f       	add	r24, r18
     e76:	93 1f       	adc	r25, r19
     e78:	b6 01       	movw	r22, r12
     e7a:	83 51       	subi	r24, 0x13	; 19
     e7c:	99 4f       	sbci	r25, 0xF9	; 249
     e7e:	24 d9       	rcall	.-3512   	; 0xc8 <vListInsertEnd>
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <xSchedulerRunning>
     e88:	88 23       	and	r24, r24
     e8a:	31 f0       	breq	.+12     	; 0xe98 <xTaskCreate+0x1d4>
     e8c:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxCurrentTCB>
     e90:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <xTaskCreate+0x1da>
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <xTaskCreate+0x1da>
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	ef 90       	pop	r14
     ea8:	df 90       	pop	r13
     eaa:	cf 90       	pop	r12
     eac:	bf 90       	pop	r11
     eae:	af 90       	pop	r10
     eb0:	9f 90       	pop	r9
     eb2:	8f 90       	pop	r8
     eb4:	7f 90       	pop	r7
     eb6:	6f 90       	pop	r6
     eb8:	5f 90       	pop	r5
     eba:	4f 90       	pop	r4
     ebc:	08 95       	ret

00000ebe <vTaskStartScheduler>:
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	0f 2e       	mov	r0, r31
     ec6:	fd ea       	ldi	r31, 0xAD	; 173
     ec8:	ef 2e       	mov	r14, r31
     eca:	f6 e0       	ldi	r31, 0x06	; 6
     ecc:	ff 2e       	mov	r15, r31
     ece:	f0 2d       	mov	r31, r0
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	45 e5       	ldi	r20, 0x55	; 85
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	61 e6       	ldi	r22, 0x61	; 97
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	87 e3       	ldi	r24, 0x37	; 55
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	f0 de       	rcall	.-544    	; 0xcc4 <xTaskCreate>
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 f4       	brne	.+36     	; 0xf0c <vTaskStartScheduler+0x4e>
     ee8:	c1 d2       	rcall	.+1410   	; 0x146c <xTimerCreateTimerTask>
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	79 f4       	brne	.+30     	; 0xf0c <vTaskStartScheduler+0x4e>
     eee:	f8 94       	cli
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	9f ef       	ldi	r25, 0xFF	; 255
     ef4:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <xNextTaskUnblockTime+0x1>
     ef8:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <xNextTaskUnblockTime>
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <xSchedulerRunning>
     f02:	10 92 b9 06 	sts	0x06B9, r1	; 0x8006b9 <xTickCount+0x1>
     f06:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <xTickCount>
     f0a:	c3 d9       	rcall	.-3194   	; 0x292 <xPortStartScheduler>
     f0c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	08 95       	ret

00000f18 <vTaskSuspendAll>:
     f18:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <uxSchedulerSuspended>
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <uxSchedulerSuspended>
     f22:	08 95       	ret

00000f24 <xTaskGetTickCount>:
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	0f 92       	push	r0
     f2a:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <xTickCount>
     f2e:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <xTickCount+0x1>
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	08 95       	ret

00000f38 <xTaskIncrementTick>:
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <uxSchedulerSuspended>
     f48:	81 11       	cpse	r24, r1
     f4a:	85 c0       	rjmp	.+266    	; 0x1056 <xTaskIncrementTick+0x11e>
     f4c:	e0 90 b8 06 	lds	r14, 0x06B8	; 0x8006b8 <xTickCount>
     f50:	f0 90 b9 06 	lds	r15, 0x06B9	; 0x8006b9 <xTickCount+0x1>
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	e8 1a       	sub	r14, r24
     f58:	f8 0a       	sbc	r15, r24
     f5a:	f0 92 b9 06 	sts	0x06B9, r15	; 0x8006b9 <xTickCount+0x1>
     f5e:	e0 92 b8 06 	sts	0x06B8, r14	; 0x8006b8 <xTickCount>
     f62:	e1 14       	cp	r14, r1
     f64:	f1 04       	cpc	r15, r1
     f66:	b1 f4       	brne	.+44     	; 0xf94 <xTaskIncrementTick+0x5c>
     f68:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <pxDelayedTaskList>
     f6c:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <pxDelayedTaskList+0x1>
     f70:	20 91 d7 06 	lds	r18, 0x06D7	; 0x8006d7 <pxOverflowDelayedTaskList>
     f74:	30 91 d8 06 	lds	r19, 0x06D8	; 0x8006d8 <pxOverflowDelayedTaskList+0x1>
     f78:	30 93 da 06 	sts	0x06DA, r19	; 0x8006da <pxDelayedTaskList+0x1>
     f7c:	20 93 d9 06 	sts	0x06D9, r18	; 0x8006d9 <pxDelayedTaskList>
     f80:	90 93 d8 06 	sts	0x06D8, r25	; 0x8006d8 <pxOverflowDelayedTaskList+0x1>
     f84:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <pxOverflowDelayedTaskList>
     f88:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <xNumOfOverflows>
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <xNumOfOverflows>
     f92:	fd dd       	rcall	.-1030   	; 0xb8e <prvResetNextTaskUnblockTime>
     f94:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <xNextTaskUnblockTime>
     f98:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <xNextTaskUnblockTime+0x1>
     f9c:	e8 16       	cp	r14, r24
     f9e:	f9 06       	cpc	r15, r25
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <xTaskIncrementTick+0x6c>
     fa2:	62 c0       	rjmp	.+196    	; 0x1068 <xTaskIncrementTick+0x130>
     fa4:	e0 91 d9 06 	lds	r30, 0x06D9	; 0x8006d9 <pxDelayedTaskList>
     fa8:	f0 91 da 06 	lds	r31, 0x06DA	; 0x8006da <pxDelayedTaskList+0x1>
     fac:	80 81       	ld	r24, Z
     fae:	88 23       	and	r24, r24
     fb0:	79 f0       	breq	.+30     	; 0xfd0 <xTaskIncrementTick+0x98>
     fb2:	e0 91 d9 06 	lds	r30, 0x06D9	; 0x8006d9 <pxDelayedTaskList>
     fb6:	f0 91 da 06 	lds	r31, 0x06DA	; 0x8006da <pxDelayedTaskList+0x1>
     fba:	05 80       	ldd	r0, Z+5	; 0x05
     fbc:	f6 81       	ldd	r31, Z+6	; 0x06
     fbe:	e0 2d       	mov	r30, r0
     fc0:	c6 81       	ldd	r28, Z+6	; 0x06
     fc2:	d7 81       	ldd	r29, Z+7	; 0x07
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	9b 81       	ldd	r25, Y+3	; 0x03
     fc8:	e8 16       	cp	r14, r24
     fca:	f9 06       	cpc	r15, r25
     fcc:	d8 f4       	brcc	.+54     	; 0x1004 <xTaskIncrementTick+0xcc>
     fce:	15 c0       	rjmp	.+42     	; 0xffa <xTaskIncrementTick+0xc2>
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	9f ef       	ldi	r25, 0xFF	; 255
     fd4:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <xNextTaskUnblockTime+0x1>
     fd8:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <xNextTaskUnblockTime>
     fdc:	45 c0       	rjmp	.+138    	; 0x1068 <xTaskIncrementTick+0x130>
     fde:	e0 91 d9 06 	lds	r30, 0x06D9	; 0x8006d9 <pxDelayedTaskList>
     fe2:	f0 91 da 06 	lds	r31, 0x06DA	; 0x8006da <pxDelayedTaskList+0x1>
     fe6:	05 80       	ldd	r0, Z+5	; 0x05
     fe8:	f6 81       	ldd	r31, Z+6	; 0x06
     fea:	e0 2d       	mov	r30, r0
     fec:	c6 81       	ldd	r28, Z+6	; 0x06
     fee:	d7 81       	ldd	r29, Z+7	; 0x07
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	e8 16       	cp	r14, r24
     ff6:	f9 06       	cpc	r15, r25
     ff8:	28 f4       	brcc	.+10     	; 0x1004 <xTaskIncrementTick+0xcc>
     ffa:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <xNextTaskUnblockTime+0x1>
     ffe:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <xNextTaskUnblockTime>
    1002:	32 c0       	rjmp	.+100    	; 0x1068 <xTaskIncrementTick+0x130>
    1004:	8e 01       	movw	r16, r28
    1006:	0e 5f       	subi	r16, 0xFE	; 254
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	c8 01       	movw	r24, r16
    100c:	af d8       	rcall	.-3746   	; 0x16c <uxListRemove>
    100e:	8c 89       	ldd	r24, Y+20	; 0x14
    1010:	9d 89       	ldd	r25, Y+21	; 0x15
    1012:	89 2b       	or	r24, r25
    1014:	19 f0       	breq	.+6      	; 0x101c <xTaskIncrementTick+0xe4>
    1016:	ce 01       	movw	r24, r28
    1018:	0c 96       	adiw	r24, 0x0c	; 12
    101a:	a8 d8       	rcall	.-3760   	; 0x16c <uxListRemove>
    101c:	8e 89       	ldd	r24, Y+22	; 0x16
    101e:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <uxTopReadyPriority>
    1022:	98 17       	cp	r25, r24
    1024:	10 f4       	brcc	.+4      	; 0x102a <xTaskIncrementTick+0xf2>
    1026:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <uxTopReadyPriority>
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	9c 01       	movw	r18, r24
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	82 0f       	add	r24, r18
    103c:	93 1f       	adc	r25, r19
    103e:	b8 01       	movw	r22, r16
    1040:	83 51       	subi	r24, 0x13	; 19
    1042:	99 4f       	sbci	r25, 0xF9	; 249
    1044:	41 d8       	rcall	.-3966   	; 0xc8 <vListInsertEnd>
    1046:	e0 91 d9 06 	lds	r30, 0x06D9	; 0x8006d9 <pxDelayedTaskList>
    104a:	f0 91 da 06 	lds	r31, 0x06DA	; 0x8006da <pxDelayedTaskList+0x1>
    104e:	80 81       	ld	r24, Z
    1050:	81 11       	cpse	r24, r1
    1052:	c5 cf       	rjmp	.-118    	; 0xfde <xTaskIncrementTick+0xa6>
    1054:	bd cf       	rjmp	.-134    	; 0xfd0 <xTaskIncrementTick+0x98>
    1056:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <xPendedTicks>
    105a:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <xPendedTicks+0x1>
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	90 93 b5 06 	sts	0x06B5, r25	; 0x8006b5 <xPendedTicks+0x1>
    1064:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <xPendedTicks>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	08 95       	ret

00001078 <xTaskResumeAll>:
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	0f 92       	push	r0
    108c:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <uxSchedulerSuspended>
    1090:	81 50       	subi	r24, 0x01	; 1
    1092:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <uxSchedulerSuspended>
    1096:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <uxSchedulerSuspended>
    109a:	81 11       	cpse	r24, r1
    109c:	59 c0       	rjmp	.+178    	; 0x1150 <xTaskResumeAll+0xd8>
    109e:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <uxCurrentNumberOfTasks>
    10a2:	81 11       	cpse	r24, r1
    10a4:	31 c0       	rjmp	.+98     	; 0x1108 <xTaskResumeAll+0x90>
    10a6:	54 c0       	rjmp	.+168    	; 0x1150 <xTaskResumeAll+0xd8>
    10a8:	d7 01       	movw	r26, r14
    10aa:	15 96       	adiw	r26, 0x05	; 5
    10ac:	ed 91       	ld	r30, X+
    10ae:	fc 91       	ld	r31, X
    10b0:	16 97       	sbiw	r26, 0x06	; 6
    10b2:	c6 81       	ldd	r28, Z+6	; 0x06
    10b4:	d7 81       	ldd	r29, Z+7	; 0x07
    10b6:	ce 01       	movw	r24, r28
    10b8:	0c 96       	adiw	r24, 0x0c	; 12
    10ba:	58 d8       	rcall	.-3920   	; 0x16c <uxListRemove>
    10bc:	8e 01       	movw	r16, r28
    10be:	0e 5f       	subi	r16, 0xFE	; 254
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	c8 01       	movw	r24, r16
    10c4:	53 d8       	rcall	.-3930   	; 0x16c <uxListRemove>
    10c6:	8e 89       	ldd	r24, Y+22	; 0x16
    10c8:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <uxTopReadyPriority>
    10cc:	98 17       	cp	r25, r24
    10ce:	10 f4       	brcc	.+4      	; 0x10d4 <xTaskResumeAll+0x5c>
    10d0:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <uxTopReadyPriority>
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9c 01       	movw	r18, r24
    10d8:	22 0f       	add	r18, r18
    10da:	33 1f       	adc	r19, r19
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	82 0f       	add	r24, r18
    10e6:	93 1f       	adc	r25, r19
    10e8:	b8 01       	movw	r22, r16
    10ea:	83 51       	subi	r24, 0x13	; 19
    10ec:	99 4f       	sbci	r25, 0xF9	; 249
    10ee:	0e 94 64 00 	call	0xc8	; 0xc8 <vListInsertEnd>
    10f2:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <pxCurrentTCB>
    10f6:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
    10fa:	9e 89       	ldd	r25, Y+22	; 0x16
    10fc:	86 89       	ldd	r24, Z+22	; 0x16
    10fe:	98 17       	cp	r25, r24
    1100:	68 f0       	brcs	.+26     	; 0x111c <xTaskResumeAll+0xa4>
    1102:	d0 92 b3 06 	sts	0x06B3, r13	; 0x8006b3 <xYieldPending>
    1106:	0a c0       	rjmp	.+20     	; 0x111c <xTaskResumeAll+0xa4>
    1108:	c0 e0       	ldi	r28, 0x00	; 0
    110a:	d0 e0       	ldi	r29, 0x00	; 0
    110c:	0f 2e       	mov	r0, r31
    110e:	fe ec       	ldi	r31, 0xCE	; 206
    1110:	ef 2e       	mov	r14, r31
    1112:	f6 e0       	ldi	r31, 0x06	; 6
    1114:	ff 2e       	mov	r15, r31
    1116:	f0 2d       	mov	r31, r0
    1118:	dd 24       	eor	r13, r13
    111a:	d3 94       	inc	r13
    111c:	f7 01       	movw	r30, r14
    111e:	80 81       	ld	r24, Z
    1120:	81 11       	cpse	r24, r1
    1122:	c2 cf       	rjmp	.-124    	; 0x10a8 <xTaskResumeAll+0x30>
    1124:	cd 2b       	or	r28, r29
    1126:	09 f0       	breq	.+2      	; 0x112a <xTaskResumeAll+0xb2>
    1128:	32 dd       	rcall	.-1436   	; 0xb8e <prvResetNextTaskUnblockTime>
    112a:	c0 91 b4 06 	lds	r28, 0x06B4	; 0x8006b4 <xPendedTicks>
    112e:	d0 91 b5 06 	lds	r29, 0x06B5	; 0x8006b5 <xPendedTicks+0x1>
    1132:	20 97       	sbiw	r28, 0x00	; 0
    1134:	59 f0       	breq	.+22     	; 0x114c <xTaskResumeAll+0xd4>
    1136:	11 e0       	ldi	r17, 0x01	; 1
    1138:	ff de       	rcall	.-514    	; 0xf38 <xTaskIncrementTick>
    113a:	81 11       	cpse	r24, r1
    113c:	10 93 b3 06 	sts	0x06B3, r17	; 0x8006b3 <xYieldPending>
    1140:	21 97       	sbiw	r28, 0x01	; 1
    1142:	d1 f7       	brne	.-12     	; 0x1138 <xTaskResumeAll+0xc0>
    1144:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <xPendedTicks+0x1>
    1148:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <xPendedTicks>
    114c:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <xYieldPending>
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	08 95       	ret

00001166 <vTaskSwitchContext>:
    1166:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <uxSchedulerSuspended>
    116a:	88 23       	and	r24, r24
    116c:	21 f0       	breq	.+8      	; 0x1176 <vTaskSwitchContext+0x10>
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <xYieldPending>
    1174:	08 95       	ret
    1176:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <xYieldPending>
    117a:	20 91 b7 06 	lds	r18, 0x06B7	; 0x8006b7 <uxTopReadyPriority>
    117e:	82 2f       	mov	r24, r18
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	fc 01       	movw	r30, r24
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	e8 0f       	add	r30, r24
    1192:	f9 1f       	adc	r31, r25
    1194:	e3 51       	subi	r30, 0x13	; 19
    1196:	f9 4f       	sbci	r31, 0xF9	; 249
    1198:	30 81       	ld	r19, Z
    119a:	31 11       	cpse	r19, r1
    119c:	11 c0       	rjmp	.+34     	; 0x11c0 <vTaskSwitchContext+0x5a>
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	82 2f       	mov	r24, r18
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	fc 01       	movw	r30, r24
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	e8 0f       	add	r30, r24
    11b4:	f9 1f       	adc	r31, r25
    11b6:	e3 51       	subi	r30, 0x13	; 19
    11b8:	f9 4f       	sbci	r31, 0xF9	; 249
    11ba:	30 81       	ld	r19, Z
    11bc:	33 23       	and	r19, r19
    11be:	79 f3       	breq	.-34     	; 0x119e <vTaskSwitchContext+0x38>
    11c0:	ac 01       	movw	r20, r24
    11c2:	44 0f       	add	r20, r20
    11c4:	55 1f       	adc	r21, r21
    11c6:	44 0f       	add	r20, r20
    11c8:	55 1f       	adc	r21, r21
    11ca:	44 0f       	add	r20, r20
    11cc:	55 1f       	adc	r21, r21
    11ce:	48 0f       	add	r20, r24
    11d0:	59 1f       	adc	r21, r25
    11d2:	da 01       	movw	r26, r20
    11d4:	a3 51       	subi	r26, 0x13	; 19
    11d6:	b9 4f       	sbci	r27, 0xF9	; 249
    11d8:	11 96       	adiw	r26, 0x01	; 1
    11da:	ed 91       	ld	r30, X+
    11dc:	fc 91       	ld	r31, X
    11de:	12 97       	sbiw	r26, 0x02	; 2
    11e0:	02 80       	ldd	r0, Z+2	; 0x02
    11e2:	f3 81       	ldd	r31, Z+3	; 0x03
    11e4:	e0 2d       	mov	r30, r0
    11e6:	12 96       	adiw	r26, 0x02	; 2
    11e8:	fc 93       	st	X, r31
    11ea:	ee 93       	st	-X, r30
    11ec:	11 97       	sbiw	r26, 0x01	; 1
    11ee:	40 51       	subi	r20, 0x10	; 16
    11f0:	59 4f       	sbci	r21, 0xF9	; 249
    11f2:	e4 17       	cp	r30, r20
    11f4:	f5 07       	cpc	r31, r21
    11f6:	29 f4       	brne	.+10     	; 0x1202 <vTaskSwitchContext+0x9c>
    11f8:	42 81       	ldd	r20, Z+2	; 0x02
    11fa:	53 81       	ldd	r21, Z+3	; 0x03
    11fc:	fd 01       	movw	r30, r26
    11fe:	52 83       	std	Z+2, r21	; 0x02
    1200:	41 83       	std	Z+1, r20	; 0x01
    1202:	fc 01       	movw	r30, r24
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	ee 0f       	add	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	8e 0f       	add	r24, r30
    1212:	9f 1f       	adc	r25, r31
    1214:	fc 01       	movw	r30, r24
    1216:	e3 51       	subi	r30, 0x13	; 19
    1218:	f9 4f       	sbci	r31, 0xF9	; 249
    121a:	01 80       	ldd	r0, Z+1	; 0x01
    121c:	f2 81       	ldd	r31, Z+2	; 0x02
    121e:	e0 2d       	mov	r30, r0
    1220:	86 81       	ldd	r24, Z+6	; 0x06
    1222:	97 81       	ldd	r25, Z+7	; 0x07
    1224:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxCurrentTCB+0x1>
    1228:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxCurrentTCB>
    122c:	20 93 b7 06 	sts	0x06B7, r18	; 0x8006b7 <uxTopReadyPriority>
    1230:	08 95       	ret

00001232 <vTaskPlaceOnEventList>:
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	eb 01       	movw	r28, r22
    1238:	60 91 11 07 	lds	r22, 0x0711	; 0x800711 <pxCurrentTCB>
    123c:	70 91 12 07 	lds	r23, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
    1240:	64 5f       	subi	r22, 0xF4	; 244
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	0e 94 85 00 	call	0x10a	; 0x10a <vListInsert>
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	ce 01       	movw	r24, r28
    124c:	bc dc       	rcall	.-1672   	; 0xbc6 <prvAddCurrentTaskToDelayedList>
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <vTaskPlaceOnEventListRestricted>:
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	8b 01       	movw	r16, r22
    125c:	c4 2f       	mov	r28, r20
    125e:	60 91 11 07 	lds	r22, 0x0711	; 0x800711 <pxCurrentTCB>
    1262:	70 91 12 07 	lds	r23, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
    1266:	64 5f       	subi	r22, 0xF4	; 244
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	0e 94 64 00 	call	0xc8	; 0xc8 <vListInsertEnd>
    126e:	cc 23       	and	r28, r28
    1270:	11 f0       	breq	.+4      	; 0x1276 <vTaskPlaceOnEventListRestricted+0x22>
    1272:	0f ef       	ldi	r16, 0xFF	; 255
    1274:	1f ef       	ldi	r17, 0xFF	; 255
    1276:	6c 2f       	mov	r22, r28
    1278:	c8 01       	movw	r24, r16
    127a:	a5 dc       	rcall	.-1718   	; 0xbc6 <prvAddCurrentTaskToDelayedList>
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <xTaskRemoveFromEventList>:
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	dc 01       	movw	r26, r24
    128e:	15 96       	adiw	r26, 0x05	; 5
    1290:	ed 91       	ld	r30, X+
    1292:	fc 91       	ld	r31, X
    1294:	16 97       	sbiw	r26, 0x06	; 6
    1296:	c6 81       	ldd	r28, Z+6	; 0x06
    1298:	d7 81       	ldd	r29, Z+7	; 0x07
    129a:	8e 01       	movw	r16, r28
    129c:	04 5f       	subi	r16, 0xF4	; 244
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	c8 01       	movw	r24, r16
    12a2:	0e 94 b6 00 	call	0x16c	; 0x16c <uxListRemove>
    12a6:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <uxSchedulerSuspended>
    12aa:	81 11       	cpse	r24, r1
    12ac:	1c c0       	rjmp	.+56     	; 0x12e6 <xTaskRemoveFromEventList+0x62>
    12ae:	0a 50       	subi	r16, 0x0A	; 10
    12b0:	11 09       	sbc	r17, r1
    12b2:	c8 01       	movw	r24, r16
    12b4:	0e 94 b6 00 	call	0x16c	; 0x16c <uxListRemove>
    12b8:	8e 89       	ldd	r24, Y+22	; 0x16
    12ba:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <uxTopReadyPriority>
    12be:	98 17       	cp	r25, r24
    12c0:	10 f4       	brcc	.+4      	; 0x12c6 <xTaskRemoveFromEventList+0x42>
    12c2:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <uxTopReadyPriority>
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 01       	movw	r18, r24
    12ca:	22 0f       	add	r18, r18
    12cc:	33 1f       	adc	r19, r19
    12ce:	22 0f       	add	r18, r18
    12d0:	33 1f       	adc	r19, r19
    12d2:	22 0f       	add	r18, r18
    12d4:	33 1f       	adc	r19, r19
    12d6:	82 0f       	add	r24, r18
    12d8:	93 1f       	adc	r25, r19
    12da:	b8 01       	movw	r22, r16
    12dc:	83 51       	subi	r24, 0x13	; 19
    12de:	99 4f       	sbci	r25, 0xF9	; 249
    12e0:	0e 94 64 00 	call	0xc8	; 0xc8 <vListInsertEnd>
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <xTaskRemoveFromEventList+0x6c>
    12e6:	b8 01       	movw	r22, r16
    12e8:	8e ec       	ldi	r24, 0xCE	; 206
    12ea:	96 e0       	ldi	r25, 0x06	; 6
    12ec:	0e 94 64 00 	call	0xc8	; 0xc8 <vListInsertEnd>
    12f0:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <pxCurrentTCB>
    12f4:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <pxCurrentTCB+0x1>
    12f8:	9e 89       	ldd	r25, Y+22	; 0x16
    12fa:	86 89       	ldd	r24, Z+22	; 0x16
    12fc:	89 17       	cp	r24, r25
    12fe:	20 f4       	brcc	.+8      	; 0x1308 <xTaskRemoveFromEventList+0x84>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <xYieldPending>
    1306:	01 c0       	rjmp	.+2      	; 0x130a <xTaskRemoveFromEventList+0x86>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1314:	20 91 b2 06 	lds	r18, 0x06B2	; 0x8006b2 <xNumOfOverflows>
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    131c:	20 91 b8 06 	lds	r18, 0x06B8	; 0x8006b8 <xTickCount>
    1320:	30 91 b9 06 	lds	r19, 0x06B9	; 0x8006b9 <xTickCount+0x1>
    1324:	32 83       	std	Z+2, r19	; 0x02
    1326:	21 83       	std	Z+1, r18	; 0x01
    1328:	08 95       	ret

0000132a <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    1334:	20 91 b8 06 	lds	r18, 0x06B8	; 0x8006b8 <xTickCount>
    1338:	30 91 b9 06 	lds	r19, 0x06B9	; 0x8006b9 <xTickCount+0x1>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
    133c:	db 01       	movw	r26, r22
    133e:	4d 91       	ld	r20, X+
    1340:	5c 91       	ld	r21, X
    1342:	4f 3f       	cpi	r20, 0xFF	; 255
    1344:	bf ef       	ldi	r27, 0xFF	; 255
    1346:	5b 07       	cpc	r21, r27
    1348:	11 f1       	breq	.+68     	; 0x138e <xTaskCheckForTimeOut+0x64>

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    134a:	ec 01       	movw	r28, r24
    134c:	e9 81       	ldd	r30, Y+1	; 0x01
    134e:	fa 81       	ldd	r31, Y+2	; 0x02
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1350:	a0 91 b2 06 	lds	r26, 0x06B2	; 0x8006b2 <xNumOfOverflows>
    1354:	b8 81       	ld	r27, Y
    1356:	ba 17       	cp	r27, r26
    1358:	41 f0       	breq	.+16     	; 0x136a <xTaskCheckForTimeOut+0x40>
    135a:	2e 17       	cp	r18, r30
    135c:	3f 07       	cpc	r19, r31
    135e:	28 f0       	brcs	.+10     	; 0x136a <xTaskCheckForTimeOut+0x40>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    1360:	fb 01       	movw	r30, r22
    1362:	11 82       	std	Z+1, r1	; 0x01
    1364:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1366:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1368:	13 c0       	rjmp	.+38     	; 0x1390 <xTaskCheckForTimeOut+0x66>

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    136a:	2e 1b       	sub	r18, r30
    136c:	3f 0b       	sbc	r19, r31
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    136e:	24 17       	cp	r18, r20
    1370:	35 07       	cpc	r19, r21
    1372:	40 f4       	brcc	.+16     	; 0x1384 <xTaskCheckForTimeOut+0x5a>
    1374:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1376:	42 1b       	sub	r20, r18
    1378:	53 0b       	sbc	r21, r19
    137a:	51 83       	std	Z+1, r21	; 0x01
    137c:	40 83       	st	Z, r20
            vTaskInternalSetTimeOutState( pxTimeOut );
    137e:	ca df       	rcall	.-108    	; 0x1314 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <xTaskCheckForTimeOut+0x66>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1384:	db 01       	movw	r26, r22
    1386:	1d 92       	st	X+, r1
    1388:	1c 92       	st	X, r1
            xReturn = pdTRUE;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <xTaskCheckForTimeOut+0x66>
            if( *pxTicksToWait == portMAX_DELAY )
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
    138e:	80 e0       	ldi	r24, 0x00	; 0
        {
            *pxTicksToWait = ( TickType_t ) 0;
            xReturn = pdTRUE;
        }
    }
    taskEXIT_CRITICAL();
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <xYieldPending>
    13a0:	08 95       	ret

000013a2 <xTaskGetSchedulerState>:

    BaseType_t xTaskGetSchedulerState( void )
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    13a2:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <xSchedulerRunning>
    13a6:	88 23       	and	r24, r24
    13a8:	31 f0       	breq	.+12     	; 0x13b6 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    13aa:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <uxSchedulerSuspended>
    13ae:	88 23       	and	r24, r24
    13b0:	21 f0       	breq	.+8      	; 0x13ba <xTaskGetSchedulerState+0x18>
            {
                xReturn = taskSCHEDULER_RUNNING;
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	08 95       	ret
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	08 95       	ret
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
            {
                xReturn = taskSCHEDULER_RUNNING;
    13ba:	82 e0       	ldi	r24, 0x02	; 2
                xReturn = taskSCHEDULER_SUSPENDED;
            }
        }

        return xReturn;
    }
    13bc:	08 95       	ret

000013be <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    13be:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    13c0:	73 83       	std	Z+3, r23	; 0x03
    13c2:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    13c4:	91 87       	std	Z+9, r25	; 0x09
    13c6:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    13c8:	46 17       	cp	r20, r22
    13ca:	57 07       	cpc	r21, r23
    13cc:	90 f0       	brcs	.+36     	; 0x13f2 <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    13ce:	42 1b       	sub	r20, r18
    13d0:	53 0b       	sbc	r21, r19
    13d2:	84 85       	ldd	r24, Z+12	; 0x0c
    13d4:	95 85       	ldd	r25, Z+13	; 0x0d
    13d6:	48 17       	cp	r20, r24
    13d8:	59 07       	cpc	r21, r25
    13da:	e0 f4       	brcc	.+56     	; 0x1414 <prvInsertTimerInActiveList+0x56>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    13dc:	bf 01       	movw	r22, r30
    13de:	6e 5f       	subi	r22, 0xFE	; 254
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255
    13e2:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <pxOverflowTimerList>
    13e6:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <pxOverflowTimerList+0x1>
    13ea:	0e 94 85 00 	call	0x10a	; 0x10a <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    13f2:	42 17       	cp	r20, r18
    13f4:	53 07       	cpc	r21, r19
    13f6:	18 f4       	brcc	.+6      	; 0x13fe <prvInsertTimerInActiveList+0x40>
    13f8:	62 17       	cp	r22, r18
    13fa:	73 07       	cpc	r23, r19
    13fc:	68 f4       	brcc	.+26     	; 0x1418 <prvInsertTimerInActiveList+0x5a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    13fe:	bf 01       	movw	r22, r30
    1400:	6e 5f       	subi	r22, 0xFE	; 254
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <pxCurrentTimerList>
    1408:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <pxCurrentTimerList+0x1>
    140c:	0e 94 85 00 	call	0x10a	; 0x10a <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	08 95       	ret
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	08 95       	ret
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    1418:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    141a:	08 95       	ret

0000141c <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    1422:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xTimerQueue>
    1426:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xTimerQueue+0x1>
    142a:	89 2b       	or	r24, r25
    142c:	e1 f4       	brne	.+56     	; 0x1466 <prvCheckForValidListAndQueue+0x4a>
            {
                vListInitialise( &xActiveTimerList1 );
    142e:	86 e2       	ldi	r24, 0x26	; 38
    1430:	97 e0       	ldi	r25, 0x07	; 7
    1432:	0e 94 52 00 	call	0xa4	; 0xa4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    1436:	8d e1       	ldi	r24, 0x1D	; 29
    1438:	97 e0       	ldi	r25, 0x07	; 7
    143a:	0e 94 52 00 	call	0xa4	; 0xa4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    143e:	86 e2       	ldi	r24, 0x26	; 38
    1440:	97 e0       	ldi	r25, 0x07	; 7
    1442:	90 93 1c 07 	sts	0x071C, r25	; 0x80071c <pxCurrentTimerList+0x1>
    1446:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    144a:	8d e1       	ldi	r24, 0x1D	; 29
    144c:	97 e0       	ldi	r25, 0x07	; 7
    144e:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <pxOverflowTimerList+0x1>
    1452:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <pxOverflowTimerList>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	65 e0       	ldi	r22, 0x05	; 5
    145a:	8a e0       	ldi	r24, 0x0A	; 10
    145c:	0f da       	rcall	.-3042   	; 0x87c <xQueueGenericCreate>
    145e:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <xTimerQueue+0x1>
    1462:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	08 95       	ret

0000146c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    1472:	d4 df       	rcall	.-88     	; 0x141c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    1474:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xTimerQueue>
    1478:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xTimerQueue+0x1>
    147c:	89 2b       	or	r24, r25
    147e:	89 f0       	breq	.+34     	; 0x14a2 <xTimerCreateTimerTask+0x36>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
    1480:	0f 2e       	mov	r0, r31
    1482:	f5 e1       	ldi	r31, 0x15	; 21
    1484:	ef 2e       	mov	r14, r31
    1486:	f7 e0       	ldi	r31, 0x07	; 7
    1488:	ff 2e       	mov	r15, r31
    148a:	f0 2d       	mov	r31, r0
    148c:	01 e0       	ldi	r16, 0x01	; 1
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	44 e6       	ldi	r20, 0x64	; 100
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	66 e6       	ldi	r22, 0x66	; 102
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	8e e3       	ldi	r24, 0x3E	; 62
    149c:	9b e0       	ldi	r25, 0x0B	; 11
    149e:	12 dc       	rcall	.-2012   	; 0xcc4 <xTaskCreate>
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <xTimerCreateTimerTask+0x38>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    14a2:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	08 95       	ret

000014ac <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    14ac:	8f 92       	push	r8
    14ae:	9f 92       	push	r9
    14b0:	af 92       	push	r10
    14b2:	bf 92       	push	r11
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	4c 01       	movw	r8, r24
    14c4:	5b 01       	movw	r10, r22
    14c6:	f4 2e       	mov	r15, r20
    14c8:	69 01       	movw	r12, r18
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    14ca:	83 e1       	ldi	r24, 0x13	; 19
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 46 02 	call	0x48c	; 0x48c <pvPortMalloc>
    14d2:	ec 01       	movw	r28, r24

            if( pxNewTimer != NULL )
    14d4:	89 2b       	or	r24, r25
    14d6:	99 f0       	breq	.+38     	; 0x14fe <xTimerCreate+0x52>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    14d8:	1a 8a       	std	Y+18, r1	; 0x12

        if( pxNewTimer != NULL )
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
    14da:	a0 df       	rcall	.-192    	; 0x141c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
    14dc:	99 82       	std	Y+1, r9	; 0x01
    14de:	88 82       	st	Y, r8
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    14e0:	bd 86       	std	Y+13, r11	; 0x0d
    14e2:	ac 86       	std	Y+12, r10	; 0x0c
            pxNewTimer->pvTimerID = pvTimerID;
    14e4:	df 86       	std	Y+15, r13	; 0x0f
    14e6:	ce 86       	std	Y+14, r12	; 0x0e
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    14e8:	19 8b       	std	Y+17, r17	; 0x11
    14ea:	08 8b       	std	Y+16, r16	; 0x10
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    14ec:	ce 01       	movw	r24, r28
    14ee:	02 96       	adiw	r24, 0x02	; 2
    14f0:	0e 94 60 00 	call	0xc0	; 0xc0 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
    14f4:	ff 20       	and	r15, r15
    14f6:	19 f0       	breq	.+6      	; 0x14fe <xTimerCreate+0x52>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    14f8:	8a 89       	ldd	r24, Y+18	; 0x12
    14fa:	84 60       	ori	r24, 0x04	; 4
    14fc:	8a 8b       	std	Y+18, r24	; 0x12
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
    14fe:	ce 01       	movw	r24, r28
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	df 90       	pop	r13
    150c:	cf 90       	pop	r12
    150e:	bf 90       	pop	r11
    1510:	af 90       	pop	r10
    1512:	9f 90       	pop	r9
    1514:	8f 90       	pop	r8
    1516:	08 95       	ret

00001518 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	00 d0       	rcall	.+0      	; 0x1522 <xTimerGenericCommand+0xa>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <xTimerGenericCommand+0xc>
    1524:	1f 92       	push	r1
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    152a:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <xTimerQueue>
    152e:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <xTimerQueue+0x1>
    1532:	30 97       	sbiw	r30, 0x00	; 0
    1534:	51 f1       	breq	.+84     	; 0x158a <xTimerGenericCommand+0x72>
    1536:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1538:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    153a:	5b 83       	std	Y+3, r21	; 0x03
    153c:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    153e:	9d 83       	std	Y+5, r25	; 0x05
    1540:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1542:	66 30       	cpi	r22, 0x06	; 6
    1544:	d4 f4       	brge	.+52     	; 0x157a <xTimerGenericCommand+0x62>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1546:	2d df       	rcall	.-422    	; 0x13a2 <xTaskGetSchedulerState>
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	59 f4       	brne	.+22     	; 0x1562 <xTimerGenericCommand+0x4a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	a8 01       	movw	r20, r16
    1550:	be 01       	movw	r22, r28
    1552:	6f 5f       	subi	r22, 0xFF	; 255
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xTimerQueue>
    155a:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xTimerQueue+0x1>
    155e:	af d9       	rcall	.-3234   	; 0x8be <xQueueGenericSend>
    1560:	15 c0       	rjmp	.+42     	; 0x158c <xTimerGenericCommand+0x74>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	be 01       	movw	r22, r28
    156a:	6f 5f       	subi	r22, 0xFF	; 255
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xTimerQueue>
    1572:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xTimerQueue+0x1>
    1576:	a3 d9       	rcall	.-3258   	; 0x8be <xQueueGenericSend>
    1578:	09 c0       	rjmp	.+18     	; 0x158c <xTimerGenericCommand+0x74>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	ad 01       	movw	r20, r26
    157e:	be 01       	movw	r22, r28
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	cf 01       	movw	r24, r30
    1586:	27 da       	rcall	.-2994   	; 0x9d6 <xQueueGenericSendFromISR>
    1588:	01 c0       	rjmp	.+2      	; 0x158c <xTimerGenericCommand+0x74>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    158a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    15a0:	af 92       	push	r10
    15a2:	bf 92       	push	r11
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	6c 01       	movw	r12, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    15b6:	b6 dc       	rcall	.-1684   	; 0xf24 <xTaskGetTickCount>
    15b8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    15ba:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xLastTime.2407>
    15be:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <xLastTime.2407+0x1>
    15c2:	e8 16       	cp	r14, r24
    15c4:	f9 06       	cpc	r15, r25
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <prvSampleTimeNow+0x2a>
    15c8:	47 c0       	rjmp	.+142    	; 0x1658 <prvSampleTimeNow+0xb8>
    15ca:	2f c0       	rjmp	.+94     	; 0x162a <prvSampleTimeNow+0x8a>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    15cc:	05 80       	ldd	r0, Z+5	; 0x05
    15ce:	f6 81       	ldd	r31, Z+6	; 0x06
    15d0:	e0 2d       	mov	r30, r0
    15d2:	a0 80       	ld	r10, Z
    15d4:	b1 80       	ldd	r11, Z+1	; 0x01

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    15d6:	c6 81       	ldd	r28, Z+6	; 0x06
    15d8:	d7 81       	ldd	r29, Z+7	; 0x07
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    15da:	8e 01       	movw	r16, r28
    15dc:	0e 5f       	subi	r16, 0xFE	; 254
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
    15e0:	c8 01       	movw	r24, r16
    15e2:	0e 94 b6 00 	call	0x16c	; 0x16c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    15e6:	e8 89       	ldd	r30, Y+16	; 0x10
    15e8:	f9 89       	ldd	r31, Y+17	; 0x11
    15ea:	ce 01       	movw	r24, r28
    15ec:	09 95       	icall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    15ee:	8a 89       	ldd	r24, Y+18	; 0x12
    15f0:	82 ff       	sbrs	r24, 2
    15f2:	1b c0       	rjmp	.+54     	; 0x162a <prvSampleTimeNow+0x8a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    15f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15f8:	8a 0d       	add	r24, r10
    15fa:	9b 1d       	adc	r25, r11

                if( xReloadTime > xNextExpireTime )
    15fc:	a8 16       	cp	r10, r24
    15fe:	b9 06       	cpc	r11, r25
    1600:	60 f4       	brcc	.+24     	; 0x161a <prvSampleTimeNow+0x7a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1602:	9b 83       	std	Y+3, r25	; 0x03
    1604:	8a 83       	std	Y+2, r24	; 0x02
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1606:	d9 87       	std	Y+9, r29	; 0x09
    1608:	c8 87       	std	Y+8, r28	; 0x08
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    160a:	b8 01       	movw	r22, r16
    160c:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <pxCurrentTimerList>
    1610:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <pxCurrentTimerList+0x1>
    1614:	0e 94 85 00 	call	0x10a	; 0x10a <vListInsert>
    1618:	08 c0       	rjmp	.+16     	; 0x162a <prvSampleTimeNow+0x8a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    161a:	00 e0       	ldi	r16, 0x00	; 0
    161c:	10 e0       	ldi	r17, 0x00	; 0
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	a5 01       	movw	r20, r10
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	ce 01       	movw	r24, r28
    1628:	77 df       	rcall	.-274    	; 0x1518 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    162a:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <pxCurrentTimerList>
    162e:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <pxCurrentTimerList+0x1>
    1632:	80 81       	ld	r24, Z
    1634:	81 11       	cpse	r24, r1
    1636:	ca cf       	rjmp	.-108    	; 0x15cc <prvSampleTimeNow+0x2c>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1638:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <pxOverflowTimerList>
    163c:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <pxOverflowTimerList+0x1>
    1640:	90 93 1c 07 	sts	0x071C, r25	; 0x80071c <pxCurrentTimerList+0x1>
    1644:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    1648:	f0 93 1a 07 	sts	0x071A, r31	; 0x80071a <pxOverflowTimerList+0x1>
    164c:	e0 93 19 07 	sts	0x0719, r30	; 0x800719 <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	f6 01       	movw	r30, r12
    1654:	80 83       	st	Z, r24
    1656:	02 c0       	rjmp	.+4      	; 0x165c <prvSampleTimeNow+0xbc>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1658:	f6 01       	movw	r30, r12
    165a:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    165c:	f0 92 14 07 	sts	0x0714, r15	; 0x800714 <xLastTime.2407+0x1>
    1660:	e0 92 13 07 	sts	0x0713, r14	; 0x800713 <xLastTime.2407>

        return xTimeNow;
    }
    1664:	c7 01       	movw	r24, r14
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	ff 90       	pop	r15
    1670:	ef 90       	pop	r14
    1672:	df 90       	pop	r13
    1674:	cf 90       	pop	r12
    1676:	bf 90       	pop	r11
    1678:	af 90       	pop	r10
    167a:	08 95       	ret

0000167c <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	00 d0       	rcall	.+0      	; 0x1682 <prvTimerTask+0x6>
    1682:	00 d0       	rcall	.+0      	; 0x1684 <prvTimerTask+0x8>
    1684:	00 d0       	rcall	.+0      	; 0x1686 <prvTimerTask+0xa>
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    168a:	ce 01       	movw	r24, r28
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	4c 01       	movw	r8, r24
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1690:	44 24       	eor	r4, r4
    1692:	43 94       	inc	r4
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    1694:	e1 2c       	mov	r14, r1
    1696:	f1 2c       	mov	r15, r1
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1698:	51 2c       	mov	r5, r1
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    169a:	c8 2e       	mov	r12, r24
    169c:	d9 2c       	mov	r13, r9
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    169e:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <pxCurrentTimerList>
    16a2:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <pxCurrentTimerList+0x1>
    16a6:	80 81       	ld	r24, Z

        if( *pxListWasEmpty == pdFALSE )
    16a8:	88 23       	and	r24, r24
    16aa:	09 f4       	brne	.+2      	; 0x16ae <prvTimerTask+0x32>
    16ac:	ce c0       	rjmp	.+412    	; 0x184a <prvTimerTask+0x1ce>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    16ae:	05 80       	ldd	r0, Z+5	; 0x05
    16b0:	f6 81       	ldd	r31, Z+6	; 0x06
    16b2:	e0 2d       	mov	r30, r0
    16b4:	a0 80       	ld	r10, Z
    16b6:	b1 80       	ldd	r11, Z+1	; 0x01
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    16b8:	2f dc       	rcall	.-1954   	; 0xf18 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    16ba:	c4 01       	movw	r24, r8
    16bc:	71 df       	rcall	.-286    	; 0x15a0 <prvSampleTimeNow>
    16be:	8c 01       	movw	r16, r24

            if( xTimerListsWereSwitched == pdFALSE )
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	81 11       	cpse	r24, r1
    16c4:	46 c0       	rjmp	.+140    	; 0x1752 <prvTimerTask+0xd6>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    16c6:	0a 15       	cp	r16, r10
    16c8:	1b 05       	cpc	r17, r11
                {
                    ( void ) xTaskResumeAll();
    16ca:	a0 f1       	brcs	.+104    	; 0x1734 <prvTimerTask+0xb8>
    16cc:	d5 dc       	rcall	.-1622   	; 0x1078 <xTaskResumeAll>

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    16ce:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <pxCurrentTimerList>
    16d2:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <pxCurrentTimerList+0x1>
    16d6:	05 80       	ldd	r0, Z+5	; 0x05
    16d8:	f6 81       	ldd	r31, Z+6	; 0x06
    16da:	e0 2d       	mov	r30, r0
    16dc:	66 80       	ldd	r6, Z+6	; 0x06
    16de:	77 80       	ldd	r7, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    16e0:	c3 01       	movw	r24, r6
    16e2:	02 96       	adiw	r24, 0x02	; 2
    16e4:	0e 94 b6 00 	call	0x16c	; 0x16c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    16e8:	d3 01       	movw	r26, r6
    16ea:	52 96       	adiw	r26, 0x12	; 18
    16ec:	8c 91       	ld	r24, X
    16ee:	52 97       	sbiw	r26, 0x12	; 18
    16f0:	82 ff       	sbrs	r24, 2
    16f2:	15 c0       	rjmp	.+42     	; 0x171e <prvTimerTask+0xa2>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    16f4:	1c 96       	adiw	r26, 0x0c	; 12
    16f6:	6d 91       	ld	r22, X+
    16f8:	7c 91       	ld	r23, X
    16fa:	1d 97       	sbiw	r26, 0x0d	; 13
    16fc:	6a 0d       	add	r22, r10
    16fe:	7b 1d       	adc	r23, r11
    1700:	95 01       	movw	r18, r10
    1702:	a8 01       	movw	r20, r16
    1704:	c3 01       	movw	r24, r6
    1706:	5b de       	rcall	.-842    	; 0x13be <prvInsertTimerInActiveList>
    1708:	88 23       	and	r24, r24
    170a:	61 f0       	breq	.+24     	; 0x1724 <prvTimerTask+0xa8>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    170c:	0e 2d       	mov	r16, r14
    170e:	1f 2d       	mov	r17, r15
    1710:	2e 2d       	mov	r18, r14
    1712:	3f 2d       	mov	r19, r15
    1714:	a5 01       	movw	r20, r10
    1716:	65 2d       	mov	r22, r5
    1718:	c3 01       	movw	r24, r6
    171a:	fe de       	rcall	.-516    	; 0x1518 <xTimerGenericCommand>
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <prvTimerTask+0xa8>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    171e:	8e 7f       	andi	r24, 0xFE	; 254
    1720:	f3 01       	movw	r30, r6
    1722:	82 8b       	std	Z+18, r24	; 0x12
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1724:	d3 01       	movw	r26, r6
    1726:	50 96       	adiw	r26, 0x10	; 16
    1728:	ed 91       	ld	r30, X+
    172a:	fc 91       	ld	r31, X
    172c:	51 97       	sbiw	r26, 0x11	; 17
    172e:	c3 01       	movw	r24, r6
    1730:	09 95       	icall
    1732:	7f c0       	rjmp	.+254    	; 0x1832 <prvTimerTask+0x1b6>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1734:	45 2d       	mov	r20, r5
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    1736:	b5 01       	movw	r22, r10
    1738:	60 1b       	sub	r22, r16
    173a:	71 0b       	sbc	r23, r17
    173c:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xTimerQueue>
    1740:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xTimerQueue+0x1>

                    if( xTaskResumeAll() == pdFALSE )
    1744:	09 da       	rcall	.-3054   	; 0xb58 <vQueueWaitForMessageRestricted>
    1746:	98 dc       	rcall	.-1744   	; 0x1078 <xTaskResumeAll>
    1748:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    174a:	73 c0       	rjmp	.+230    	; 0x1832 <prvTimerTask+0x1b6>
    174c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    1750:	70 c0       	rjmp	.+224    	; 0x1832 <prvTimerTask+0x1b6>
    1752:	92 dc       	rcall	.-1756   	; 0x1078 <xTaskResumeAll>
    1754:	6e c0       	rjmp	.+220    	; 0x1832 <prvTimerTask+0x1b6>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	88 23       	and	r24, r24
    175a:	0c f4       	brge	.+2      	; 0x175e <prvTimerTask+0xe2>
    175c:	6a c0       	rjmp	.+212    	; 0x1832 <prvTimerTask+0x1b6>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    175e:	ac 80       	ldd	r10, Y+4	; 0x04
    1760:	bd 80       	ldd	r11, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    1762:	f5 01       	movw	r30, r10
    1764:	82 85       	ldd	r24, Z+10	; 0x0a
    1766:	93 85       	ldd	r25, Z+11	; 0x0b
    1768:	89 2b       	or	r24, r25
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    176a:	21 f0       	breq	.+8      	; 0x1774 <prvTimerTask+0xf8>
    176c:	c5 01       	movw	r24, r10
    176e:	02 96       	adiw	r24, 0x02	; 2
    1770:	0e 94 b6 00 	call	0x16c	; 0x16c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1774:	ce 01       	movw	r24, r28
    1776:	06 96       	adiw	r24, 0x06	; 6
    1778:	13 df       	rcall	.-474    	; 0x15a0 <prvSampleTimeNow>

                switch( xMessage.xMessageID )
    177a:	e9 81       	ldd	r30, Y+1	; 0x01
    177c:	0e 2e       	mov	r0, r30
    177e:	00 0c       	add	r0, r0
    1780:	ff 0b       	sbc	r31, r31
    1782:	ea 30       	cpi	r30, 0x0A	; 10
    1784:	f1 05       	cpc	r31, r1
    1786:	08 f0       	brcs	.+2      	; 0x178a <prvTimerTask+0x10e>
    1788:	54 c0       	rjmp	.+168    	; 0x1832 <prvTimerTask+0x1b6>
    178a:	e6 5d       	subi	r30, 0xD6	; 214
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	48 c1       	rjmp	.+656    	; 0x1a20 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    1790:	d5 01       	movw	r26, r10
    1792:	52 96       	adiw	r26, 0x12	; 18
    1794:	2c 91       	ld	r18, X
    1796:	52 97       	sbiw	r26, 0x12	; 18
    1798:	21 60       	ori	r18, 0x01	; 1
    179a:	52 96       	adiw	r26, 0x12	; 18
    179c:	2c 93       	st	X, r18
    179e:	52 97       	sbiw	r26, 0x12	; 18

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    17a0:	2a 81       	ldd	r18, Y+2	; 0x02
    17a2:	3b 81       	ldd	r19, Y+3	; 0x03
    17a4:	1c 96       	adiw	r26, 0x0c	; 12
    17a6:	6d 91       	ld	r22, X+
    17a8:	7c 91       	ld	r23, X
    17aa:	1d 97       	sbiw	r26, 0x0d	; 13
    17ac:	62 0f       	add	r22, r18
    17ae:	73 1f       	adc	r23, r19
    17b0:	ac 01       	movw	r20, r24
    17b2:	c5 01       	movw	r24, r10
    17b4:	04 de       	rcall	.-1016   	; 0x13be <prvInsertTimerInActiveList>
    17b6:	88 23       	and	r24, r24
    17b8:	e1 f1       	breq	.+120    	; 0x1832 <prvTimerTask+0x1b6>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    17ba:	d5 01       	movw	r26, r10
    17bc:	50 96       	adiw	r26, 0x10	; 16
    17be:	ed 91       	ld	r30, X+
    17c0:	fc 91       	ld	r31, X
    17c2:	51 97       	sbiw	r26, 0x11	; 17
    17c4:	c5 01       	movw	r24, r10
    17c6:	09 95       	icall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    17c8:	f5 01       	movw	r30, r10
    17ca:	82 89       	ldd	r24, Z+18	; 0x12
    17cc:	82 ff       	sbrs	r24, 2
    17ce:	31 c0       	rjmp	.+98     	; 0x1832 <prvTimerTask+0x1b6>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    17d0:	4a 81       	ldd	r20, Y+2	; 0x02
    17d2:	5b 81       	ldd	r21, Y+3	; 0x03
    17d4:	84 85       	ldd	r24, Z+12	; 0x0c
    17d6:	95 85       	ldd	r25, Z+13	; 0x0d
    17d8:	48 0f       	add	r20, r24
    17da:	59 1f       	adc	r21, r25
    17dc:	0e 2d       	mov	r16, r14
    17de:	1f 2d       	mov	r17, r15
    17e0:	2e 2d       	mov	r18, r14
    17e2:	3f 2d       	mov	r19, r15
    17e4:	65 2d       	mov	r22, r5
    17e6:	c5 01       	movw	r24, r10
    17e8:	97 de       	rcall	.-722    	; 0x1518 <xTimerGenericCommand>
    17ea:	23 c0       	rjmp	.+70     	; 0x1832 <prvTimerTask+0x1b6>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    17ec:	d5 01       	movw	r26, r10
    17ee:	52 96       	adiw	r26, 0x12	; 18
    17f0:	8c 91       	ld	r24, X
    17f2:	52 97       	sbiw	r26, 0x12	; 18
    17f4:	8e 7f       	andi	r24, 0xFE	; 254
    17f6:	52 96       	adiw	r26, 0x12	; 18
    17f8:	8c 93       	st	X, r24
    17fa:	1b c0       	rjmp	.+54     	; 0x1832 <prvTimerTask+0x1b6>
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    17fc:	f5 01       	movw	r30, r10
    17fe:	22 89       	ldd	r18, Z+18	; 0x12
    1800:	21 60       	ori	r18, 0x01	; 1
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1802:	22 8b       	std	Z+18, r18	; 0x12
    1804:	6a 81       	ldd	r22, Y+2	; 0x02
    1806:	7b 81       	ldd	r23, Y+3	; 0x03
    1808:	75 87       	std	Z+13, r23	; 0x0d
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    180a:	64 87       	std	Z+12, r22	; 0x0c
    180c:	68 0f       	add	r22, r24
    180e:	79 1f       	adc	r23, r25
    1810:	9c 01       	movw	r18, r24
    1812:	ac 01       	movw	r20, r24
    1814:	c5 01       	movw	r24, r10
    1816:	d3 dd       	rcall	.-1114   	; 0x13be <prvInsertTimerInActiveList>
    1818:	0c c0       	rjmp	.+24     	; 0x1832 <prvTimerTask+0x1b6>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    181a:	d5 01       	movw	r26, r10
    181c:	52 96       	adiw	r26, 0x12	; 18
    181e:	8c 91       	ld	r24, X
    1820:	81 fd       	sbrc	r24, 1
    1822:	04 c0       	rjmp	.+8      	; 0x182c <prvTimerTask+0x1b0>
                                {
                                    vPortFree( pxTimer );
    1824:	c5 01       	movw	r24, r10
    1826:	0e 94 10 03 	call	0x620	; 0x620 <vPortFree>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <prvTimerTask+0x1b6>
    182c:	8e 7f       	andi	r24, 0xFE	; 254
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    182e:	f5 01       	movw	r30, r10
    1830:	82 8b       	std	Z+18, r24	; 0x12
    1832:	4e 2d       	mov	r20, r14
    1834:	5f 2d       	mov	r21, r15
    1836:	6c 2d       	mov	r22, r12
    1838:	7d 2d       	mov	r23, r13
    183a:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xTimerQueue>
    183e:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xTimerQueue+0x1>
    1842:	03 d9       	rcall	.-3578   	; 0xa4a <xQueueReceive>
    1844:	81 11       	cpse	r24, r1
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1846:	87 cf       	rjmp	.-242    	; 0x1756 <prvTimerTask+0xda>
    1848:	2a cf       	rjmp	.-428    	; 0x169e <prvTimerTask+0x22>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    184a:	66 db       	rcall	.-2356   	; 0xf18 <vTaskSuspendAll>
    184c:	c4 01       	movw	r24, r8
    184e:	a8 de       	rcall	.-688    	; 0x15a0 <prvSampleTimeNow>
    1850:	8c 01       	movw	r16, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	81 11       	cpse	r24, r1
    1856:	7d cf       	rjmp	.-262    	; 0x1752 <prvTimerTask+0xd6>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1858:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <pxOverflowTimerList>
    185c:	f0 91 1a 07 	lds	r31, 0x071A	; 0x80071a <pxOverflowTimerList+0x1>
    1860:	80 81       	ld	r24, Z
    1862:	44 2d       	mov	r20, r4
    1864:	81 11       	cpse	r24, r1
    1866:	45 2d       	mov	r20, r5
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    1868:	ae 2c       	mov	r10, r14
    186a:	bf 2c       	mov	r11, r15
    186c:	64 cf       	rjmp	.-312    	; 0x1736 <prvTimerTask+0xba>

0000186e <DISPLAY>:

void DISPLAY()
{
	

	PORTB=PORTB | (1<<RS);
    186e:	c0 9a       	sbi	0x18, 0	; 24
	PORTB=PORTB & ~ (1<<RW);
    1870:	c1 98       	cbi	0x18, 1	; 24
	PORTB=PORTB  | (1<<E);
    1872:	c2 9a       	sbi	0x18, 2	; 24
	PORTB=PORTB & ~(1<<E);
    1874:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1876:	8f e1       	ldi	r24, 0x1F	; 31
    1878:	9e e4       	ldi	r25, 0x4E	; 78
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <DISPLAY+0xc>
    187e:	00 c0       	rjmp	.+0      	; 0x1880 <DISPLAY+0x12>
    1880:	00 00       	nop
    1882:	08 95       	ret

00001884 <usart_init>:
#include <avr/interrupt.h>
#include "lcd.h"

void usart_init(void)
{
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
    1884:	88 e9       	ldi	r24, 0x98	; 152
    1886:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ1) | (1<<UCSZ0) | (1<<URSEL);
    1888:	86 e8       	ldi	r24, 0x86	; 134
    188a:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33;
    188c:	83 e3       	ldi	r24, 0x33	; 51
    188e:	89 b9       	out	0x09, r24	; 9
    1890:	08 95       	ret

00001892 <usart_send>:
}

void usart_send(char *ch)
{
    1892:	fc 01       	movw	r30, r24
	
	
	
	while(*ch)
    1894:	90 81       	ld	r25, Z
    1896:	99 23       	and	r25, r25
    1898:	39 f0       	breq	.+14     	; 0x18a8 <usart_send+0x16>
    189a:	31 96       	adiw	r30, 0x01	; 1
	{
		
		while(!(UCSRA & (1<<UDRE)));
    189c:	5d 9b       	sbis	0x0b, 5	; 11
    189e:	fe cf       	rjmp	.-4      	; 0x189c <usart_send+0xa>
		
		
		UDR = *ch;
    18a0:	9c b9       	out	0x0c, r25	; 12
void usart_send(char *ch)
{
	
	
	
	while(*ch)
    18a2:	91 91       	ld	r25, Z+
    18a4:	91 11       	cpse	r25, r1
    18a6:	fa cf       	rjmp	.-12     	; 0x189c <usart_send+0xa>
    18a8:	08 95       	ret

000018aa <ACommonTimerCallback>:
	for(;;);
}

 
void ACommonTimerCallback(TimerHandle_t xTimer)
{
    18aa:	ef 92       	push	r14
    18ac:	ff 92       	push	r15
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	2a 97       	sbiw	r28, 0x0a	; 10
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	8c 01       	movw	r16, r24
	TickType_t xTimerNow;
	char ticks[10];
	
	xTimerNow = xTaskGetTickCount();                   // Getting Tick counts.
    18c8:	2d db       	rcall	.-2470   	; 0xf24 <xTaskGetTickCount>
    18ca:	f8 2e       	mov	r15, r24
    18cc:	e9 2e       	mov	r14, r25
	
	if(xTimer == xOneShotTimer)
    18ce:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <xOneShotTimer>
    18d2:	90 91 32 07 	lds	r25, 0x0732	; 0x800732 <xOneShotTimer+0x1>
    18d6:	80 17       	cp	r24, r16
    18d8:	91 07       	cpc	r25, r17
    18da:	c1 f4       	brne	.+48     	; 0x190c <ACommonTimerCallback+0x62>
	{
		usart_send((char*)"One Shot is executing ---> ");
    18dc:	8e e6       	ldi	r24, 0x6E	; 110
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	d8 df       	rcall	.-80     	; 0x1892 <usart_send>
		sprintf(ticks, "%d\r",xTimerNow);
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	8a e8       	ldi	r24, 0x8A	; 138
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9f 93       	push	r25
    18ec:	8f 93       	push	r24
    18ee:	8e 01       	movw	r16, r28
    18f0:	0f 5f       	subi	r16, 0xFF	; 255
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	1f 93       	push	r17
    18f6:	0f 93       	push	r16
		usart_send(ticks);
    18f8:	a2 d0       	rcall	.+324    	; 0x1a3e <sprintf>
    18fa:	c8 01       	movw	r24, r16
    18fc:	ca df       	rcall	.-108    	; 0x1892 <usart_send>
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
	}
	
	else
	{
		
		usart_send((char*)"Auto reload is executing ---> ");
    190a:	17 c0       	rjmp	.+46     	; 0x193a <ACommonTimerCallback+0x90>
    190c:	8e e8       	ldi	r24, 0x8E	; 142
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	c0 df       	rcall	.-128    	; 0x1892 <usart_send>
		sprintf(ticks, "%d\r",xTimerNow);
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	8a e8       	ldi	r24, 0x8A	; 138
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9f 93       	push	r25
    191c:	8f 93       	push	r24
    191e:	8e 01       	movw	r16, r28
    1920:	0f 5f       	subi	r16, 0xFF	; 255
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	1f 93       	push	r17
    1926:	0f 93       	push	r16
		usart_send(ticks);
    1928:	8a d0       	rcall	.+276    	; 0x1a3e <sprintf>
    192a:	c8 01       	movw	r24, r16
    192c:	b2 df       	rcall	.-156    	; 0x1892 <usart_send>
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
		 
	}

}
    193a:	2a 96       	adiw	r28, 0x0a	; 10
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	ff 90       	pop	r15
    1950:	ef 90       	pop	r14
    1952:	08 95       	ret

00001954 <__vector_13>:
	
	
}

ISR (USART_RXC_vect)
{
    1954:	1f 92       	push	r1
    1956:	0f 92       	push	r0
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	0f 92       	push	r0
    195c:	11 24       	eor	r1, r1
    195e:	2f 93       	push	r18
    1960:	3f 93       	push	r19
    1962:	4f 93       	push	r20
    1964:	5f 93       	push	r21
    1966:	6f 93       	push	r22
    1968:	7f 93       	push	r23
    196a:	8f 93       	push	r24
    196c:	9f 93       	push	r25
    196e:	af 93       	push	r26
    1970:	bf 93       	push	r27
    1972:	ef 93       	push	r30
    1974:	ff 93       	push	r31
	display = UDR;
    1976:	8c b1       	in	r24, 0x0c	; 12
    1978:	8b bb       	out	0x1b, r24	; 27
	DISPLAY();
    197a:	79 df       	rcall	.-270    	; 0x186e <DISPLAY>
    197c:	ff 91       	pop	r31
    197e:	ef 91       	pop	r30
    1980:	bf 91       	pop	r27
    1982:	af 91       	pop	r26
    1984:	9f 91       	pop	r25
    1986:	8f 91       	pop	r24
    1988:	7f 91       	pop	r23
    198a:	6f 91       	pop	r22
    198c:	5f 91       	pop	r21
    198e:	4f 91       	pop	r20
    1990:	3f 91       	pop	r19
    1992:	2f 91       	pop	r18
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <vApplicationIdleHook>:

void ACommonTimerCallback(TimerHandle_t xTimer);


void vApplicationIdleHook( void )
{
    199e:	08 95       	ret

000019a0 <main>:
}

int main(void)
{
	usart_init();
    19a0:	71 df       	rcall	.-286    	; 0x1884 <usart_init>
	
	BaseType_t    xTimer1Started, xTimer2Started;
	
	
	xOneShotTimer = xTimerCreate("OneShot", mainONE_SHOT_TIMER_PERIOD, pdFALSE, 0, ACommonTimerCallback);   // Creating the timers.
    19a2:	05 e5       	ldi	r16, 0x55	; 85
    19a4:	1c e0       	ldi	r17, 0x0C	; 12
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	68 e3       	ldi	r22, 0x38	; 56
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	8d ea       	ldi	r24, 0xAD	; 173
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	7b dd       	rcall	.-1290   	; 0x14ac <xTimerCreate>
    19b6:	90 93 32 07 	sts	0x0732, r25	; 0x800732 <xOneShotTimer+0x1>
    19ba:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <xOneShotTimer>
	
	xAutoReloadTimer = xTimerCreate("AutoReload", mainAUTO_RELOAD_TIMER_PERIOD, pdTRUE, 0, ACommonTimerCallback);  // Creating the timers.
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	69 e2       	ldi	r22, 0x29	; 41
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	85 eb       	ldi	r24, 0xB5	; 181
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	6f dd       	rcall	.-1314   	; 0x14ac <xTimerCreate>
    19ce:	90 93 30 07 	sts	0x0730, r25	; 0x800730 <xAutoReloadTimer+0x1>
    19d2:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <xAutoReloadTimer>
	
	if ((xOneShotTimer != NULL)  &&  (xAutoReloadTimer != NULL))
    19d6:	20 91 31 07 	lds	r18, 0x0731	; 0x800731 <xOneShotTimer>
    19da:	30 91 32 07 	lds	r19, 0x0732	; 0x800732 <xOneShotTimer+0x1>
    19de:	23 2b       	or	r18, r19
    19e0:	f1 f0       	breq	.+60     	; 0x1a1e <main+0x7e>
    19e2:	89 2b       	or	r24, r25
	{
		xTimer1Started = xTimerStart(xOneShotTimer, 0);        //  Starting the Timers (This will send commands to 'command Queue')
    19e4:	e1 f0       	breq	.+56     	; 0x1a1e <main+0x7e>
    19e6:	9e da       	rcall	.-2756   	; 0xf24 <xTaskGetTickCount>
    19e8:	00 e0       	ldi	r16, 0x00	; 0
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	ac 01       	movw	r20, r24
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <xOneShotTimer>
    19f8:	90 91 32 07 	lds	r25, 0x0732	; 0x800732 <xOneShotTimer+0x1>
    19fc:	8d dd       	rcall	.-1254   	; 0x1518 <xTimerGenericCommand>
		xTimer2Started = xTimerStart(xAutoReloadTimer, 0);
    19fe:	c8 2f       	mov	r28, r24
    1a00:	91 da       	rcall	.-2782   	; 0xf24 <xTaskGetTickCount>
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	ac 01       	movw	r20, r24
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <xAutoReloadTimer>
    1a0e:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <xAutoReloadTimer+0x1>
		
		if( (xTimer1Started == pdPASS) && (xTimer2Started == pdPASS))
    1a12:	82 dd       	rcall	.-1276   	; 0x1518 <xTimerGenericCommand>
    1a14:	c1 30       	cpi	r28, 0x01	; 1
    1a16:	19 f4       	brne	.+6      	; 0x1a1e <main+0x7e>
    1a18:	81 30       	cpi	r24, 0x01	; 1
		
		{
			vTaskStartScheduler();			// Starting the Scheduler...
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <main+0x7e>
    1a1c:	50 da       	rcall	.-2912   	; 0xebe <vTaskStartScheduler>
    1a1e:	ff cf       	rjmp	.-2      	; 0x1a1e <main+0x7e>

00001a20 <__tablejump2__>:
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	05 90       	lpm	r0, Z+
    1a26:	f4 91       	lpm	r31, Z
    1a28:	e0 2d       	mov	r30, r0
    1a2a:	09 94       	ijmp

00001a2c <memcpy>:
    1a2c:	fb 01       	movw	r30, r22
    1a2e:	dc 01       	movw	r26, r24
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <memcpy+0xa>
    1a32:	01 90       	ld	r0, Z+
    1a34:	0d 92       	st	X+, r0
    1a36:	41 50       	subi	r20, 0x01	; 1
    1a38:	50 40       	sbci	r21, 0x00	; 0
    1a3a:	d8 f7       	brcc	.-10     	; 0x1a32 <memcpy+0x6>
    1a3c:	08 95       	ret

00001a3e <sprintf>:
    1a3e:	ae e0       	ldi	r26, 0x0E	; 14
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e4 e2       	ldi	r30, 0x24	; 36
    1a44:	fd e0       	ldi	r31, 0x0D	; 13
    1a46:	aa c2       	rjmp	.+1364   	; 0x1f9c <__prologue_saves__+0x1c>
    1a48:	0d 89       	ldd	r16, Y+21	; 0x15
    1a4a:	1e 89       	ldd	r17, Y+22	; 0x16
    1a4c:	86 e0       	ldi	r24, 0x06	; 6
    1a4e:	8c 83       	std	Y+4, r24	; 0x04
    1a50:	1a 83       	std	Y+2, r17	; 0x02
    1a52:	09 83       	std	Y+1, r16	; 0x01
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	9f e7       	ldi	r25, 0x7F	; 127
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	ae 01       	movw	r20, r28
    1a5e:	47 5e       	subi	r20, 0xE7	; 231
    1a60:	5f 4f       	sbci	r21, 0xFF	; 255
    1a62:	6f 89       	ldd	r22, Y+23	; 0x17
    1a64:	78 8d       	ldd	r23, Y+24	; 0x18
    1a66:	ce 01       	movw	r24, r28
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	08 d0       	rcall	.+16     	; 0x1a7c <vfprintf>
    1a6c:	ef 81       	ldd	r30, Y+7	; 0x07
    1a6e:	f8 85       	ldd	r31, Y+8	; 0x08
    1a70:	e0 0f       	add	r30, r16
    1a72:	f1 1f       	adc	r31, r17
    1a74:	10 82       	st	Z, r1
    1a76:	2e 96       	adiw	r28, 0x0e	; 14
    1a78:	e4 e0       	ldi	r30, 0x04	; 4
    1a7a:	ac c2       	rjmp	.+1368   	; 0x1fd4 <__epilogue_restores__+0x1c>

00001a7c <vfprintf>:
    1a7c:	ab e0       	ldi	r26, 0x0B	; 11
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e3 e4       	ldi	r30, 0x43	; 67
    1a82:	fd e0       	ldi	r31, 0x0D	; 13
    1a84:	7d c2       	rjmp	.+1274   	; 0x1f80 <__prologue_saves__>
    1a86:	6c 01       	movw	r12, r24
    1a88:	7b 01       	movw	r14, r22
    1a8a:	8a 01       	movw	r16, r20
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	17 82       	std	Z+7, r1	; 0x07
    1a90:	16 82       	std	Z+6, r1	; 0x06
    1a92:	83 81       	ldd	r24, Z+3	; 0x03
    1a94:	81 ff       	sbrs	r24, 1
    1a96:	bf c1       	rjmp	.+894    	; 0x1e16 <vfprintf+0x39a>
    1a98:	ce 01       	movw	r24, r28
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	3c 01       	movw	r6, r24
    1a9e:	f6 01       	movw	r30, r12
    1aa0:	93 81       	ldd	r25, Z+3	; 0x03
    1aa2:	f7 01       	movw	r30, r14
    1aa4:	93 fd       	sbrc	r25, 3
    1aa6:	85 91       	lpm	r24, Z+
    1aa8:	93 ff       	sbrs	r25, 3
    1aaa:	81 91       	ld	r24, Z+
    1aac:	7f 01       	movw	r14, r30
    1aae:	88 23       	and	r24, r24
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <vfprintf+0x38>
    1ab2:	ad c1       	rjmp	.+858    	; 0x1e0e <vfprintf+0x392>
    1ab4:	85 32       	cpi	r24, 0x25	; 37
    1ab6:	39 f4       	brne	.+14     	; 0x1ac6 <vfprintf+0x4a>
    1ab8:	93 fd       	sbrc	r25, 3
    1aba:	85 91       	lpm	r24, Z+
    1abc:	93 ff       	sbrs	r25, 3
    1abe:	81 91       	ld	r24, Z+
    1ac0:	7f 01       	movw	r14, r30
    1ac2:	85 32       	cpi	r24, 0x25	; 37
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <vfprintf+0x52>
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	c0 d1       	rcall	.+896    	; 0x1e4c <fputc>
    1acc:	e8 cf       	rjmp	.-48     	; 0x1a9e <vfprintf+0x22>
    1ace:	91 2c       	mov	r9, r1
    1ad0:	21 2c       	mov	r2, r1
    1ad2:	31 2c       	mov	r3, r1
    1ad4:	ff e1       	ldi	r31, 0x1F	; 31
    1ad6:	f3 15       	cp	r31, r3
    1ad8:	d8 f0       	brcs	.+54     	; 0x1b10 <vfprintf+0x94>
    1ada:	8b 32       	cpi	r24, 0x2B	; 43
    1adc:	79 f0       	breq	.+30     	; 0x1afc <vfprintf+0x80>
    1ade:	38 f4       	brcc	.+14     	; 0x1aee <vfprintf+0x72>
    1ae0:	80 32       	cpi	r24, 0x20	; 32
    1ae2:	79 f0       	breq	.+30     	; 0x1b02 <vfprintf+0x86>
    1ae4:	83 32       	cpi	r24, 0x23	; 35
    1ae6:	a1 f4       	brne	.+40     	; 0x1b10 <vfprintf+0x94>
    1ae8:	23 2d       	mov	r18, r3
    1aea:	20 61       	ori	r18, 0x10	; 16
    1aec:	1d c0       	rjmp	.+58     	; 0x1b28 <vfprintf+0xac>
    1aee:	8d 32       	cpi	r24, 0x2D	; 45
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <vfprintf+0x8e>
    1af2:	80 33       	cpi	r24, 0x30	; 48
    1af4:	69 f4       	brne	.+26     	; 0x1b10 <vfprintf+0x94>
    1af6:	23 2d       	mov	r18, r3
    1af8:	21 60       	ori	r18, 0x01	; 1
    1afa:	16 c0       	rjmp	.+44     	; 0x1b28 <vfprintf+0xac>
    1afc:	83 2d       	mov	r24, r3
    1afe:	82 60       	ori	r24, 0x02	; 2
    1b00:	38 2e       	mov	r3, r24
    1b02:	e3 2d       	mov	r30, r3
    1b04:	e4 60       	ori	r30, 0x04	; 4
    1b06:	3e 2e       	mov	r3, r30
    1b08:	2a c0       	rjmp	.+84     	; 0x1b5e <vfprintf+0xe2>
    1b0a:	f3 2d       	mov	r31, r3
    1b0c:	f8 60       	ori	r31, 0x08	; 8
    1b0e:	1d c0       	rjmp	.+58     	; 0x1b4a <vfprintf+0xce>
    1b10:	37 fc       	sbrc	r3, 7
    1b12:	2d c0       	rjmp	.+90     	; 0x1b6e <vfprintf+0xf2>
    1b14:	20 ed       	ldi	r18, 0xD0	; 208
    1b16:	28 0f       	add	r18, r24
    1b18:	2a 30       	cpi	r18, 0x0A	; 10
    1b1a:	40 f0       	brcs	.+16     	; 0x1b2c <vfprintf+0xb0>
    1b1c:	8e 32       	cpi	r24, 0x2E	; 46
    1b1e:	b9 f4       	brne	.+46     	; 0x1b4e <vfprintf+0xd2>
    1b20:	36 fc       	sbrc	r3, 6
    1b22:	75 c1       	rjmp	.+746    	; 0x1e0e <vfprintf+0x392>
    1b24:	23 2d       	mov	r18, r3
    1b26:	20 64       	ori	r18, 0x40	; 64
    1b28:	32 2e       	mov	r3, r18
    1b2a:	19 c0       	rjmp	.+50     	; 0x1b5e <vfprintf+0xe2>
    1b2c:	36 fe       	sbrs	r3, 6
    1b2e:	06 c0       	rjmp	.+12     	; 0x1b3c <vfprintf+0xc0>
    1b30:	8a e0       	ldi	r24, 0x0A	; 10
    1b32:	98 9e       	mul	r9, r24
    1b34:	20 0d       	add	r18, r0
    1b36:	11 24       	eor	r1, r1
    1b38:	92 2e       	mov	r9, r18
    1b3a:	11 c0       	rjmp	.+34     	; 0x1b5e <vfprintf+0xe2>
    1b3c:	ea e0       	ldi	r30, 0x0A	; 10
    1b3e:	2e 9e       	mul	r2, r30
    1b40:	20 0d       	add	r18, r0
    1b42:	11 24       	eor	r1, r1
    1b44:	22 2e       	mov	r2, r18
    1b46:	f3 2d       	mov	r31, r3
    1b48:	f0 62       	ori	r31, 0x20	; 32
    1b4a:	3f 2e       	mov	r3, r31
    1b4c:	08 c0       	rjmp	.+16     	; 0x1b5e <vfprintf+0xe2>
    1b4e:	8c 36       	cpi	r24, 0x6C	; 108
    1b50:	21 f4       	brne	.+8      	; 0x1b5a <vfprintf+0xde>
    1b52:	83 2d       	mov	r24, r3
    1b54:	80 68       	ori	r24, 0x80	; 128
    1b56:	38 2e       	mov	r3, r24
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <vfprintf+0xe2>
    1b5a:	88 36       	cpi	r24, 0x68	; 104
    1b5c:	41 f4       	brne	.+16     	; 0x1b6e <vfprintf+0xf2>
    1b5e:	f7 01       	movw	r30, r14
    1b60:	93 fd       	sbrc	r25, 3
    1b62:	85 91       	lpm	r24, Z+
    1b64:	93 ff       	sbrs	r25, 3
    1b66:	81 91       	ld	r24, Z+
    1b68:	7f 01       	movw	r14, r30
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	b3 cf       	rjmp	.-154    	; 0x1ad4 <vfprintf+0x58>
    1b6e:	98 2f       	mov	r25, r24
    1b70:	9f 7d       	andi	r25, 0xDF	; 223
    1b72:	95 54       	subi	r25, 0x45	; 69
    1b74:	93 30       	cpi	r25, 0x03	; 3
    1b76:	28 f4       	brcc	.+10     	; 0x1b82 <vfprintf+0x106>
    1b78:	0c 5f       	subi	r16, 0xFC	; 252
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	9f e3       	ldi	r25, 0x3F	; 63
    1b7e:	99 83       	std	Y+1, r25	; 0x01
    1b80:	0d c0       	rjmp	.+26     	; 0x1b9c <vfprintf+0x120>
    1b82:	83 36       	cpi	r24, 0x63	; 99
    1b84:	31 f0       	breq	.+12     	; 0x1b92 <vfprintf+0x116>
    1b86:	83 37       	cpi	r24, 0x73	; 115
    1b88:	71 f0       	breq	.+28     	; 0x1ba6 <vfprintf+0x12a>
    1b8a:	83 35       	cpi	r24, 0x53	; 83
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <vfprintf+0x114>
    1b8e:	55 c0       	rjmp	.+170    	; 0x1c3a <vfprintf+0x1be>
    1b90:	20 c0       	rjmp	.+64     	; 0x1bd2 <vfprintf+0x156>
    1b92:	f8 01       	movw	r30, r16
    1b94:	80 81       	ld	r24, Z
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	0e 5f       	subi	r16, 0xFE	; 254
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	88 24       	eor	r8, r8
    1b9e:	83 94       	inc	r8
    1ba0:	91 2c       	mov	r9, r1
    1ba2:	53 01       	movw	r10, r6
    1ba4:	12 c0       	rjmp	.+36     	; 0x1bca <vfprintf+0x14e>
    1ba6:	28 01       	movw	r4, r16
    1ba8:	f2 e0       	ldi	r31, 0x02	; 2
    1baa:	4f 0e       	add	r4, r31
    1bac:	51 1c       	adc	r5, r1
    1bae:	f8 01       	movw	r30, r16
    1bb0:	a0 80       	ld	r10, Z
    1bb2:	b1 80       	ldd	r11, Z+1	; 0x01
    1bb4:	36 fe       	sbrs	r3, 6
    1bb6:	03 c0       	rjmp	.+6      	; 0x1bbe <vfprintf+0x142>
    1bb8:	69 2d       	mov	r22, r9
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <vfprintf+0x146>
    1bbe:	6f ef       	ldi	r22, 0xFF	; 255
    1bc0:	7f ef       	ldi	r23, 0xFF	; 255
    1bc2:	c5 01       	movw	r24, r10
    1bc4:	38 d1       	rcall	.+624    	; 0x1e36 <strnlen>
    1bc6:	4c 01       	movw	r8, r24
    1bc8:	82 01       	movw	r16, r4
    1bca:	f3 2d       	mov	r31, r3
    1bcc:	ff 77       	andi	r31, 0x7F	; 127
    1bce:	3f 2e       	mov	r3, r31
    1bd0:	15 c0       	rjmp	.+42     	; 0x1bfc <vfprintf+0x180>
    1bd2:	28 01       	movw	r4, r16
    1bd4:	22 e0       	ldi	r18, 0x02	; 2
    1bd6:	42 0e       	add	r4, r18
    1bd8:	51 1c       	adc	r5, r1
    1bda:	f8 01       	movw	r30, r16
    1bdc:	a0 80       	ld	r10, Z
    1bde:	b1 80       	ldd	r11, Z+1	; 0x01
    1be0:	36 fe       	sbrs	r3, 6
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <vfprintf+0x16e>
    1be4:	69 2d       	mov	r22, r9
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <vfprintf+0x172>
    1bea:	6f ef       	ldi	r22, 0xFF	; 255
    1bec:	7f ef       	ldi	r23, 0xFF	; 255
    1bee:	c5 01       	movw	r24, r10
    1bf0:	17 d1       	rcall	.+558    	; 0x1e20 <strnlen_P>
    1bf2:	4c 01       	movw	r8, r24
    1bf4:	f3 2d       	mov	r31, r3
    1bf6:	f0 68       	ori	r31, 0x80	; 128
    1bf8:	3f 2e       	mov	r3, r31
    1bfa:	82 01       	movw	r16, r4
    1bfc:	33 fc       	sbrc	r3, 3
    1bfe:	19 c0       	rjmp	.+50     	; 0x1c32 <vfprintf+0x1b6>
    1c00:	82 2d       	mov	r24, r2
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	88 16       	cp	r8, r24
    1c06:	99 06       	cpc	r9, r25
    1c08:	a0 f4       	brcc	.+40     	; 0x1c32 <vfprintf+0x1b6>
    1c0a:	b6 01       	movw	r22, r12
    1c0c:	80 e2       	ldi	r24, 0x20	; 32
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	1d d1       	rcall	.+570    	; 0x1e4c <fputc>
    1c12:	2a 94       	dec	r2
    1c14:	f5 cf       	rjmp	.-22     	; 0x1c00 <vfprintf+0x184>
    1c16:	f5 01       	movw	r30, r10
    1c18:	37 fc       	sbrc	r3, 7
    1c1a:	85 91       	lpm	r24, Z+
    1c1c:	37 fe       	sbrs	r3, 7
    1c1e:	81 91       	ld	r24, Z+
    1c20:	5f 01       	movw	r10, r30
    1c22:	b6 01       	movw	r22, r12
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	12 d1       	rcall	.+548    	; 0x1e4c <fputc>
    1c28:	21 10       	cpse	r2, r1
    1c2a:	2a 94       	dec	r2
    1c2c:	21 e0       	ldi	r18, 0x01	; 1
    1c2e:	82 1a       	sub	r8, r18
    1c30:	91 08       	sbc	r9, r1
    1c32:	81 14       	cp	r8, r1
    1c34:	91 04       	cpc	r9, r1
    1c36:	79 f7       	brne	.-34     	; 0x1c16 <vfprintf+0x19a>
    1c38:	e1 c0       	rjmp	.+450    	; 0x1dfc <vfprintf+0x380>
    1c3a:	84 36       	cpi	r24, 0x64	; 100
    1c3c:	11 f0       	breq	.+4      	; 0x1c42 <vfprintf+0x1c6>
    1c3e:	89 36       	cpi	r24, 0x69	; 105
    1c40:	39 f5       	brne	.+78     	; 0x1c90 <vfprintf+0x214>
    1c42:	f8 01       	movw	r30, r16
    1c44:	37 fe       	sbrs	r3, 7
    1c46:	07 c0       	rjmp	.+14     	; 0x1c56 <vfprintf+0x1da>
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	0c 5f       	subi	r16, 0xFC	; 252
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	08 c0       	rjmp	.+16     	; 0x1c66 <vfprintf+0x1ea>
    1c56:	60 81       	ld	r22, Z
    1c58:	71 81       	ldd	r23, Z+1	; 0x01
    1c5a:	07 2e       	mov	r0, r23
    1c5c:	00 0c       	add	r0, r0
    1c5e:	88 0b       	sbc	r24, r24
    1c60:	99 0b       	sbc	r25, r25
    1c62:	0e 5f       	subi	r16, 0xFE	; 254
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	f3 2d       	mov	r31, r3
    1c68:	ff 76       	andi	r31, 0x6F	; 111
    1c6a:	3f 2e       	mov	r3, r31
    1c6c:	97 ff       	sbrs	r25, 7
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <vfprintf+0x206>
    1c70:	90 95       	com	r25
    1c72:	80 95       	com	r24
    1c74:	70 95       	com	r23
    1c76:	61 95       	neg	r22
    1c78:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	f0 68       	ori	r31, 0x80	; 128
    1c80:	3f 2e       	mov	r3, r31
    1c82:	2a e0       	ldi	r18, 0x0A	; 10
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	a3 01       	movw	r20, r6
    1c88:	1d d1       	rcall	.+570    	; 0x1ec4 <__ultoa_invert>
    1c8a:	88 2e       	mov	r8, r24
    1c8c:	86 18       	sub	r8, r6
    1c8e:	44 c0       	rjmp	.+136    	; 0x1d18 <vfprintf+0x29c>
    1c90:	85 37       	cpi	r24, 0x75	; 117
    1c92:	31 f4       	brne	.+12     	; 0x1ca0 <vfprintf+0x224>
    1c94:	23 2d       	mov	r18, r3
    1c96:	2f 7e       	andi	r18, 0xEF	; 239
    1c98:	b2 2e       	mov	r11, r18
    1c9a:	2a e0       	ldi	r18, 0x0A	; 10
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	25 c0       	rjmp	.+74     	; 0x1cea <vfprintf+0x26e>
    1ca0:	93 2d       	mov	r25, r3
    1ca2:	99 7f       	andi	r25, 0xF9	; 249
    1ca4:	b9 2e       	mov	r11, r25
    1ca6:	8f 36       	cpi	r24, 0x6F	; 111
    1ca8:	c1 f0       	breq	.+48     	; 0x1cda <vfprintf+0x25e>
    1caa:	18 f4       	brcc	.+6      	; 0x1cb2 <vfprintf+0x236>
    1cac:	88 35       	cpi	r24, 0x58	; 88
    1cae:	79 f0       	breq	.+30     	; 0x1cce <vfprintf+0x252>
    1cb0:	ae c0       	rjmp	.+348    	; 0x1e0e <vfprintf+0x392>
    1cb2:	80 37       	cpi	r24, 0x70	; 112
    1cb4:	19 f0       	breq	.+6      	; 0x1cbc <vfprintf+0x240>
    1cb6:	88 37       	cpi	r24, 0x78	; 120
    1cb8:	21 f0       	breq	.+8      	; 0x1cc2 <vfprintf+0x246>
    1cba:	a9 c0       	rjmp	.+338    	; 0x1e0e <vfprintf+0x392>
    1cbc:	e9 2f       	mov	r30, r25
    1cbe:	e0 61       	ori	r30, 0x10	; 16
    1cc0:	be 2e       	mov	r11, r30
    1cc2:	b4 fe       	sbrs	r11, 4
    1cc4:	0d c0       	rjmp	.+26     	; 0x1ce0 <vfprintf+0x264>
    1cc6:	fb 2d       	mov	r31, r11
    1cc8:	f4 60       	ori	r31, 0x04	; 4
    1cca:	bf 2e       	mov	r11, r31
    1ccc:	09 c0       	rjmp	.+18     	; 0x1ce0 <vfprintf+0x264>
    1cce:	34 fe       	sbrs	r3, 4
    1cd0:	0a c0       	rjmp	.+20     	; 0x1ce6 <vfprintf+0x26a>
    1cd2:	29 2f       	mov	r18, r25
    1cd4:	26 60       	ori	r18, 0x06	; 6
    1cd6:	b2 2e       	mov	r11, r18
    1cd8:	06 c0       	rjmp	.+12     	; 0x1ce6 <vfprintf+0x26a>
    1cda:	28 e0       	ldi	r18, 0x08	; 8
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <vfprintf+0x26e>
    1ce0:	20 e1       	ldi	r18, 0x10	; 16
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0x26e>
    1ce6:	20 e1       	ldi	r18, 0x10	; 16
    1ce8:	32 e0       	ldi	r19, 0x02	; 2
    1cea:	f8 01       	movw	r30, r16
    1cec:	b7 fe       	sbrs	r11, 7
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <vfprintf+0x282>
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	0c 5f       	subi	r16, 0xFC	; 252
    1cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfc:	06 c0       	rjmp	.+12     	; 0x1d0a <vfprintf+0x28e>
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 5f       	subi	r16, 0xFE	; 254
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	a3 01       	movw	r20, r6
    1d0c:	db d0       	rcall	.+438    	; 0x1ec4 <__ultoa_invert>
    1d0e:	88 2e       	mov	r8, r24
    1d10:	86 18       	sub	r8, r6
    1d12:	fb 2d       	mov	r31, r11
    1d14:	ff 77       	andi	r31, 0x7F	; 127
    1d16:	3f 2e       	mov	r3, r31
    1d18:	36 fe       	sbrs	r3, 6
    1d1a:	0d c0       	rjmp	.+26     	; 0x1d36 <vfprintf+0x2ba>
    1d1c:	23 2d       	mov	r18, r3
    1d1e:	2e 7f       	andi	r18, 0xFE	; 254
    1d20:	a2 2e       	mov	r10, r18
    1d22:	89 14       	cp	r8, r9
    1d24:	58 f4       	brcc	.+22     	; 0x1d3c <vfprintf+0x2c0>
    1d26:	34 fe       	sbrs	r3, 4
    1d28:	0b c0       	rjmp	.+22     	; 0x1d40 <vfprintf+0x2c4>
    1d2a:	32 fc       	sbrc	r3, 2
    1d2c:	09 c0       	rjmp	.+18     	; 0x1d40 <vfprintf+0x2c4>
    1d2e:	83 2d       	mov	r24, r3
    1d30:	8e 7e       	andi	r24, 0xEE	; 238
    1d32:	a8 2e       	mov	r10, r24
    1d34:	05 c0       	rjmp	.+10     	; 0x1d40 <vfprintf+0x2c4>
    1d36:	b8 2c       	mov	r11, r8
    1d38:	a3 2c       	mov	r10, r3
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <vfprintf+0x2c6>
    1d3c:	b8 2c       	mov	r11, r8
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <vfprintf+0x2c6>
    1d40:	b9 2c       	mov	r11, r9
    1d42:	a4 fe       	sbrs	r10, 4
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <vfprintf+0x2e8>
    1d46:	fe 01       	movw	r30, r28
    1d48:	e8 0d       	add	r30, r8
    1d4a:	f1 1d       	adc	r31, r1
    1d4c:	80 81       	ld	r24, Z
    1d4e:	80 33       	cpi	r24, 0x30	; 48
    1d50:	21 f4       	brne	.+8      	; 0x1d5a <vfprintf+0x2de>
    1d52:	9a 2d       	mov	r25, r10
    1d54:	99 7e       	andi	r25, 0xE9	; 233
    1d56:	a9 2e       	mov	r10, r25
    1d58:	09 c0       	rjmp	.+18     	; 0x1d6c <vfprintf+0x2f0>
    1d5a:	a2 fe       	sbrs	r10, 2
    1d5c:	06 c0       	rjmp	.+12     	; 0x1d6a <vfprintf+0x2ee>
    1d5e:	b3 94       	inc	r11
    1d60:	b3 94       	inc	r11
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <vfprintf+0x2f0>
    1d64:	8a 2d       	mov	r24, r10
    1d66:	86 78       	andi	r24, 0x86	; 134
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <vfprintf+0x2f0>
    1d6a:	b3 94       	inc	r11
    1d6c:	a3 fc       	sbrc	r10, 3
    1d6e:	10 c0       	rjmp	.+32     	; 0x1d90 <vfprintf+0x314>
    1d70:	a0 fe       	sbrs	r10, 0
    1d72:	06 c0       	rjmp	.+12     	; 0x1d80 <vfprintf+0x304>
    1d74:	b2 14       	cp	r11, r2
    1d76:	80 f4       	brcc	.+32     	; 0x1d98 <vfprintf+0x31c>
    1d78:	28 0c       	add	r2, r8
    1d7a:	92 2c       	mov	r9, r2
    1d7c:	9b 18       	sub	r9, r11
    1d7e:	0d c0       	rjmp	.+26     	; 0x1d9a <vfprintf+0x31e>
    1d80:	b2 14       	cp	r11, r2
    1d82:	58 f4       	brcc	.+22     	; 0x1d9a <vfprintf+0x31e>
    1d84:	b6 01       	movw	r22, r12
    1d86:	80 e2       	ldi	r24, 0x20	; 32
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	60 d0       	rcall	.+192    	; 0x1e4c <fputc>
    1d8c:	b3 94       	inc	r11
    1d8e:	f8 cf       	rjmp	.-16     	; 0x1d80 <vfprintf+0x304>
    1d90:	b2 14       	cp	r11, r2
    1d92:	18 f4       	brcc	.+6      	; 0x1d9a <vfprintf+0x31e>
    1d94:	2b 18       	sub	r2, r11
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <vfprintf+0x320>
    1d98:	98 2c       	mov	r9, r8
    1d9a:	21 2c       	mov	r2, r1
    1d9c:	a4 fe       	sbrs	r10, 4
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <vfprintf+0x342>
    1da0:	b6 01       	movw	r22, r12
    1da2:	80 e3       	ldi	r24, 0x30	; 48
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	52 d0       	rcall	.+164    	; 0x1e4c <fputc>
    1da8:	a2 fe       	sbrs	r10, 2
    1daa:	16 c0       	rjmp	.+44     	; 0x1dd8 <vfprintf+0x35c>
    1dac:	a1 fc       	sbrc	r10, 1
    1dae:	03 c0       	rjmp	.+6      	; 0x1db6 <vfprintf+0x33a>
    1db0:	88 e7       	ldi	r24, 0x78	; 120
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <vfprintf+0x33e>
    1db6:	88 e5       	ldi	r24, 0x58	; 88
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	b6 01       	movw	r22, r12
    1dbc:	0c c0       	rjmp	.+24     	; 0x1dd6 <vfprintf+0x35a>
    1dbe:	8a 2d       	mov	r24, r10
    1dc0:	86 78       	andi	r24, 0x86	; 134
    1dc2:	51 f0       	breq	.+20     	; 0x1dd8 <vfprintf+0x35c>
    1dc4:	a1 fe       	sbrs	r10, 1
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <vfprintf+0x350>
    1dc8:	8b e2       	ldi	r24, 0x2B	; 43
    1dca:	01 c0       	rjmp	.+2      	; 0x1dce <vfprintf+0x352>
    1dcc:	80 e2       	ldi	r24, 0x20	; 32
    1dce:	a7 fc       	sbrc	r10, 7
    1dd0:	8d e2       	ldi	r24, 0x2D	; 45
    1dd2:	b6 01       	movw	r22, r12
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	3a d0       	rcall	.+116    	; 0x1e4c <fputc>
    1dd8:	89 14       	cp	r8, r9
    1dda:	30 f4       	brcc	.+12     	; 0x1de8 <vfprintf+0x36c>
    1ddc:	b6 01       	movw	r22, r12
    1dde:	80 e3       	ldi	r24, 0x30	; 48
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	34 d0       	rcall	.+104    	; 0x1e4c <fputc>
    1de4:	9a 94       	dec	r9
    1de6:	f8 cf       	rjmp	.-16     	; 0x1dd8 <vfprintf+0x35c>
    1de8:	8a 94       	dec	r8
    1dea:	f3 01       	movw	r30, r6
    1dec:	e8 0d       	add	r30, r8
    1dee:	f1 1d       	adc	r31, r1
    1df0:	80 81       	ld	r24, Z
    1df2:	b6 01       	movw	r22, r12
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	2a d0       	rcall	.+84     	; 0x1e4c <fputc>
    1df8:	81 10       	cpse	r8, r1
    1dfa:	f6 cf       	rjmp	.-20     	; 0x1de8 <vfprintf+0x36c>
    1dfc:	22 20       	and	r2, r2
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <vfprintf+0x386>
    1e00:	4e ce       	rjmp	.-868    	; 0x1a9e <vfprintf+0x22>
    1e02:	b6 01       	movw	r22, r12
    1e04:	80 e2       	ldi	r24, 0x20	; 32
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	21 d0       	rcall	.+66     	; 0x1e4c <fputc>
    1e0a:	2a 94       	dec	r2
    1e0c:	f7 cf       	rjmp	.-18     	; 0x1dfc <vfprintf+0x380>
    1e0e:	f6 01       	movw	r30, r12
    1e10:	86 81       	ldd	r24, Z+6	; 0x06
    1e12:	97 81       	ldd	r25, Z+7	; 0x07
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <vfprintf+0x39e>
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	9f ef       	ldi	r25, 0xFF	; 255
    1e1a:	2b 96       	adiw	r28, 0x0b	; 11
    1e1c:	e2 e1       	ldi	r30, 0x12	; 18
    1e1e:	cc c0       	rjmp	.+408    	; 0x1fb8 <__epilogue_restores__>

00001e20 <strnlen_P>:
    1e20:	fc 01       	movw	r30, r24
    1e22:	05 90       	lpm	r0, Z+
    1e24:	61 50       	subi	r22, 0x01	; 1
    1e26:	70 40       	sbci	r23, 0x00	; 0
    1e28:	01 10       	cpse	r0, r1
    1e2a:	d8 f7       	brcc	.-10     	; 0x1e22 <strnlen_P+0x2>
    1e2c:	80 95       	com	r24
    1e2e:	90 95       	com	r25
    1e30:	8e 0f       	add	r24, r30
    1e32:	9f 1f       	adc	r25, r31
    1e34:	08 95       	ret

00001e36 <strnlen>:
    1e36:	fc 01       	movw	r30, r24
    1e38:	61 50       	subi	r22, 0x01	; 1
    1e3a:	70 40       	sbci	r23, 0x00	; 0
    1e3c:	01 90       	ld	r0, Z+
    1e3e:	01 10       	cpse	r0, r1
    1e40:	d8 f7       	brcc	.-10     	; 0x1e38 <strnlen+0x2>
    1e42:	80 95       	com	r24
    1e44:	90 95       	com	r25
    1e46:	8e 0f       	add	r24, r30
    1e48:	9f 1f       	adc	r25, r31
    1e4a:	08 95       	ret

00001e4c <fputc>:
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	fb 01       	movw	r30, r22
    1e56:	23 81       	ldd	r18, Z+3	; 0x03
    1e58:	21 fd       	sbrc	r18, 1
    1e5a:	03 c0       	rjmp	.+6      	; 0x1e62 <fputc+0x16>
    1e5c:	8f ef       	ldi	r24, 0xFF	; 255
    1e5e:	9f ef       	ldi	r25, 0xFF	; 255
    1e60:	2c c0       	rjmp	.+88     	; 0x1eba <fputc+0x6e>
    1e62:	22 ff       	sbrs	r18, 2
    1e64:	16 c0       	rjmp	.+44     	; 0x1e92 <fputc+0x46>
    1e66:	46 81       	ldd	r20, Z+6	; 0x06
    1e68:	57 81       	ldd	r21, Z+7	; 0x07
    1e6a:	24 81       	ldd	r18, Z+4	; 0x04
    1e6c:	35 81       	ldd	r19, Z+5	; 0x05
    1e6e:	42 17       	cp	r20, r18
    1e70:	53 07       	cpc	r21, r19
    1e72:	44 f4       	brge	.+16     	; 0x1e84 <fputc+0x38>
    1e74:	a0 81       	ld	r26, Z
    1e76:	b1 81       	ldd	r27, Z+1	; 0x01
    1e78:	9d 01       	movw	r18, r26
    1e7a:	2f 5f       	subi	r18, 0xFF	; 255
    1e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7e:	31 83       	std	Z+1, r19	; 0x01
    1e80:	20 83       	st	Z, r18
    1e82:	8c 93       	st	X, r24
    1e84:	26 81       	ldd	r18, Z+6	; 0x06
    1e86:	37 81       	ldd	r19, Z+7	; 0x07
    1e88:	2f 5f       	subi	r18, 0xFF	; 255
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	37 83       	std	Z+7, r19	; 0x07
    1e8e:	26 83       	std	Z+6, r18	; 0x06
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <fputc+0x6e>
    1e92:	8b 01       	movw	r16, r22
    1e94:	ec 01       	movw	r28, r24
    1e96:	fb 01       	movw	r30, r22
    1e98:	00 84       	ldd	r0, Z+8	; 0x08
    1e9a:	f1 85       	ldd	r31, Z+9	; 0x09
    1e9c:	e0 2d       	mov	r30, r0
    1e9e:	09 95       	icall
    1ea0:	89 2b       	or	r24, r25
    1ea2:	e1 f6       	brne	.-72     	; 0x1e5c <fputc+0x10>
    1ea4:	d8 01       	movw	r26, r16
    1ea6:	16 96       	adiw	r26, 0x06	; 6
    1ea8:	8d 91       	ld	r24, X+
    1eaa:	9c 91       	ld	r25, X
    1eac:	17 97       	sbiw	r26, 0x07	; 7
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	17 96       	adiw	r26, 0x07	; 7
    1eb2:	9c 93       	st	X, r25
    1eb4:	8e 93       	st	-X, r24
    1eb6:	16 97       	sbiw	r26, 0x06	; 6
    1eb8:	ce 01       	movw	r24, r28
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <__ultoa_invert>:
    1ec4:	fa 01       	movw	r30, r20
    1ec6:	aa 27       	eor	r26, r26
    1ec8:	28 30       	cpi	r18, 0x08	; 8
    1eca:	51 f1       	breq	.+84     	; 0x1f20 <__ultoa_invert+0x5c>
    1ecc:	20 31       	cpi	r18, 0x10	; 16
    1ece:	81 f1       	breq	.+96     	; 0x1f30 <__ultoa_invert+0x6c>
    1ed0:	e8 94       	clt
    1ed2:	6f 93       	push	r22
    1ed4:	6e 7f       	andi	r22, 0xFE	; 254
    1ed6:	6e 5f       	subi	r22, 0xFE	; 254
    1ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eda:	8f 4f       	sbci	r24, 0xFF	; 255
    1edc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ede:	af 4f       	sbci	r26, 0xFF	; 255
    1ee0:	b1 e0       	ldi	r27, 0x01	; 1
    1ee2:	3e d0       	rcall	.+124    	; 0x1f60 <__ultoa_invert+0x9c>
    1ee4:	b4 e0       	ldi	r27, 0x04	; 4
    1ee6:	3c d0       	rcall	.+120    	; 0x1f60 <__ultoa_invert+0x9c>
    1ee8:	67 0f       	add	r22, r23
    1eea:	78 1f       	adc	r23, r24
    1eec:	89 1f       	adc	r24, r25
    1eee:	9a 1f       	adc	r25, r26
    1ef0:	a1 1d       	adc	r26, r1
    1ef2:	68 0f       	add	r22, r24
    1ef4:	79 1f       	adc	r23, r25
    1ef6:	8a 1f       	adc	r24, r26
    1ef8:	91 1d       	adc	r25, r1
    1efa:	a1 1d       	adc	r26, r1
    1efc:	6a 0f       	add	r22, r26
    1efe:	71 1d       	adc	r23, r1
    1f00:	81 1d       	adc	r24, r1
    1f02:	91 1d       	adc	r25, r1
    1f04:	a1 1d       	adc	r26, r1
    1f06:	20 d0       	rcall	.+64     	; 0x1f48 <__ultoa_invert+0x84>
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <__ultoa_invert+0x48>
    1f0a:	68 94       	set
    1f0c:	3f 91       	pop	r19
    1f0e:	2a e0       	ldi	r18, 0x0A	; 10
    1f10:	26 9f       	mul	r18, r22
    1f12:	11 24       	eor	r1, r1
    1f14:	30 19       	sub	r19, r0
    1f16:	30 5d       	subi	r19, 0xD0	; 208
    1f18:	31 93       	st	Z+, r19
    1f1a:	de f6       	brtc	.-74     	; 0x1ed2 <__ultoa_invert+0xe>
    1f1c:	cf 01       	movw	r24, r30
    1f1e:	08 95       	ret
    1f20:	46 2f       	mov	r20, r22
    1f22:	47 70       	andi	r20, 0x07	; 7
    1f24:	40 5d       	subi	r20, 0xD0	; 208
    1f26:	41 93       	st	Z+, r20
    1f28:	b3 e0       	ldi	r27, 0x03	; 3
    1f2a:	0f d0       	rcall	.+30     	; 0x1f4a <__ultoa_invert+0x86>
    1f2c:	c9 f7       	brne	.-14     	; 0x1f20 <__ultoa_invert+0x5c>
    1f2e:	f6 cf       	rjmp	.-20     	; 0x1f1c <__ultoa_invert+0x58>
    1f30:	46 2f       	mov	r20, r22
    1f32:	4f 70       	andi	r20, 0x0F	; 15
    1f34:	40 5d       	subi	r20, 0xD0	; 208
    1f36:	4a 33       	cpi	r20, 0x3A	; 58
    1f38:	18 f0       	brcs	.+6      	; 0x1f40 <__ultoa_invert+0x7c>
    1f3a:	49 5d       	subi	r20, 0xD9	; 217
    1f3c:	31 fd       	sbrc	r19, 1
    1f3e:	40 52       	subi	r20, 0x20	; 32
    1f40:	41 93       	st	Z+, r20
    1f42:	02 d0       	rcall	.+4      	; 0x1f48 <__ultoa_invert+0x84>
    1f44:	a9 f7       	brne	.-22     	; 0x1f30 <__ultoa_invert+0x6c>
    1f46:	ea cf       	rjmp	.-44     	; 0x1f1c <__ultoa_invert+0x58>
    1f48:	b4 e0       	ldi	r27, 0x04	; 4
    1f4a:	a6 95       	lsr	r26
    1f4c:	97 95       	ror	r25
    1f4e:	87 95       	ror	r24
    1f50:	77 95       	ror	r23
    1f52:	67 95       	ror	r22
    1f54:	ba 95       	dec	r27
    1f56:	c9 f7       	brne	.-14     	; 0x1f4a <__ultoa_invert+0x86>
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	61 05       	cpc	r22, r1
    1f5c:	71 05       	cpc	r23, r1
    1f5e:	08 95       	ret
    1f60:	9b 01       	movw	r18, r22
    1f62:	ac 01       	movw	r20, r24
    1f64:	0a 2e       	mov	r0, r26
    1f66:	06 94       	lsr	r0
    1f68:	57 95       	ror	r21
    1f6a:	47 95       	ror	r20
    1f6c:	37 95       	ror	r19
    1f6e:	27 95       	ror	r18
    1f70:	ba 95       	dec	r27
    1f72:	c9 f7       	brne	.-14     	; 0x1f66 <__ultoa_invert+0xa2>
    1f74:	62 0f       	add	r22, r18
    1f76:	73 1f       	adc	r23, r19
    1f78:	84 1f       	adc	r24, r20
    1f7a:	95 1f       	adc	r25, r21
    1f7c:	a0 1d       	adc	r26, r0
    1f7e:	08 95       	ret

00001f80 <__prologue_saves__>:
    1f80:	2f 92       	push	r2
    1f82:	3f 92       	push	r3
    1f84:	4f 92       	push	r4
    1f86:	5f 92       	push	r5
    1f88:	6f 92       	push	r6
    1f8a:	7f 92       	push	r7
    1f8c:	8f 92       	push	r8
    1f8e:	9f 92       	push	r9
    1f90:	af 92       	push	r10
    1f92:	bf 92       	push	r11
    1f94:	cf 92       	push	r12
    1f96:	df 92       	push	r13
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	ca 1b       	sub	r28, r26
    1faa:	db 0b       	sbc	r29, r27
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	09 94       	ijmp

00001fb8 <__epilogue_restores__>:
    1fb8:	2a 88       	ldd	r2, Y+18	; 0x12
    1fba:	39 88       	ldd	r3, Y+17	; 0x11
    1fbc:	48 88       	ldd	r4, Y+16	; 0x10
    1fbe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fc0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fc2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fc4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fc6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fc8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fca:	b9 84       	ldd	r11, Y+9	; 0x09
    1fcc:	c8 84       	ldd	r12, Y+8	; 0x08
    1fce:	df 80       	ldd	r13, Y+7	; 0x07
    1fd0:	ee 80       	ldd	r14, Y+6	; 0x06
    1fd2:	fd 80       	ldd	r15, Y+5	; 0x05
    1fd4:	0c 81       	ldd	r16, Y+4	; 0x04
    1fd6:	1b 81       	ldd	r17, Y+3	; 0x03
    1fd8:	aa 81       	ldd	r26, Y+2	; 0x02
    1fda:	b9 81       	ldd	r27, Y+1	; 0x01
    1fdc:	ce 0f       	add	r28, r30
    1fde:	d1 1d       	adc	r29, r1
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	ed 01       	movw	r28, r26
    1fec:	08 95       	ret

00001fee <_exit>:
    1fee:	f8 94       	cli

00001ff0 <__stop_program>:
    1ff0:	ff cf       	rjmp	.-2      	; 0x1ff0 <__stop_program>
