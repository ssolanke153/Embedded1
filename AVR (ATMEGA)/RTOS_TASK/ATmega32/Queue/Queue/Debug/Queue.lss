
Queue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00001c54  00001ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000067b  0080011e  0080011e  00001da6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001da6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a70  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001032  00000000  00000000  00006c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bda  00000000  00000000  00007ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf0  00000000  00000000  0000a87c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017da  00000000  00000000  0000b56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000049e7  00000000  00000000  0000cd46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0001172d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <main>
      8a:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
      92:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      94:	03 96       	adiw	r24, 0x03	; 3
      96:	92 83       	std	Z+2, r25	; 0x02
      98:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
      9a:	2f ef       	ldi	r18, 0xFF	; 255
      9c:	3f ef       	ldi	r19, 0xFF	; 255
      9e:	34 83       	std	Z+4, r19	; 0x04
      a0:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      a2:	96 83       	std	Z+6, r25	; 0x06
      a4:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      a6:	90 87       	std	Z+8, r25	; 0x08
      a8:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
      aa:	10 82       	st	Z, r1
      ac:	08 95       	ret

000000ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
      ae:	fc 01       	movw	r30, r24
      b0:	11 86       	std	Z+9, r1	; 0x09
      b2:	10 86       	std	Z+8, r1	; 0x08
      b4:	08 95       	ret

000000b6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	9c 01       	movw	r18, r24
      bc:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
      be:	dc 01       	movw	r26, r24
      c0:	11 96       	adiw	r26, 0x01	; 1
      c2:	cd 91       	ld	r28, X+
      c4:	dc 91       	ld	r29, X
      c6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
      c8:	d3 83       	std	Z+3, r29	; 0x03
      ca:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
      cc:	8c 81       	ldd	r24, Y+4	; 0x04
      ce:	9d 81       	ldd	r25, Y+5	; 0x05
      d0:	95 83       	std	Z+5, r25	; 0x05
      d2:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
      d4:	8c 81       	ldd	r24, Y+4	; 0x04
      d6:	9d 81       	ldd	r25, Y+5	; 0x05
      d8:	dc 01       	movw	r26, r24
      da:	13 96       	adiw	r26, 0x03	; 3
      dc:	7c 93       	st	X, r23
      de:	6e 93       	st	-X, r22
      e0:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
      e2:	7d 83       	std	Y+5, r23	; 0x05
      e4:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
      e6:	31 87       	std	Z+9, r19	; 0x09
      e8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
      ea:	f9 01       	movw	r30, r18
      ec:	80 81       	ld	r24, Z
      ee:	8f 5f       	subi	r24, 0xFF	; 255
      f0:	80 83       	st	Z, r24
}
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
      fe:	48 81       	ld	r20, Y
     100:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     102:	4f 3f       	cpi	r20, 0xFF	; 255
     104:	2f ef       	ldi	r18, 0xFF	; 255
     106:	52 07       	cpc	r21, r18
     108:	21 f4       	brne	.+8      	; 0x112 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     10a:	fc 01       	movw	r30, r24
     10c:	a7 81       	ldd	r26, Z+7	; 0x07
     10e:	b0 85       	ldd	r27, Z+8	; 0x08
     110:	0d c0       	rjmp	.+26     	; 0x12c <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     112:	dc 01       	movw	r26, r24
     114:	13 96       	adiw	r26, 0x03	; 3
     116:	01 c0       	rjmp	.+2      	; 0x11a <vListInsert+0x22>
     118:	df 01       	movw	r26, r30
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	ed 91       	ld	r30, X+
     11e:	fc 91       	ld	r31, X
     120:	13 97       	sbiw	r26, 0x03	; 3
     122:	20 81       	ld	r18, Z
     124:	31 81       	ldd	r19, Z+1	; 0x01
     126:	42 17       	cp	r20, r18
     128:	53 07       	cpc	r21, r19
     12a:	b0 f7       	brcc	.-20     	; 0x118 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     12c:	12 96       	adiw	r26, 0x02	; 2
     12e:	ed 91       	ld	r30, X+
     130:	fc 91       	ld	r31, X
     132:	13 97       	sbiw	r26, 0x03	; 3
     134:	fb 83       	std	Y+3, r31	; 0x03
     136:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     138:	d5 83       	std	Z+5, r29	; 0x05
     13a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     13c:	bd 83       	std	Y+5, r27	; 0x05
     13e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     140:	13 96       	adiw	r26, 0x03	; 3
     142:	dc 93       	st	X, r29
     144:	ce 93       	st	-X, r28
     146:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     148:	99 87       	std	Y+9, r25	; 0x09
     14a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     14c:	fc 01       	movw	r30, r24
     14e:	20 81       	ld	r18, Z
     150:	2f 5f       	subi	r18, 0xFF	; 255
     152:	20 83       	st	Z, r18
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     160:	a0 85       	ldd	r26, Z+8	; 0x08
     162:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     164:	c2 81       	ldd	r28, Z+2	; 0x02
     166:	d3 81       	ldd	r29, Z+3	; 0x03
     168:	84 81       	ldd	r24, Z+4	; 0x04
     16a:	95 81       	ldd	r25, Z+5	; 0x05
     16c:	9d 83       	std	Y+5, r25	; 0x05
     16e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     170:	c4 81       	ldd	r28, Z+4	; 0x04
     172:	d5 81       	ldd	r29, Z+5	; 0x05
     174:	82 81       	ldd	r24, Z+2	; 0x02
     176:	93 81       	ldd	r25, Z+3	; 0x03
     178:	9b 83       	std	Y+3, r25	; 0x03
     17a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     17c:	11 96       	adiw	r26, 0x01	; 1
     17e:	8d 91       	ld	r24, X+
     180:	9c 91       	ld	r25, X
     182:	12 97       	sbiw	r26, 0x02	; 2
     184:	e8 17       	cp	r30, r24
     186:	f9 07       	cpc	r31, r25
     188:	31 f4       	brne	.+12     	; 0x196 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     18a:	84 81       	ldd	r24, Z+4	; 0x04
     18c:	95 81       	ldd	r25, Z+5	; 0x05
     18e:	12 96       	adiw	r26, 0x02	; 2
     190:	9c 93       	st	X, r25
     192:	8e 93       	st	-X, r24
     194:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     196:	11 86       	std	Z+9, r1	; 0x09
     198:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     19a:	8c 91       	ld	r24, X
     19c:	81 50       	subi	r24, 0x01	; 1
     19e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1a0:	8c 91       	ld	r24, X
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <prvSetupTimerInterrupt>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
     1a8:	1b bc       	out	0x2b, r1	; 43
     1aa:	8c e7       	ldi	r24, 0x7C	; 124
     1ac:	8a bd       	out	0x2a, r24	; 42
     1ae:	8b e0       	ldi	r24, 0x0B	; 11
     1b0:	8e bd       	out	0x2e, r24	; 46
     1b2:	89 b7       	in	r24, 0x39	; 57
     1b4:	80 61       	ori	r24, 0x10	; 16
     1b6:	89 bf       	out	0x39, r24	; 57
     1b8:	08 95       	ret

000001ba <pxPortInitialiseStack>:
     1ba:	31 e1       	ldi	r19, 0x11	; 17
     1bc:	fc 01       	movw	r30, r24
     1be:	30 83       	st	Z, r19
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	22 e2       	ldi	r18, 0x22	; 34
     1c4:	20 83       	st	Z, r18
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	a3 e3       	ldi	r26, 0x33	; 51
     1ca:	a0 83       	st	Z, r26
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	60 83       	st	Z, r22
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	70 83       	st	Z, r23
     1d4:	31 97       	sbiw	r30, 0x01	; 1
     1d6:	10 82       	st	Z, r1
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	60 e8       	ldi	r22, 0x80	; 128
     1dc:	60 83       	st	Z, r22
     1de:	31 97       	sbiw	r30, 0x01	; 1
     1e0:	10 82       	st	Z, r1
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	62 e0       	ldi	r22, 0x02	; 2
     1e6:	60 83       	st	Z, r22
     1e8:	31 97       	sbiw	r30, 0x01	; 1
     1ea:	63 e0       	ldi	r22, 0x03	; 3
     1ec:	60 83       	st	Z, r22
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	64 e0       	ldi	r22, 0x04	; 4
     1f2:	60 83       	st	Z, r22
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	65 e0       	ldi	r22, 0x05	; 5
     1f8:	60 83       	st	Z, r22
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	66 e0       	ldi	r22, 0x06	; 6
     1fe:	60 83       	st	Z, r22
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	67 e0       	ldi	r22, 0x07	; 7
     204:	60 83       	st	Z, r22
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	68 e0       	ldi	r22, 0x08	; 8
     20a:	60 83       	st	Z, r22
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	69 e0       	ldi	r22, 0x09	; 9
     210:	60 83       	st	Z, r22
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	60 e1       	ldi	r22, 0x10	; 16
     216:	60 83       	st	Z, r22
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	30 83       	st	Z, r19
     21c:	31 97       	sbiw	r30, 0x01	; 1
     21e:	32 e1       	ldi	r19, 0x12	; 18
     220:	30 83       	st	Z, r19
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	33 e1       	ldi	r19, 0x13	; 19
     226:	30 83       	st	Z, r19
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	34 e1       	ldi	r19, 0x14	; 20
     22c:	30 83       	st	Z, r19
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	35 e1       	ldi	r19, 0x15	; 21
     232:	30 83       	st	Z, r19
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	36 e1       	ldi	r19, 0x16	; 22
     238:	30 83       	st	Z, r19
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	37 e1       	ldi	r19, 0x17	; 23
     23e:	30 83       	st	Z, r19
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	38 e1       	ldi	r19, 0x18	; 24
     244:	30 83       	st	Z, r19
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	39 e1       	ldi	r19, 0x19	; 25
     24a:	30 83       	st	Z, r19
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	30 e2       	ldi	r19, 0x20	; 32
     250:	30 83       	st	Z, r19
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	31 e2       	ldi	r19, 0x21	; 33
     256:	30 83       	st	Z, r19
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	20 83       	st	Z, r18
     25c:	31 97       	sbiw	r30, 0x01	; 1
     25e:	23 e2       	ldi	r18, 0x23	; 35
     260:	20 83       	st	Z, r18
     262:	31 97       	sbiw	r30, 0x01	; 1
     264:	40 83       	st	Z, r20
     266:	31 97       	sbiw	r30, 0x01	; 1
     268:	50 83       	st	Z, r21
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	26 e2       	ldi	r18, 0x26	; 38
     26e:	20 83       	st	Z, r18
     270:	31 97       	sbiw	r30, 0x01	; 1
     272:	27 e2       	ldi	r18, 0x27	; 39
     274:	20 83       	st	Z, r18
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	28 e2       	ldi	r18, 0x28	; 40
     27a:	20 83       	st	Z, r18
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	29 e2       	ldi	r18, 0x29	; 41
     280:	20 83       	st	Z, r18
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	20 e3       	ldi	r18, 0x30	; 48
     286:	20 83       	st	Z, r18
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	21 e3       	ldi	r18, 0x31	; 49
     28c:	20 83       	st	Z, r18
     28e:	86 97       	sbiw	r24, 0x26	; 38
     290:	08 95       	ret

00000292 <xPortStartScheduler>:
     292:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <prvSetupTimerInterrupt>
     296:	a0 91 6f 07 	lds	r26, 0x076F	; 0x80076f <pxCurrentTCB>
     29a:	b0 91 70 07 	lds	r27, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     29e:	cd 91       	ld	r28, X+
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	dd 91       	ld	r29, X+
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	bf 91       	pop	r27
     2b0:	af 91       	pop	r26
     2b2:	9f 91       	pop	r25
     2b4:	8f 91       	pop	r24
     2b6:	7f 91       	pop	r23
     2b8:	6f 91       	pop	r22
     2ba:	5f 91       	pop	r21
     2bc:	4f 91       	pop	r20
     2be:	3f 91       	pop	r19
     2c0:	2f 91       	pop	r18
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	9f 90       	pop	r9
     2d4:	8f 90       	pop	r8
     2d6:	7f 90       	pop	r7
     2d8:	6f 90       	pop	r6
     2da:	5f 90       	pop	r5
     2dc:	4f 90       	pop	r4
     2de:	3f 90       	pop	r3
     2e0:	2f 90       	pop	r2
     2e2:	1f 90       	pop	r1
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	08 95       	ret
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	08 95       	ret

000002f0 <vPortYield>:
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	0f 92       	push	r0
     2f8:	1f 92       	push	r1
     2fa:	11 24       	eor	r1, r1
     2fc:	2f 92       	push	r2
     2fe:	3f 92       	push	r3
     300:	4f 92       	push	r4
     302:	5f 92       	push	r5
     304:	6f 92       	push	r6
     306:	7f 92       	push	r7
     308:	8f 92       	push	r8
     30a:	9f 92       	push	r9
     30c:	af 92       	push	r10
     30e:	bf 92       	push	r11
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	2f 93       	push	r18
     31e:	3f 93       	push	r19
     320:	4f 93       	push	r20
     322:	5f 93       	push	r21
     324:	6f 93       	push	r22
     326:	7f 93       	push	r23
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	af 93       	push	r26
     32e:	bf 93       	push	r27
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ef 93       	push	r30
     336:	ff 93       	push	r31
     338:	a0 91 6f 07 	lds	r26, 0x076F	; 0x80076f <pxCurrentTCB>
     33c:	b0 91 70 07 	lds	r27, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     340:	0d b6       	in	r0, 0x3d	; 61
     342:	0d 92       	st	X+, r0
     344:	0e b6       	in	r0, 0x3e	; 62
     346:	0d 92       	st	X+, r0
     348:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vTaskSwitchContext>
     34c:	a0 91 6f 07 	lds	r26, 0x076F	; 0x80076f <pxCurrentTCB>
     350:	b0 91 70 07 	lds	r27, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     354:	cd 91       	ld	r28, X+
     356:	cd bf       	out	0x3d, r28	; 61
     358:	dd 91       	ld	r29, X+
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	ff 91       	pop	r31
     35e:	ef 91       	pop	r30
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	bf 91       	pop	r27
     366:	af 91       	pop	r26
     368:	9f 91       	pop	r25
     36a:	8f 91       	pop	r24
     36c:	7f 91       	pop	r23
     36e:	6f 91       	pop	r22
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	bf 90       	pop	r11
     386:	af 90       	pop	r10
     388:	9f 90       	pop	r9
     38a:	8f 90       	pop	r8
     38c:	7f 90       	pop	r7
     38e:	6f 90       	pop	r6
     390:	5f 90       	pop	r5
     392:	4f 90       	pop	r4
     394:	3f 90       	pop	r3
     396:	2f 90       	pop	r2
     398:	1f 90       	pop	r1
     39a:	0f 90       	pop	r0
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	0f 90       	pop	r0
     3a0:	08 95       	ret

000003a2 <__vector_7>:
	 * tick count.  We don't need to switch context, this can only be done by
	 * manual calls to taskYIELD();
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
	void TIMER1_COMPA_vect( void )
	{
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
		xTaskIncrementTick();
     3c4:	0e 94 d5 07 	call	0xfaa	; 0xfaa <xTaskIncrementTick>
	}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	bf 91       	pop	r27
     3ce:	af 91       	pop	r26
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	7f 91       	pop	r23
     3d6:	6f 91       	pop	r22
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     3ea:	ea e2       	ldi	r30, 0x2A	; 42
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	ae e2       	ldi	r26, 0x2E	; 46
     3f0:	b1 e0       	ldi	r27, 0x01	; 1
     3f2:	b1 83       	std	Z+1, r27	; 0x01
     3f4:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     3f6:	13 82       	std	Z+3, r1	; 0x03
     3f8:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     3fa:	e6 e0       	ldi	r30, 0x06	; 6
     3fc:	f7 e0       	ldi	r31, 0x07	; 7
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     3fe:	f0 93 29 01 	sts	0x0129, r31	; 0x800129 <pxEnd+0x1>
     402:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <pxEnd>
    pxEnd->xBlockSize = 0;
     406:	13 82       	std	Z+3, r1	; 0x03
     408:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     40a:	11 82       	std	Z+1, r1	; 0x01
     40c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     40e:	88 ed       	ldi	r24, 0xD8	; 216
     410:	95 e0       	ldi	r25, 0x05	; 5
     412:	13 96       	adiw	r26, 0x03	; 3
     414:	9c 93       	st	X, r25
     416:	8e 93       	st	-X, r24
     418:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     41a:	ed 93       	st	X+, r30
     41c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     41e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <xMinimumEverFreeBytesRemaining+0x1>
     422:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     426:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <xFreeBytesRemaining+0x1>
     42a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e8       	ldi	r25, 0x80	; 128
     432:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
     436:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
     43a:	08 95       	ret

0000043c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     442:	aa e2       	ldi	r26, 0x2A	; 42
     444:	b1 e0       	ldi	r27, 0x01	; 1
     446:	01 c0       	rjmp	.+2      	; 0x44a <prvInsertBlockIntoFreeList+0xe>
     448:	df 01       	movw	r26, r30
     44a:	ed 91       	ld	r30, X+
     44c:	fc 91       	ld	r31, X
     44e:	11 97       	sbiw	r26, 0x01	; 1
     450:	ec 17       	cp	r30, r28
     452:	fd 07       	cpc	r31, r29
     454:	c8 f3       	brcs	.-14     	; 0x448 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     456:	12 96       	adiw	r26, 0x02	; 2
     458:	8d 91       	ld	r24, X+
     45a:	9c 91       	ld	r25, X
     45c:	13 97       	sbiw	r26, 0x03	; 3
     45e:	9d 01       	movw	r18, r26
     460:	28 0f       	add	r18, r24
     462:	39 1f       	adc	r19, r25
     464:	c2 17       	cp	r28, r18
     466:	d3 07       	cpc	r29, r19
     468:	49 f4       	brne	.+18     	; 0x47c <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     46a:	2a 81       	ldd	r18, Y+2	; 0x02
     46c:	3b 81       	ldd	r19, Y+3	; 0x03
     46e:	82 0f       	add	r24, r18
     470:	93 1f       	adc	r25, r19
     472:	13 96       	adiw	r26, 0x03	; 3
     474:	9c 93       	st	X, r25
     476:	8e 93       	st	-X, r24
     478:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     47a:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	9b 81       	ldd	r25, Y+3	; 0x03
     480:	9e 01       	movw	r18, r28
     482:	28 0f       	add	r18, r24
     484:	39 1f       	adc	r19, r25
     486:	e2 17       	cp	r30, r18
     488:	f3 07       	cpc	r31, r19
     48a:	c1 f4       	brne	.+48     	; 0x4bc <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     48c:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <pxEnd>
     490:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <pxEnd+0x1>
     494:	e2 17       	cp	r30, r18
     496:	f3 07       	cpc	r31, r19
     498:	71 f0       	breq	.+28     	; 0x4b6 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     49a:	22 81       	ldd	r18, Z+2	; 0x02
     49c:	33 81       	ldd	r19, Z+3	; 0x03
     49e:	82 0f       	add	r24, r18
     4a0:	93 1f       	adc	r25, r19
     4a2:	9b 83       	std	Y+3, r25	; 0x03
     4a4:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     4a6:	ed 91       	ld	r30, X+
     4a8:	fc 91       	ld	r31, X
     4aa:	11 97       	sbiw	r26, 0x01	; 1
     4ac:	80 81       	ld	r24, Z
     4ae:	91 81       	ldd	r25, Z+1	; 0x01
     4b0:	99 83       	std	Y+1, r25	; 0x01
     4b2:	88 83       	st	Y, r24
     4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4b6:	39 83       	std	Y+1, r19	; 0x01
     4b8:	28 83       	st	Y, r18
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4bc:	f9 83       	std	Y+1, r31	; 0x01
     4be:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     4c0:	ca 17       	cp	r28, r26
     4c2:	db 07       	cpc	r29, r27
     4c4:	11 f0       	breq	.+4      	; 0x4ca <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4c6:	cd 93       	st	X+, r28
     4c8:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     4de:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     4e2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <pxEnd>
     4e6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <pxEnd+0x1>
     4ea:	89 2b       	or	r24, r25
     4ec:	11 f4       	brne	.+4      	; 0x4f2 <pvPortMalloc+0x22>
        {
            prvHeapInit();
     4ee:	0e 94 f5 01 	call	0x3ea	; 0x3ea <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     4f2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     4f6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     4fa:	80 23       	and	r24, r16
     4fc:	91 23       	and	r25, r17
     4fe:	89 2b       	or	r24, r25
     500:	09 f0       	breq	.+2      	; 0x504 <pvPortMalloc+0x34>
     502:	77 c0       	rjmp	.+238    	; 0x5f2 <pvPortMalloc+0x122>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     504:	01 15       	cp	r16, r1
     506:	11 05       	cpc	r17, r1
     508:	49 f0       	breq	.+18     	; 0x51c <pvPortMalloc+0x4c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     50a:	c8 01       	movw	r24, r16
     50c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     50e:	08 17       	cp	r16, r24
     510:	19 07       	cpc	r17, r25
     512:	18 f0       	brcs	.+6      	; 0x51a <pvPortMalloc+0x4a>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	10 e0       	ldi	r17, 0x00	; 0
     518:	01 c0       	rjmp	.+2      	; 0x51c <pvPortMalloc+0x4c>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     51a:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     51c:	01 15       	cp	r16, r1
     51e:	11 05       	cpc	r17, r1
     520:	09 f4       	brne	.+2      	; 0x524 <pvPortMalloc+0x54>
     522:	6a c0       	rjmp	.+212    	; 0x5f8 <pvPortMalloc+0x128>
     524:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <xFreeBytesRemaining>
     528:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <xFreeBytesRemaining+0x1>
     52c:	80 17       	cp	r24, r16
     52e:	91 07       	cpc	r25, r17
     530:	08 f4       	brcc	.+2      	; 0x534 <pvPortMalloc+0x64>
     532:	65 c0       	rjmp	.+202    	; 0x5fe <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     534:	c0 91 2a 01 	lds	r28, 0x012A	; 0x80012a <xStart>
     538:	d0 91 2b 01 	lds	r29, 0x012B	; 0x80012b <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     53c:	ea e2       	ldi	r30, 0x2A	; 42
     53e:	f1 e0       	ldi	r31, 0x01	; 1
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     540:	02 c0       	rjmp	.+4      	; 0x546 <pvPortMalloc+0x76>
                {
                    pxPreviousBlock = pxBlock;
     542:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     544:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	9b 81       	ldd	r25, Y+3	; 0x03
     54a:	80 17       	cp	r24, r16
     54c:	91 07       	cpc	r25, r17
     54e:	20 f4       	brcc	.+8      	; 0x558 <pvPortMalloc+0x88>
     550:	88 81       	ld	r24, Y
     552:	99 81       	ldd	r25, Y+1	; 0x01
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	a9 f7       	brne	.-22     	; 0x542 <pvPortMalloc+0x72>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     558:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <pxEnd>
     55c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <pxEnd+0x1>
     560:	c8 17       	cp	r28, r24
     562:	d9 07       	cpc	r29, r25
     564:	09 f4       	brne	.+2      	; 0x568 <pvPortMalloc+0x98>
     566:	4e c0       	rjmp	.+156    	; 0x604 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     568:	e0 80       	ld	r14, Z
     56a:	f1 80       	ldd	r15, Z+1	; 0x01
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	e8 0e       	add	r14, r24
     570:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     572:	88 81       	ld	r24, Y
     574:	99 81       	ldd	r25, Y+1	; 0x01
     576:	91 83       	std	Z+1, r25	; 0x01
     578:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     57a:	2a 81       	ldd	r18, Y+2	; 0x02
     57c:	3b 81       	ldd	r19, Y+3	; 0x03
     57e:	20 1b       	sub	r18, r16
     580:	31 0b       	sbc	r19, r17
     582:	29 30       	cpi	r18, 0x09	; 9
     584:	31 05       	cpc	r19, r1
     586:	50 f0       	brcs	.+20     	; 0x59c <pvPortMalloc+0xcc>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     588:	ce 01       	movw	r24, r28
     58a:	80 0f       	add	r24, r16
     58c:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     58e:	fc 01       	movw	r30, r24
     590:	33 83       	std	Z+3, r19	; 0x03
     592:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     594:	1b 83       	std	Y+3, r17	; 0x03
     596:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     598:	0e 94 1e 02 	call	0x43c	; 0x43c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     59c:	2a 81       	ldd	r18, Y+2	; 0x02
     59e:	3b 81       	ldd	r19, Y+3	; 0x03
     5a0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <xFreeBytesRemaining>
     5a4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <xFreeBytesRemaining+0x1>
     5a8:	82 1b       	sub	r24, r18
     5aa:	93 0b       	sbc	r25, r19
     5ac:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <xFreeBytesRemaining+0x1>
     5b0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5b4:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <xMinimumEverFreeBytesRemaining>
     5b8:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <xMinimumEverFreeBytesRemaining+0x1>
     5bc:	84 17       	cp	r24, r20
     5be:	95 07       	cpc	r25, r21
     5c0:	20 f4       	brcc	.+8      	; 0x5ca <pvPortMalloc+0xfa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     5c2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <xMinimumEverFreeBytesRemaining+0x1>
     5c6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     5ca:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     5ce:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     5d2:	28 2b       	or	r18, r24
     5d4:	39 2b       	or	r19, r25
     5d6:	3b 83       	std	Y+3, r19	; 0x03
     5d8:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     5da:	19 82       	std	Y+1, r1	; 0x01
     5dc:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     5de:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <xNumberOfSuccessfulAllocations>
     5e2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <xNumberOfSuccessfulAllocations+0x1>
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <xNumberOfSuccessfulAllocations+0x1>
     5ec:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <xNumberOfSuccessfulAllocations>
     5f0:	0b c0       	rjmp	.+22     	; 0x608 <pvPortMalloc+0x138>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     5f2:	e1 2c       	mov	r14, r1
     5f4:	f1 2c       	mov	r15, r1
     5f6:	08 c0       	rjmp	.+16     	; 0x608 <pvPortMalloc+0x138>
     5f8:	e1 2c       	mov	r14, r1
     5fa:	f1 2c       	mov	r15, r1
     5fc:	05 c0       	rjmp	.+10     	; 0x608 <pvPortMalloc+0x138>
     5fe:	e1 2c       	mov	r14, r1
     600:	f1 2c       	mov	r15, r1
     602:	02 c0       	rjmp	.+4      	; 0x608 <pvPortMalloc+0x138>
     604:	e1 2c       	mov	r14, r1
     606:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     608:	0e 94 63 08 	call	0x10c6	; 0x10c6 <xTaskResumeAll>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     60c:	c7 01       	movw	r24, r14
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     624:	00 97       	sbiw	r24, 0x00	; 0
     626:	99 f1       	breq	.+102    	; 0x68e <vPortFree+0x72>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     628:	ec 01       	movw	r28, r24
     62a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     62c:	4a 81       	ldd	r20, Y+2	; 0x02
     62e:	5b 81       	ldd	r21, Y+3	; 0x03
     630:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
     634:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
     638:	ba 01       	movw	r22, r20
     63a:	62 23       	and	r22, r18
     63c:	73 23       	and	r23, r19
     63e:	67 2b       	or	r22, r23
     640:	31 f1       	breq	.+76     	; 0x68e <vPortFree+0x72>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     642:	68 81       	ld	r22, Y
     644:	79 81       	ldd	r23, Y+1	; 0x01
     646:	67 2b       	or	r22, r23
     648:	11 f5       	brne	.+68     	; 0x68e <vPortFree+0x72>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     64a:	20 95       	com	r18
     64c:	30 95       	com	r19
     64e:	24 23       	and	r18, r20
     650:	35 23       	and	r19, r21
     652:	3b 83       	std	Y+3, r19	; 0x03
     654:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     656:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     65a:	8a 81       	ldd	r24, Y+2	; 0x02
     65c:	9b 81       	ldd	r25, Y+3	; 0x03
     65e:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <xFreeBytesRemaining>
     662:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <xFreeBytesRemaining+0x1>
     666:	82 0f       	add	r24, r18
     668:	93 1f       	adc	r25, r19
     66a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <xFreeBytesRemaining+0x1>
     66e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     672:	ce 01       	movw	r24, r28
     674:	0e 94 1e 02 	call	0x43c	; 0x43c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     678:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <xNumberOfSuccessfulFrees>
     67c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <xNumberOfSuccessfulFrees+0x1>
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <xNumberOfSuccessfulFrees+0x1>
     686:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     68a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	08 95       	ret

00000698 <prvIsQueueEmpty>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	0f 92       	push	r0
     69e:	fc 01       	movw	r30, r24
     6a0:	82 8d       	ldd	r24, Z+26	; 0x1a
     6a2:	81 11       	cpse	r24, r1
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <prvIsQueueEmpty+0x12>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <prvIsQueueEmpty+0x14>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	0f 90       	pop	r0
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	08 95       	ret

000006b2 <prvIsQueueFull>:
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	0f 92       	push	r0
     6b8:	fc 01       	movw	r30, r24
     6ba:	22 8d       	ldd	r18, Z+26	; 0x1a
     6bc:	83 8d       	ldd	r24, Z+27	; 0x1b
     6be:	28 13       	cpse	r18, r24
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <prvIsQueueFull+0x14>
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <prvIsQueueFull+0x16>
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	0f 90       	pop	r0
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	08 95       	ret

000006ce <prvCopyDataToQueue>:
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ec 01       	movw	r28, r24
     6d8:	04 2f       	mov	r16, r20
     6da:	1a 8d       	ldd	r17, Y+26	; 0x1a
     6dc:	4c 8d       	ldd	r20, Y+28	; 0x1c
     6de:	44 23       	and	r20, r20
     6e0:	b9 f1       	breq	.+110    	; 0x750 <prvCopyDataToQueue+0x82>
     6e2:	01 11       	cpse	r16, r1
     6e4:	16 c0       	rjmp	.+44     	; 0x712 <prvCopyDataToQueue+0x44>
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ea:	9b 81       	ldd	r25, Y+3	; 0x03
     6ec:	0e 94 35 0b 	call	0x166a	; 0x166a <memcpy>
     6f0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     6f2:	8a 81       	ldd	r24, Y+2	; 0x02
     6f4:	9b 81       	ldd	r25, Y+3	; 0x03
     6f6:	82 0f       	add	r24, r18
     6f8:	91 1d       	adc	r25, r1
     6fa:	9b 83       	std	Y+3, r25	; 0x03
     6fc:	8a 83       	std	Y+2, r24	; 0x02
     6fe:	2c 81       	ldd	r18, Y+4	; 0x04
     700:	3d 81       	ldd	r19, Y+5	; 0x05
     702:	82 17       	cp	r24, r18
     704:	93 07       	cpc	r25, r19
     706:	20 f1       	brcs	.+72     	; 0x750 <prvCopyDataToQueue+0x82>
     708:	88 81       	ld	r24, Y
     70a:	99 81       	ldd	r25, Y+1	; 0x01
     70c:	9b 83       	std	Y+3, r25	; 0x03
     70e:	8a 83       	std	Y+2, r24	; 0x02
     710:	1f c0       	rjmp	.+62     	; 0x750 <prvCopyDataToQueue+0x82>
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	8e 81       	ldd	r24, Y+6	; 0x06
     716:	9f 81       	ldd	r25, Y+7	; 0x07
     718:	0e 94 35 0b 	call	0x166a	; 0x166a <memcpy>
     71c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	91 95       	neg	r25
     722:	81 95       	neg	r24
     724:	91 09       	sbc	r25, r1
     726:	2e 81       	ldd	r18, Y+6	; 0x06
     728:	3f 81       	ldd	r19, Y+7	; 0x07
     72a:	28 0f       	add	r18, r24
     72c:	39 1f       	adc	r19, r25
     72e:	3f 83       	std	Y+7, r19	; 0x07
     730:	2e 83       	std	Y+6, r18	; 0x06
     732:	48 81       	ld	r20, Y
     734:	59 81       	ldd	r21, Y+1	; 0x01
     736:	24 17       	cp	r18, r20
     738:	35 07       	cpc	r19, r21
     73a:	30 f4       	brcc	.+12     	; 0x748 <prvCopyDataToQueue+0x7a>
     73c:	2c 81       	ldd	r18, Y+4	; 0x04
     73e:	3d 81       	ldd	r19, Y+5	; 0x05
     740:	82 0f       	add	r24, r18
     742:	93 1f       	adc	r25, r19
     744:	9f 83       	std	Y+7, r25	; 0x07
     746:	8e 83       	std	Y+6, r24	; 0x06
     748:	02 30       	cpi	r16, 0x02	; 2
     74a:	11 f4       	brne	.+4      	; 0x750 <prvCopyDataToQueue+0x82>
     74c:	11 11       	cpse	r17, r1
     74e:	11 50       	subi	r17, 0x01	; 1
     750:	1f 5f       	subi	r17, 0xFF	; 255
     752:	1a 8f       	std	Y+26, r17	; 0x1a
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	08 95       	ret

00000760 <prvCopyDataFromQueue>:
     760:	fc 01       	movw	r30, r24
     762:	44 8d       	ldd	r20, Z+28	; 0x1c
     764:	44 23       	and	r20, r20
     766:	a9 f0       	breq	.+42     	; 0x792 <prvCopyDataFromQueue+0x32>
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	26 81       	ldd	r18, Z+6	; 0x06
     76c:	37 81       	ldd	r19, Z+7	; 0x07
     76e:	24 0f       	add	r18, r20
     770:	35 1f       	adc	r19, r21
     772:	37 83       	std	Z+7, r19	; 0x07
     774:	26 83       	std	Z+6, r18	; 0x06
     776:	84 81       	ldd	r24, Z+4	; 0x04
     778:	95 81       	ldd	r25, Z+5	; 0x05
     77a:	28 17       	cp	r18, r24
     77c:	39 07       	cpc	r19, r25
     77e:	20 f0       	brcs	.+8      	; 0x788 <prvCopyDataFromQueue+0x28>
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	97 83       	std	Z+7, r25	; 0x07
     786:	86 83       	std	Z+6, r24	; 0x06
     788:	cb 01       	movw	r24, r22
     78a:	66 81       	ldd	r22, Z+6	; 0x06
     78c:	77 81       	ldd	r23, Z+7	; 0x07
     78e:	0e 94 35 0b 	call	0x166a	; 0x166a <memcpy>
     792:	08 95       	ret

00000794 <prvUnlockQueue>:
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	ec 01       	movw	r28, r24
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	0f 92       	push	r0
     7a2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     7a4:	0b c0       	rjmp	.+22     	; 0x7bc <prvUnlockQueue+0x28>
     7a6:	89 89       	ldd	r24, Y+17	; 0x11
     7a8:	88 23       	and	r24, r24
     7aa:	51 f0       	breq	.+20     	; 0x7c0 <prvUnlockQueue+0x2c>
     7ac:	ce 01       	movw	r24, r28
     7ae:	41 96       	adiw	r24, 0x11	; 17
     7b0:	0e 94 4d 09 	call	0x129a	; 0x129a <xTaskRemoveFromEventList>
     7b4:	81 11       	cpse	r24, r1
     7b6:	0e 94 df 09 	call	0x13be	; 0x13be <vTaskMissedYield>
     7ba:	11 50       	subi	r17, 0x01	; 1
     7bc:	11 16       	cp	r1, r17
     7be:	9c f3       	brlt	.-26     	; 0x7a6 <prvUnlockQueue+0x12>
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	8e 8f       	std	Y+30, r24	; 0x1e
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	0f 92       	push	r0
     7ce:	1d 8d       	ldd	r17, Y+29	; 0x1d
     7d0:	0b c0       	rjmp	.+22     	; 0x7e8 <prvUnlockQueue+0x54>
     7d2:	88 85       	ldd	r24, Y+8	; 0x08
     7d4:	88 23       	and	r24, r24
     7d6:	51 f0       	breq	.+20     	; 0x7ec <prvUnlockQueue+0x58>
     7d8:	ce 01       	movw	r24, r28
     7da:	08 96       	adiw	r24, 0x08	; 8
     7dc:	0e 94 4d 09 	call	0x129a	; 0x129a <xTaskRemoveFromEventList>
     7e0:	81 11       	cpse	r24, r1
     7e2:	0e 94 df 09 	call	0x13be	; 0x13be <vTaskMissedYield>
     7e6:	11 50       	subi	r17, 0x01	; 1
     7e8:	11 16       	cp	r1, r17
     7ea:	9c f3       	brlt	.-26     	; 0x7d2 <prvUnlockQueue+0x3e>
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	8d 8f       	std	Y+29, r24	; 0x1d
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	08 95       	ret

000007fc <xQueueGenericReset>:
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	0f 92       	push	r0
     808:	e8 81       	ld	r30, Y
     80a:	f9 81       	ldd	r31, Y+1	; 0x01
     80c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     80e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	82 9f       	mul	r24, r18
     816:	a0 01       	movw	r20, r0
     818:	83 9f       	mul	r24, r19
     81a:	50 0d       	add	r21, r0
     81c:	92 9f       	mul	r25, r18
     81e:	50 0d       	add	r21, r0
     820:	11 24       	eor	r1, r1
     822:	4e 0f       	add	r20, r30
     824:	5f 1f       	adc	r21, r31
     826:	5d 83       	std	Y+5, r21	; 0x05
     828:	4c 83       	std	Y+4, r20	; 0x04
     82a:	1a 8e       	std	Y+26, r1	; 0x1a
     82c:	fb 83       	std	Y+3, r31	; 0x03
     82e:	ea 83       	std	Y+2, r30	; 0x02
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	28 9f       	mul	r18, r24
     834:	a0 01       	movw	r20, r0
     836:	29 9f       	mul	r18, r25
     838:	50 0d       	add	r21, r0
     83a:	38 9f       	mul	r19, r24
     83c:	50 0d       	add	r21, r0
     83e:	11 24       	eor	r1, r1
     840:	cf 01       	movw	r24, r30
     842:	84 0f       	add	r24, r20
     844:	95 1f       	adc	r25, r21
     846:	9f 83       	std	Y+7, r25	; 0x07
     848:	8e 83       	std	Y+6, r24	; 0x06
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	8d 8f       	std	Y+29, r24	; 0x1d
     84e:	8e 8f       	std	Y+30, r24	; 0x1e
     850:	61 11       	cpse	r22, r1
     852:	08 c0       	rjmp	.+16     	; 0x864 <__stack+0x5>
     854:	88 85       	ldd	r24, Y+8	; 0x08
     856:	88 23       	and	r24, r24
     858:	69 f0       	breq	.+26     	; 0x874 <__stack+0x15>
     85a:	ce 01       	movw	r24, r28
     85c:	08 96       	adiw	r24, 0x08	; 8
     85e:	0e 94 4d 09 	call	0x129a	; 0x129a <xTaskRemoveFromEventList>
     862:	08 c0       	rjmp	.+16     	; 0x874 <__stack+0x15>
     864:	ce 01       	movw	r24, r28
     866:	08 96       	adiw	r24, 0x08	; 8
     868:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     86c:	ce 01       	movw	r24, r28
     86e:	41 96       	adiw	r24, 0x11	; 17
     870:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     874:	0f 90       	pop	r0
     876:	0f be       	out	0x3f, r0	; 63
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <prvInitialiseNewQueue>:
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	f8 01       	movw	r30, r16
     886:	61 11       	cpse	r22, r1
     888:	03 c0       	rjmp	.+6      	; 0x890 <prvInitialiseNewQueue+0x10>
     88a:	11 83       	std	Z+1, r17	; 0x01
     88c:	00 83       	st	Z, r16
     88e:	02 c0       	rjmp	.+4      	; 0x894 <prvInitialiseNewQueue+0x14>
     890:	51 83       	std	Z+1, r21	; 0x01
     892:	40 83       	st	Z, r20
     894:	83 8f       	std	Z+27, r24	; 0x1b
     896:	64 8f       	std	Z+28, r22	; 0x1c
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	cf 01       	movw	r24, r30
     89c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <xQueueGenericReset>
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <xQueueGenericCreate>:
     8a6:	df 92       	push	r13
     8a8:	ef 92       	push	r14
     8aa:	ff 92       	push	r15
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	f8 2e       	mov	r15, r24
     8b6:	e6 2e       	mov	r14, r22
     8b8:	d4 2e       	mov	r13, r20
     8ba:	86 9f       	mul	r24, r22
     8bc:	c0 01       	movw	r24, r0
     8be:	11 24       	eor	r1, r1
     8c0:	4f 96       	adiw	r24, 0x1f	; 31
     8c2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <pvPortMalloc>
     8c6:	ec 01       	movw	r28, r24
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	49 f0       	breq	.+18     	; 0x8de <xQueueGenericCreate+0x38>
     8cc:	8c 01       	movw	r16, r24
     8ce:	2d 2d       	mov	r18, r13
     8d0:	ac 01       	movw	r20, r24
     8d2:	41 5e       	subi	r20, 0xE1	; 225
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	6e 2d       	mov	r22, r14
     8d8:	8f 2d       	mov	r24, r15
     8da:	0e 94 40 04 	call	0x880	; 0x880 <prvInitialiseNewQueue>
     8de:	ce 01       	movw	r24, r28
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	df 90       	pop	r13
     8ee:	08 95       	ret

000008f0 <xQueueGenericSend>:
     8f0:	cf 92       	push	r12
     8f2:	df 92       	push	r13
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	00 d0       	rcall	.+0      	; 0x902 <xQueueGenericSend+0x12>
     902:	00 d0       	rcall	.+0      	; 0x904 <xQueueGenericSend+0x14>
     904:	1f 92       	push	r1
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	8c 01       	movw	r16, r24
     90c:	7b 01       	movw	r14, r22
     90e:	5d 83       	std	Y+5, r21	; 0x05
     910:	4c 83       	std	Y+4, r20	; 0x04
     912:	c2 2e       	mov	r12, r18
     914:	d1 2c       	mov	r13, r1
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	0f 92       	push	r0
     91c:	f8 01       	movw	r30, r16
     91e:	92 8d       	ldd	r25, Z+26	; 0x1a
     920:	83 8d       	ldd	r24, Z+27	; 0x1b
     922:	98 17       	cp	r25, r24
     924:	18 f0       	brcs	.+6      	; 0x92c <xQueueGenericSend+0x3c>
     926:	f2 e0       	ldi	r31, 0x02	; 2
     928:	cf 12       	cpse	r12, r31
     92a:	11 c0       	rjmp	.+34     	; 0x94e <xQueueGenericSend+0x5e>
     92c:	4c 2d       	mov	r20, r12
     92e:	b7 01       	movw	r22, r14
     930:	c8 01       	movw	r24, r16
     932:	0e 94 67 03 	call	0x6ce	; 0x6ce <prvCopyDataToQueue>
     936:	f8 01       	movw	r30, r16
     938:	81 89       	ldd	r24, Z+17	; 0x11
     93a:	88 23       	and	r24, r24
     93c:	21 f0       	breq	.+8      	; 0x946 <xQueueGenericSend+0x56>
     93e:	c8 01       	movw	r24, r16
     940:	41 96       	adiw	r24, 0x11	; 17
     942:	0e 94 4d 09 	call	0x129a	; 0x129a <xTaskRemoveFromEventList>
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	4d c0       	rjmp	.+154    	; 0x9e8 <xQueueGenericSend+0xf8>
     94e:	8c 81       	ldd	r24, Y+4	; 0x04
     950:	9d 81       	ldd	r25, Y+5	; 0x05
     952:	89 2b       	or	r24, r25
     954:	21 f4       	brne	.+8      	; 0x95e <xQueueGenericSend+0x6e>
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	45 c0       	rjmp	.+138    	; 0x9e8 <xQueueGenericSend+0xf8>
     95e:	d1 10       	cpse	r13, r1
     960:	06 c0       	rjmp	.+12     	; 0x96e <xQueueGenericSend+0x7e>
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	0e 94 95 09 	call	0x132a	; 0x132a <vTaskInternalSetTimeOutState>
     96a:	dd 24       	eor	r13, r13
     96c:	d3 94       	inc	r13
     96e:	0f 90       	pop	r0
     970:	0f be       	out	0x3f, r0	; 63
     972:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vTaskSuspendAll>
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	0f 92       	push	r0
     97c:	f8 01       	movw	r30, r16
     97e:	85 8d       	ldd	r24, Z+29	; 0x1d
     980:	8f 3f       	cpi	r24, 0xFF	; 255
     982:	09 f4       	brne	.+2      	; 0x986 <xQueueGenericSend+0x96>
     984:	15 8e       	std	Z+29, r1	; 0x1d
     986:	f8 01       	movw	r30, r16
     988:	86 8d       	ldd	r24, Z+30	; 0x1e
     98a:	8f 3f       	cpi	r24, 0xFF	; 255
     98c:	09 f4       	brne	.+2      	; 0x990 <xQueueGenericSend+0xa0>
     98e:	16 8e       	std	Z+30, r1	; 0x1e
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	be 01       	movw	r22, r28
     996:	6c 5f       	subi	r22, 0xFC	; 252
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	0e 94 a0 09 	call	0x1340	; 0x1340 <xTaskCheckForTimeOut>
     9a2:	81 11       	cpse	r24, r1
     9a4:	1b c0       	rjmp	.+54     	; 0x9dc <xQueueGenericSend+0xec>
     9a6:	c8 01       	movw	r24, r16
     9a8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <prvIsQueueFull>
     9ac:	88 23       	and	r24, r24
     9ae:	81 f0       	breq	.+32     	; 0x9d0 <xQueueGenericSend+0xe0>
     9b0:	6c 81       	ldd	r22, Y+4	; 0x04
     9b2:	7d 81       	ldd	r23, Y+5	; 0x05
     9b4:	c8 01       	movw	r24, r16
     9b6:	08 96       	adiw	r24, 0x08	; 8
     9b8:	0e 94 3b 09 	call	0x1276	; 0x1276 <vTaskPlaceOnEventList>
     9bc:	c8 01       	movw	r24, r16
     9be:	0e 94 ca 03 	call	0x794	; 0x794 <prvUnlockQueue>
     9c2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <xTaskResumeAll>
     9c6:	81 11       	cpse	r24, r1
     9c8:	a6 cf       	rjmp	.-180    	; 0x916 <xQueueGenericSend+0x26>
     9ca:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     9ce:	a3 cf       	rjmp	.-186    	; 0x916 <xQueueGenericSend+0x26>
     9d0:	c8 01       	movw	r24, r16
     9d2:	0e 94 ca 03 	call	0x794	; 0x794 <prvUnlockQueue>
     9d6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <xTaskResumeAll>
     9da:	9d cf       	rjmp	.-198    	; 0x916 <xQueueGenericSend+0x26>
     9dc:	c8 01       	movw	r24, r16
     9de:	0e 94 ca 03 	call	0x794	; 0x794 <prvUnlockQueue>
     9e2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <xTaskResumeAll>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	08 95       	ret

00000a04 <xQueueReceive>:
     a04:	cf 92       	push	r12
     a06:	df 92       	push	r13
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	00 d0       	rcall	.+0      	; 0xa16 <xQueueReceive+0x12>
     a16:	00 d0       	rcall	.+0      	; 0xa18 <xQueueReceive+0x14>
     a18:	1f 92       	push	r1
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	8c 01       	movw	r16, r24
     a20:	6b 01       	movw	r12, r22
     a22:	5d 83       	std	Y+5, r21	; 0x05
     a24:	4c 83       	std	Y+4, r20	; 0x04
     a26:	e1 2c       	mov	r14, r1
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	0f 92       	push	r0
     a2e:	f8 01       	movw	r30, r16
     a30:	f2 8c       	ldd	r15, Z+26	; 0x1a
     a32:	ff 20       	and	r15, r15
     a34:	91 f0       	breq	.+36     	; 0xa5a <xQueueReceive+0x56>
     a36:	b6 01       	movw	r22, r12
     a38:	c8 01       	movw	r24, r16
     a3a:	0e 94 b0 03 	call	0x760	; 0x760 <prvCopyDataFromQueue>
     a3e:	fa 94       	dec	r15
     a40:	f8 01       	movw	r30, r16
     a42:	f2 8e       	std	Z+26, r15	; 0x1a
     a44:	80 85       	ldd	r24, Z+8	; 0x08
     a46:	88 23       	and	r24, r24
     a48:	21 f0       	breq	.+8      	; 0xa52 <xQueueReceive+0x4e>
     a4a:	c8 01       	movw	r24, r16
     a4c:	08 96       	adiw	r24, 0x08	; 8
     a4e:	0e 94 4d 09 	call	0x129a	; 0x129a <xTaskRemoveFromEventList>
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	53 c0       	rjmp	.+166    	; 0xb00 <xQueueReceive+0xfc>
     a5a:	8c 81       	ldd	r24, Y+4	; 0x04
     a5c:	9d 81       	ldd	r25, Y+5	; 0x05
     a5e:	89 2b       	or	r24, r25
     a60:	21 f4       	brne	.+8      	; 0xa6a <xQueueReceive+0x66>
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	4b c0       	rjmp	.+150    	; 0xb00 <xQueueReceive+0xfc>
     a6a:	e1 10       	cpse	r14, r1
     a6c:	06 c0       	rjmp	.+12     	; 0xa7a <xQueueReceive+0x76>
     a6e:	ce 01       	movw	r24, r28
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	0e 94 95 09 	call	0x132a	; 0x132a <vTaskInternalSetTimeOutState>
     a76:	ee 24       	eor	r14, r14
     a78:	e3 94       	inc	r14
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vTaskSuspendAll>
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	0f 92       	push	r0
     a88:	f8 01       	movw	r30, r16
     a8a:	85 8d       	ldd	r24, Z+29	; 0x1d
     a8c:	8f 3f       	cpi	r24, 0xFF	; 255
     a8e:	09 f4       	brne	.+2      	; 0xa92 <xQueueReceive+0x8e>
     a90:	15 8e       	std	Z+29, r1	; 0x1d
     a92:	f8 01       	movw	r30, r16
     a94:	86 8d       	ldd	r24, Z+30	; 0x1e
     a96:	8f 3f       	cpi	r24, 0xFF	; 255
     a98:	09 f4       	brne	.+2      	; 0xa9c <xQueueReceive+0x98>
     a9a:	16 8e       	std	Z+30, r1	; 0x1e
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	be 01       	movw	r22, r28
     aa2:	6c 5f       	subi	r22, 0xFC	; 252
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	0e 94 a0 09 	call	0x1340	; 0x1340 <xTaskCheckForTimeOut>
     aae:	81 11       	cpse	r24, r1
     ab0:	1b c0       	rjmp	.+54     	; 0xae8 <xQueueReceive+0xe4>
     ab2:	c8 01       	movw	r24, r16
     ab4:	0e 94 4c 03 	call	0x698	; 0x698 <prvIsQueueEmpty>
     ab8:	88 23       	and	r24, r24
     aba:	81 f0       	breq	.+32     	; 0xadc <xQueueReceive+0xd8>
     abc:	6c 81       	ldd	r22, Y+4	; 0x04
     abe:	7d 81       	ldd	r23, Y+5	; 0x05
     ac0:	c8 01       	movw	r24, r16
     ac2:	41 96       	adiw	r24, 0x11	; 17
     ac4:	0e 94 3b 09 	call	0x1276	; 0x1276 <vTaskPlaceOnEventList>
     ac8:	c8 01       	movw	r24, r16
     aca:	0e 94 ca 03 	call	0x794	; 0x794 <prvUnlockQueue>
     ace:	0e 94 63 08 	call	0x10c6	; 0x10c6 <xTaskResumeAll>
     ad2:	81 11       	cpse	r24, r1
     ad4:	a9 cf       	rjmp	.-174    	; 0xa28 <xQueueReceive+0x24>
     ad6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     ada:	a6 cf       	rjmp	.-180    	; 0xa28 <xQueueReceive+0x24>
     adc:	c8 01       	movw	r24, r16
     ade:	0e 94 ca 03 	call	0x794	; 0x794 <prvUnlockQueue>
     ae2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <xTaskResumeAll>
     ae6:	a0 cf       	rjmp	.-192    	; 0xa28 <xQueueReceive+0x24>
     ae8:	c8 01       	movw	r24, r16
     aea:	0e 94 ca 03 	call	0x794	; 0x794 <prvUnlockQueue>
     aee:	0e 94 63 08 	call	0x10c6	; 0x10c6 <xTaskResumeAll>
     af2:	c8 01       	movw	r24, r16
     af4:	0e 94 4c 03 	call	0x698	; 0x698 <prvIsQueueEmpty>
     af8:	88 23       	and	r24, r24
     afa:	09 f4       	brne	.+2      	; 0xafe <xQueueReceive+0xfa>
     afc:	95 cf       	rjmp	.-214    	; 0xa28 <xQueueReceive+0x24>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	08 95       	ret

00000b1c <uxQueueMessagesWaiting>:
{
    UBaseType_t uxReturn;

    configASSERT( xQueue );

    taskENTER_CRITICAL();
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	0f 92       	push	r0
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
     b22:	fc 01       	movw	r30, r24
     b24:	82 8d       	ldd	r24, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63

    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
     b2a:	08 95       	ret

00000b2c <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     b2c:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <pxDelayedTaskList>
     b30:	f0 91 38 07 	lds	r31, 0x0738	; 0x800738 <pxDelayedTaskList+0x1>
     b34:	80 81       	ld	r24, Z
     b36:	81 11       	cpse	r24, r1
     b38:	07 c0       	rjmp	.+14     	; 0xb48 <prvResetNextTaskUnblockTime+0x1c>
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	9f ef       	ldi	r25, 0xFF	; 255
     b3e:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <xNextTaskUnblockTime+0x1>
     b42:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xNextTaskUnblockTime>
     b46:	08 95       	ret
     b48:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <pxDelayedTaskList>
     b4c:	f0 91 38 07 	lds	r31, 0x0738	; 0x800738 <pxDelayedTaskList+0x1>
     b50:	05 80       	ldd	r0, Z+5	; 0x05
     b52:	f6 81       	ldd	r31, Z+6	; 0x06
     b54:	e0 2d       	mov	r30, r0
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <xNextTaskUnblockTime+0x1>
     b5e:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xNextTaskUnblockTime>
     b62:	08 95       	ret

00000b64 <prvDeleteTCB>:
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	ec 01       	movw	r28, r24
     b6a:	8f 89       	ldd	r24, Y+23	; 0x17
     b6c:	98 8d       	ldd	r25, Y+24	; 0x18
     b6e:	0e 94 0e 03 	call	0x61c	; 0x61c <vPortFree>
     b72:	ce 01       	movw	r24, r28
     b74:	0e 94 0e 03 	call	0x61c	; 0x61c <vPortFree>
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <prvInitialiseNewTask>:
     b7e:	6f 92       	push	r6
     b80:	7f 92       	push	r7
     b82:	8f 92       	push	r8
     b84:	9f 92       	push	r9
     b86:	af 92       	push	r10
     b88:	bf 92       	push	r11
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	4c 01       	movw	r8, r24
     b9e:	d5 01       	movw	r26, r10
     ba0:	57 96       	adiw	r26, 0x17	; 23
     ba2:	8d 91       	ld	r24, X+
     ba4:	9c 91       	ld	r25, X
     ba6:	58 97       	sbiw	r26, 0x18	; 24
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	31 09       	sbc	r19, r1
     bac:	3c 01       	movw	r6, r24
     bae:	62 0e       	add	r6, r18
     bb0:	73 1e       	adc	r7, r19
     bb2:	61 15       	cp	r22, r1
     bb4:	71 05       	cpc	r23, r1
     bb6:	89 f4       	brne	.+34     	; 0xbda <prvInitialiseNewTask+0x5c>
     bb8:	16 c0       	rjmp	.+44     	; 0xbe6 <prvInitialiseNewTask+0x68>
     bba:	82 2f       	mov	r24, r18
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	fb 01       	movw	r30, r22
     bc0:	e8 0f       	add	r30, r24
     bc2:	f9 1f       	adc	r31, r25
     bc4:	30 81       	ld	r19, Z
     bc6:	d5 01       	movw	r26, r10
     bc8:	a8 0f       	add	r26, r24
     bca:	b9 1f       	adc	r27, r25
     bcc:	59 96       	adiw	r26, 0x19	; 25
     bce:	3c 93       	st	X, r19
     bd0:	80 81       	ld	r24, Z
     bd2:	88 23       	and	r24, r24
     bd4:	29 f0       	breq	.+10     	; 0xbe0 <prvInitialiseNewTask+0x62>
     bd6:	2f 5f       	subi	r18, 0xFF	; 255
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <prvInitialiseNewTask+0x5e>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	28 30       	cpi	r18, 0x08	; 8
     bde:	68 f3       	brcs	.-38     	; 0xbba <prvInitialiseNewTask+0x3c>
     be0:	f5 01       	movw	r30, r10
     be2:	10 a2       	std	Z+32, r1	; 0x20
     be4:	03 c0       	rjmp	.+6      	; 0xbec <prvInitialiseNewTask+0x6e>
     be6:	d5 01       	movw	r26, r10
     be8:	59 96       	adiw	r26, 0x19	; 25
     bea:	1c 92       	st	X, r1
     bec:	b3 e0       	ldi	r27, 0x03	; 3
     bee:	be 15       	cp	r27, r14
     bf0:	20 f4       	brcc	.+8      	; 0xbfa <prvInitialiseNewTask+0x7c>
     bf2:	0f 2e       	mov	r0, r31
     bf4:	f3 e0       	ldi	r31, 0x03	; 3
     bf6:	ef 2e       	mov	r14, r31
     bf8:	f0 2d       	mov	r31, r0
     bfa:	f5 01       	movw	r30, r10
     bfc:	e6 8a       	std	Z+22, r14	; 0x16
     bfe:	c5 01       	movw	r24, r10
     c00:	02 96       	adiw	r24, 0x02	; 2
     c02:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     c06:	c5 01       	movw	r24, r10
     c08:	0c 96       	adiw	r24, 0x0c	; 12
     c0a:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     c0e:	d5 01       	movw	r26, r10
     c10:	19 96       	adiw	r26, 0x09	; 9
     c12:	bc 92       	st	X, r11
     c14:	ae 92       	st	-X, r10
     c16:	18 97       	sbiw	r26, 0x08	; 8
     c18:	84 e0       	ldi	r24, 0x04	; 4
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	8e 19       	sub	r24, r14
     c1e:	91 09       	sbc	r25, r1
     c20:	1d 96       	adiw	r26, 0x0d	; 13
     c22:	9c 93       	st	X, r25
     c24:	8e 93       	st	-X, r24
     c26:	1c 97       	sbiw	r26, 0x0c	; 12
     c28:	53 96       	adiw	r26, 0x13	; 19
     c2a:	bc 92       	st	X, r11
     c2c:	ae 92       	st	-X, r10
     c2e:	52 97       	sbiw	r26, 0x12	; 18
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	f5 01       	movw	r30, r10
     c34:	b1 96       	adiw	r30, 0x21	; 33
     c36:	df 01       	movw	r26, r30
     c38:	1d 92       	st	X+, r1
     c3a:	8a 95       	dec	r24
     c3c:	e9 f7       	brne	.-6      	; 0xc38 <prvInitialiseNewTask+0xba>
     c3e:	f5 01       	movw	r30, r10
     c40:	15 a2       	std	Z+37, r1	; 0x25
     c42:	a8 01       	movw	r20, r16
     c44:	b4 01       	movw	r22, r8
     c46:	c3 01       	movw	r24, r6
     c48:	0e 94 dd 00 	call	0x1ba	; 0x1ba <pxPortInitialiseStack>
     c4c:	d5 01       	movw	r26, r10
     c4e:	8d 93       	st	X+, r24
     c50:	9c 93       	st	X, r25
     c52:	c1 14       	cp	r12, r1
     c54:	d1 04       	cpc	r13, r1
     c56:	19 f0       	breq	.+6      	; 0xc5e <prvInitialiseNewTask+0xe0>
     c58:	f6 01       	movw	r30, r12
     c5a:	b1 82       	std	Z+1, r11	; 0x01
     c5c:	a0 82       	st	Z, r10
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ef 90       	pop	r14
     c68:	df 90       	pop	r13
     c6a:	cf 90       	pop	r12
     c6c:	bf 90       	pop	r11
     c6e:	af 90       	pop	r10
     c70:	9f 90       	pop	r9
     c72:	8f 90       	pop	r8
     c74:	7f 90       	pop	r7
     c76:	6f 90       	pop	r6
     c78:	08 95       	ret

00000c7a <prvInitialiseTaskLists>:
     c7a:	cf 93       	push	r28
     c7c:	c0 e0       	ldi	r28, 0x00	; 0
     c7e:	10 c0       	rjmp	.+32     	; 0xca0 <prvInitialiseTaskLists+0x26>
     c80:	8c 2f       	mov	r24, r28
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9c 01       	movw	r18, r24
     c86:	22 0f       	add	r18, r18
     c88:	33 1f       	adc	r19, r19
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	85 5b       	subi	r24, 0xB5	; 181
     c98:	98 4f       	sbci	r25, 0xF8	; 248
     c9a:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     c9e:	cf 5f       	subi	r28, 0xFF	; 255
     ca0:	c4 30       	cpi	r28, 0x04	; 4
     ca2:	70 f3       	brcs	.-36     	; 0xc80 <prvInitialiseTaskLists+0x6>
     ca4:	82 e4       	ldi	r24, 0x42	; 66
     ca6:	97 e0       	ldi	r25, 0x07	; 7
     ca8:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     cac:	89 e3       	ldi	r24, 0x39	; 57
     cae:	97 e0       	ldi	r25, 0x07	; 7
     cb0:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     cb4:	8c e2       	ldi	r24, 0x2C	; 44
     cb6:	97 e0       	ldi	r25, 0x07	; 7
     cb8:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     cbc:	83 e2       	ldi	r24, 0x23	; 35
     cbe:	97 e0       	ldi	r25, 0x07	; 7
     cc0:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     cc4:	89 e1       	ldi	r24, 0x19	; 25
     cc6:	97 e0       	ldi	r25, 0x07	; 7
     cc8:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     ccc:	82 e4       	ldi	r24, 0x42	; 66
     cce:	97 e0       	ldi	r25, 0x07	; 7
     cd0:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <pxDelayedTaskList+0x1>
     cd4:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <pxDelayedTaskList>
     cd8:	89 e3       	ldi	r24, 0x39	; 57
     cda:	97 e0       	ldi	r25, 0x07	; 7
     cdc:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <pxOverflowDelayedTaskList+0x1>
     ce0:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <pxOverflowDelayedTaskList>
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <prvAddNewTaskToReadyList>:
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	0f 92       	push	r0
     cf4:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxCurrentNumberOfTasks>
     cfe:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <pxCurrentTCB>
     d02:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     d06:	89 2b       	or	r24, r25
     d08:	59 f4       	brne	.+22     	; 0xd20 <prvAddNewTaskToReadyList+0x38>
     d0a:	d0 93 70 07 	sts	0x0770, r29	; 0x800770 <pxCurrentTCB+0x1>
     d0e:	c0 93 6f 07 	sts	0x076F, r28	; 0x80076f <pxCurrentTCB>
     d12:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	99 f4       	brne	.+38     	; 0xd40 <prvAddNewTaskToReadyList+0x58>
     d1a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <prvInitialiseTaskLists>
     d1e:	10 c0       	rjmp	.+32     	; 0xd40 <prvAddNewTaskToReadyList+0x58>
     d20:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <xSchedulerRunning>
     d24:	81 11       	cpse	r24, r1
     d26:	0c c0       	rjmp	.+24     	; 0xd40 <prvAddNewTaskToReadyList+0x58>
     d28:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <pxCurrentTCB>
     d2c:	f0 91 70 07 	lds	r31, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     d30:	96 89       	ldd	r25, Z+22	; 0x16
     d32:	8e 89       	ldd	r24, Y+22	; 0x16
     d34:	89 17       	cp	r24, r25
     d36:	20 f0       	brcs	.+8      	; 0xd40 <prvAddNewTaskToReadyList+0x58>
     d38:	d0 93 70 07 	sts	0x0770, r29	; 0x800770 <pxCurrentTCB+0x1>
     d3c:	c0 93 6f 07 	sts	0x076F, r28	; 0x80076f <pxCurrentTCB>
     d40:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxTaskNumber>
     d44:	8f 5f       	subi	r24, 0xFF	; 255
     d46:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <uxTaskNumber>
     d4a:	2e 89       	ldd	r18, Y+22	; 0x16
     d4c:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <uxTopReadyPriority>
     d50:	82 17       	cp	r24, r18
     d52:	10 f4       	brcc	.+4      	; 0xd58 <prvAddNewTaskToReadyList+0x70>
     d54:	20 93 15 07 	sts	0x0715, r18	; 0x800715 <uxTopReadyPriority>
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	be 01       	movw	r22, r28
     d5c:	6e 5f       	subi	r22, 0xFE	; 254
     d5e:	7f 4f       	sbci	r23, 0xFF	; 255
     d60:	c9 01       	movw	r24, r18
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	82 0f       	add	r24, r18
     d70:	93 1f       	adc	r25, r19
     d72:	85 5b       	subi	r24, 0xB5	; 181
     d74:	98 4f       	sbci	r25, 0xF8	; 248
     d76:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <xSchedulerRunning>
     d82:	88 23       	and	r24, r24
     d84:	21 f0       	breq	.+8      	; 0xd8e <prvAddNewTaskToReadyList+0xa6>
     d86:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <pxCurrentTCB>
     d8a:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <prvCheckTasksWaitingTermination>:
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	1c c0       	rjmp	.+56     	; 0xdd2 <prvCheckTasksWaitingTermination+0x3e>
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	0f 92       	push	r0
     da0:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <xTasksWaitingTermination+0x5>
     da4:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <xTasksWaitingTermination+0x6>
     da8:	c6 81       	ldd	r28, Z+6	; 0x06
     daa:	d7 81       	ldd	r29, Z+7	; 0x07
     dac:	ce 01       	movw	r24, r28
     dae:	02 96       	adiw	r24, 0x02	; 2
     db0:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     db4:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
     db8:	81 50       	subi	r24, 0x01	; 1
     dba:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxCurrentNumberOfTasks>
     dbe:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <uxDeletedTasksWaitingCleanUp>
     dc2:	81 50       	subi	r24, 0x01	; 1
     dc4:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <uxDeletedTasksWaitingCleanUp>
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	ce 01       	movw	r24, r28
     dce:	0e 94 b2 05 	call	0xb64	; 0xb64 <prvDeleteTCB>
     dd2:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <uxDeletedTasksWaitingCleanUp>
     dd6:	81 11       	cpse	r24, r1
     dd8:	e0 cf       	rjmp	.-64     	; 0xd9a <prvCheckTasksWaitingTermination+0x6>
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <prvAddCurrentTaskToDelayedList>:
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ec 01       	movw	r28, r24
     dec:	f6 2e       	mov	r15, r22
     dee:	00 91 16 07 	lds	r16, 0x0716	; 0x800716 <xTickCount>
     df2:	10 91 17 07 	lds	r17, 0x0717	; 0x800717 <xTickCount+0x1>
     df6:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <pxCurrentTCB>
     dfa:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     dfe:	02 96       	adiw	r24, 0x02	; 2
     e00:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     e04:	cf 3f       	cpi	r28, 0xFF	; 255
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	d8 07       	cpc	r29, r24
     e0a:	69 f4       	brne	.+26     	; 0xe26 <prvAddCurrentTaskToDelayedList+0x46>
     e0c:	ff 20       	and	r15, r15
     e0e:	59 f0       	breq	.+22     	; 0xe26 <prvAddCurrentTaskToDelayedList+0x46>
     e10:	60 91 6f 07 	lds	r22, 0x076F	; 0x80076f <pxCurrentTCB>
     e14:	70 91 70 07 	lds	r23, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     e18:	6e 5f       	subi	r22, 0xFE	; 254
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	89 e1       	ldi	r24, 0x19	; 25
     e1e:	97 e0       	ldi	r25, 0x07	; 7
     e20:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
     e24:	2f c0       	rjmp	.+94     	; 0xe84 <prvAddCurrentTaskToDelayedList+0xa4>
     e26:	c0 0f       	add	r28, r16
     e28:	d1 1f       	adc	r29, r17
     e2a:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <pxCurrentTCB>
     e2e:	f0 91 70 07 	lds	r31, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     e32:	d3 83       	std	Z+3, r29	; 0x03
     e34:	c2 83       	std	Z+2, r28	; 0x02
     e36:	c0 17       	cp	r28, r16
     e38:	d1 07       	cpc	r29, r17
     e3a:	68 f4       	brcc	.+26     	; 0xe56 <prvAddCurrentTaskToDelayedList+0x76>
     e3c:	60 91 6f 07 	lds	r22, 0x076F	; 0x80076f <pxCurrentTCB>
     e40:	70 91 70 07 	lds	r23, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     e44:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <pxOverflowDelayedTaskList>
     e48:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <pxOverflowDelayedTaskList+0x1>
     e4c:	6e 5f       	subi	r22, 0xFE	; 254
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
     e54:	17 c0       	rjmp	.+46     	; 0xe84 <prvAddCurrentTaskToDelayedList+0xa4>
     e56:	60 91 6f 07 	lds	r22, 0x076F	; 0x80076f <pxCurrentTCB>
     e5a:	70 91 70 07 	lds	r23, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
     e5e:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <pxDelayedTaskList>
     e62:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <pxDelayedTaskList+0x1>
     e66:	6e 5f       	subi	r22, 0xFE	; 254
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
     e6e:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xNextTaskUnblockTime>
     e72:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xNextTaskUnblockTime+0x1>
     e76:	c8 17       	cp	r28, r24
     e78:	d9 07       	cpc	r29, r25
     e7a:	20 f4       	brcc	.+8      	; 0xe84 <prvAddCurrentTaskToDelayedList+0xa4>
     e7c:	d0 93 0e 07 	sts	0x070E, r29	; 0x80070e <xNextTaskUnblockTime+0x1>
     e80:	c0 93 0d 07 	sts	0x070D, r28	; 0x80070d <xNextTaskUnblockTime>
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	08 95       	ret

00000e90 <prvIdleTask>:
     e90:	0e 94 ca 06 	call	0xd94	; 0xd94 <prvCheckTasksWaitingTermination>
     e94:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     e98:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <vApplicationIdleHook>
     e9c:	f9 cf       	rjmp	.-14     	; 0xe90 <prvIdleTask>

00000e9e <xTaskCreate>:
     e9e:	2f 92       	push	r2
     ea0:	3f 92       	push	r3
     ea2:	4f 92       	push	r4
     ea4:	5f 92       	push	r5
     ea6:	6f 92       	push	r6
     ea8:	7f 92       	push	r7
     eaa:	8f 92       	push	r8
     eac:	9f 92       	push	r9
     eae:	af 92       	push	r10
     eb0:	bf 92       	push	r11
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	3c 01       	movw	r6, r24
     ec4:	1b 01       	movw	r2, r22
     ec6:	5a 01       	movw	r10, r20
     ec8:	29 01       	movw	r4, r18
     eca:	ca 01       	movw	r24, r20
     ecc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <pvPortMalloc>
     ed0:	6c 01       	movw	r12, r24
     ed2:	89 2b       	or	r24, r25
     ed4:	71 f0       	breq	.+28     	; 0xef2 <xTaskCreate+0x54>
     ed6:	86 e2       	ldi	r24, 0x26	; 38
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 68 02 	call	0x4d0	; 0x4d0 <pvPortMalloc>
     ede:	ec 01       	movw	r28, r24
     ee0:	89 2b       	or	r24, r25
     ee2:	19 f0       	breq	.+6      	; 0xeea <xTaskCreate+0x4c>
     ee4:	d8 8e       	std	Y+24, r13	; 0x18
     ee6:	cf 8a       	std	Y+23, r12	; 0x17
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <xTaskCreate+0x58>
     eea:	c6 01       	movw	r24, r12
     eec:	0e 94 0e 03 	call	0x61c	; 0x61c <vPortFree>
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <xTaskCreate+0x58>
     ef2:	c0 e0       	ldi	r28, 0x00	; 0
     ef4:	d0 e0       	ldi	r29, 0x00	; 0
     ef6:	20 97       	sbiw	r28, 0x00	; 0
     ef8:	91 f0       	breq	.+36     	; 0xf1e <xTaskCreate+0x80>
     efa:	95 01       	movw	r18, r10
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	81 2c       	mov	r8, r1
     f02:	91 2c       	mov	r9, r1
     f04:	5e 01       	movw	r10, r28
     f06:	67 01       	movw	r12, r14
     f08:	e0 2e       	mov	r14, r16
     f0a:	82 01       	movw	r16, r4
     f0c:	b1 01       	movw	r22, r2
     f0e:	c3 01       	movw	r24, r6
     f10:	0e 94 bf 05 	call	0xb7e	; 0xb7e <prvInitialiseNewTask>
     f14:	ce 01       	movw	r24, r28
     f16:	0e 94 74 06 	call	0xce8	; 0xce8 <prvAddNewTaskToReadyList>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <xTaskCreate+0x82>
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	bf 90       	pop	r11
     f32:	af 90       	pop	r10
     f34:	9f 90       	pop	r9
     f36:	8f 90       	pop	r8
     f38:	7f 90       	pop	r7
     f3a:	6f 90       	pop	r6
     f3c:	5f 90       	pop	r5
     f3e:	4f 90       	pop	r4
     f40:	3f 90       	pop	r3
     f42:	2f 90       	pop	r2
     f44:	08 95       	ret

00000f46 <vTaskStartScheduler>:
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	0f 2e       	mov	r0, r31
     f4e:	fb e0       	ldi	r31, 0x0B	; 11
     f50:	ef 2e       	mov	r14, r31
     f52:	f7 e0       	ldi	r31, 0x07	; 7
     f54:	ff 2e       	mov	r15, r31
     f56:	f0 2d       	mov	r31, r0
     f58:	00 e0       	ldi	r16, 0x00	; 0
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	45 e5       	ldi	r20, 0x55	; 85
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	67 e6       	ldi	r22, 0x67	; 103
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	88 e4       	ldi	r24, 0x48	; 72
     f68:	97 e0       	ldi	r25, 0x07	; 7
     f6a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <xTaskCreate>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	81 f4       	brne	.+32     	; 0xf92 <vTaskStartScheduler+0x4c>
     f72:	f8 94       	cli
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	9f ef       	ldi	r25, 0xFF	; 255
     f78:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <xNextTaskUnblockTime+0x1>
     f7c:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xNextTaskUnblockTime>
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <xSchedulerRunning>
     f86:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <xTickCount+0x1>
     f8a:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <xTickCount>
     f8e:	0e 94 49 01 	call	0x292	; 0x292 <xPortStartScheduler>
     f92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	08 95       	ret

00000f9e <vTaskSuspendAll>:
     f9e:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxSchedulerSuspended>
     fa8:	08 95       	ret

00000faa <xTaskIncrementTick>:
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
     fba:	81 11       	cpse	r24, r1
     fbc:	73 c0       	rjmp	.+230    	; 0x10a4 <xTaskIncrementTick+0xfa>
     fbe:	e0 90 16 07 	lds	r14, 0x0716	; 0x800716 <xTickCount>
     fc2:	f0 90 17 07 	lds	r15, 0x0717	; 0x800717 <xTickCount+0x1>
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	e8 1a       	sub	r14, r24
     fca:	f8 0a       	sbc	r15, r24
     fcc:	f0 92 17 07 	sts	0x0717, r15	; 0x800717 <xTickCount+0x1>
     fd0:	e0 92 16 07 	sts	0x0716, r14	; 0x800716 <xTickCount>
     fd4:	e1 14       	cp	r14, r1
     fd6:	f1 04       	cpc	r15, r1
     fd8:	b9 f4       	brne	.+46     	; 0x1008 <xTaskIncrementTick+0x5e>
     fda:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <pxDelayedTaskList>
     fde:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <pxDelayedTaskList+0x1>
     fe2:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <pxOverflowDelayedTaskList>
     fe6:	30 91 36 07 	lds	r19, 0x0736	; 0x800736 <pxOverflowDelayedTaskList+0x1>
     fea:	30 93 38 07 	sts	0x0738, r19	; 0x800738 <pxDelayedTaskList+0x1>
     fee:	20 93 37 07 	sts	0x0737, r18	; 0x800737 <pxDelayedTaskList>
     ff2:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <pxOverflowDelayedTaskList+0x1>
     ff6:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <pxOverflowDelayedTaskList>
     ffa:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <xNumOfOverflows>
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <xNumOfOverflows>
    1004:	0e 94 96 05 	call	0xb2c	; 0xb2c <prvResetNextTaskUnblockTime>
    1008:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xNextTaskUnblockTime>
    100c:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xNextTaskUnblockTime+0x1>
    1010:	e8 16       	cp	r14, r24
    1012:	f9 06       	cpc	r15, r25
    1014:	08 f4       	brcc	.+2      	; 0x1018 <xTaskIncrementTick+0x6e>
    1016:	4f c0       	rjmp	.+158    	; 0x10b6 <xTaskIncrementTick+0x10c>
    1018:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <pxDelayedTaskList>
    101c:	f0 91 38 07 	lds	r31, 0x0738	; 0x800738 <pxDelayedTaskList+0x1>
    1020:	80 81       	ld	r24, Z
    1022:	81 11       	cpse	r24, r1
    1024:	07 c0       	rjmp	.+14     	; 0x1034 <xTaskIncrementTick+0x8a>
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	9f ef       	ldi	r25, 0xFF	; 255
    102a:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <xNextTaskUnblockTime+0x1>
    102e:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xNextTaskUnblockTime>
    1032:	41 c0       	rjmp	.+130    	; 0x10b6 <xTaskIncrementTick+0x10c>
    1034:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <pxDelayedTaskList>
    1038:	f0 91 38 07 	lds	r31, 0x0738	; 0x800738 <pxDelayedTaskList+0x1>
    103c:	05 80       	ldd	r0, Z+5	; 0x05
    103e:	f6 81       	ldd	r31, Z+6	; 0x06
    1040:	e0 2d       	mov	r30, r0
    1042:	c6 81       	ldd	r28, Z+6	; 0x06
    1044:	d7 81       	ldd	r29, Z+7	; 0x07
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	e8 16       	cp	r14, r24
    104c:	f9 06       	cpc	r15, r25
    104e:	28 f4       	brcc	.+10     	; 0x105a <xTaskIncrementTick+0xb0>
    1050:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <xNextTaskUnblockTime+0x1>
    1054:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xNextTaskUnblockTime>
    1058:	2e c0       	rjmp	.+92     	; 0x10b6 <xTaskIncrementTick+0x10c>
    105a:	8e 01       	movw	r16, r28
    105c:	0e 5f       	subi	r16, 0xFE	; 254
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	c8 01       	movw	r24, r16
    1062:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
    1066:	8c 89       	ldd	r24, Y+20	; 0x14
    1068:	9d 89       	ldd	r25, Y+21	; 0x15
    106a:	89 2b       	or	r24, r25
    106c:	21 f0       	breq	.+8      	; 0x1076 <xTaskIncrementTick+0xcc>
    106e:	ce 01       	movw	r24, r28
    1070:	0c 96       	adiw	r24, 0x0c	; 12
    1072:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
    1076:	8e 89       	ldd	r24, Y+22	; 0x16
    1078:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <uxTopReadyPriority>
    107c:	98 17       	cp	r25, r24
    107e:	10 f4       	brcc	.+4      	; 0x1084 <xTaskIncrementTick+0xda>
    1080:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <uxTopReadyPriority>
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9c 01       	movw	r18, r24
    1088:	22 0f       	add	r18, r18
    108a:	33 1f       	adc	r19, r19
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	22 0f       	add	r18, r18
    1092:	33 1f       	adc	r19, r19
    1094:	82 0f       	add	r24, r18
    1096:	93 1f       	adc	r25, r19
    1098:	b8 01       	movw	r22, r16
    109a:	85 5b       	subi	r24, 0xB5	; 181
    109c:	98 4f       	sbci	r25, 0xF8	; 248
    109e:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
    10a2:	ba cf       	rjmp	.-140    	; 0x1018 <xTaskIncrementTick+0x6e>
    10a4:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <xPendedTicks>
    10a8:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <xPendedTicks+0x1>
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <xPendedTicks+0x1>
    10b2:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <xPendedTicks>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	08 95       	ret

000010c6 <xTaskResumeAll>:
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	0f 92       	push	r0
    10d4:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
    10d8:	81 50       	subi	r24, 0x01	; 1
    10da:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxSchedulerSuspended>
    10de:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
    10e2:	81 11       	cpse	r24, r1
    10e4:	56 c0       	rjmp	.+172    	; 0x1192 <xTaskResumeAll+0xcc>
    10e6:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
    10ea:	81 11       	cpse	r24, r1
    10ec:	33 c0       	rjmp	.+102    	; 0x1154 <xTaskResumeAll+0x8e>
    10ee:	51 c0       	rjmp	.+162    	; 0x1192 <xTaskResumeAll+0xcc>
    10f0:	e0 91 31 07 	lds	r30, 0x0731	; 0x800731 <xPendingReadyList+0x5>
    10f4:	f0 91 32 07 	lds	r31, 0x0732	; 0x800732 <xPendingReadyList+0x6>
    10f8:	c6 81       	ldd	r28, Z+6	; 0x06
    10fa:	d7 81       	ldd	r29, Z+7	; 0x07
    10fc:	ce 01       	movw	r24, r28
    10fe:	0c 96       	adiw	r24, 0x0c	; 12
    1100:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
    1104:	8e 01       	movw	r16, r28
    1106:	0e 5f       	subi	r16, 0xFE	; 254
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	c8 01       	movw	r24, r16
    110c:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
    1110:	8e 89       	ldd	r24, Y+22	; 0x16
    1112:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <uxTopReadyPriority>
    1116:	98 17       	cp	r25, r24
    1118:	10 f4       	brcc	.+4      	; 0x111e <xTaskResumeAll+0x58>
    111a:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <uxTopReadyPriority>
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9c 01       	movw	r18, r24
    1122:	22 0f       	add	r18, r18
    1124:	33 1f       	adc	r19, r19
    1126:	22 0f       	add	r18, r18
    1128:	33 1f       	adc	r19, r19
    112a:	22 0f       	add	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	82 0f       	add	r24, r18
    1130:	93 1f       	adc	r25, r19
    1132:	b8 01       	movw	r22, r16
    1134:	85 5b       	subi	r24, 0xB5	; 181
    1136:	98 4f       	sbci	r25, 0xF8	; 248
    1138:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
    113c:	9e 89       	ldd	r25, Y+22	; 0x16
    113e:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <pxCurrentTCB>
    1142:	f0 91 70 07 	lds	r31, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
    1146:	86 89       	ldd	r24, Z+22	; 0x16
    1148:	98 17       	cp	r25, r24
    114a:	30 f0       	brcs	.+12     	; 0x1158 <xTaskResumeAll+0x92>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xYieldPending>
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <xTaskResumeAll+0x92>
    1154:	c0 e0       	ldi	r28, 0x00	; 0
    1156:	d0 e0       	ldi	r29, 0x00	; 0
    1158:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xPendingReadyList>
    115c:	81 11       	cpse	r24, r1
    115e:	c8 cf       	rjmp	.-112    	; 0x10f0 <xTaskResumeAll+0x2a>
    1160:	cd 2b       	or	r28, r29
    1162:	11 f0       	breq	.+4      	; 0x1168 <xTaskResumeAll+0xa2>
    1164:	0e 94 96 05 	call	0xb2c	; 0xb2c <prvResetNextTaskUnblockTime>
    1168:	c0 91 12 07 	lds	r28, 0x0712	; 0x800712 <xPendedTicks>
    116c:	d0 91 13 07 	lds	r29, 0x0713	; 0x800713 <xPendedTicks+0x1>
    1170:	20 97       	sbiw	r28, 0x00	; 0
    1172:	69 f0       	breq	.+26     	; 0x118e <xTaskResumeAll+0xc8>
    1174:	0e 94 d5 07 	call	0xfaa	; 0xfaa <xTaskIncrementTick>
    1178:	88 23       	and	r24, r24
    117a:	19 f0       	breq	.+6      	; 0x1182 <xTaskResumeAll+0xbc>
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xYieldPending>
    1182:	21 97       	sbiw	r28, 0x01	; 1
    1184:	b9 f7       	brne	.-18     	; 0x1174 <xTaskResumeAll+0xae>
    1186:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <xPendedTicks+0x1>
    118a:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <xPendedTicks>
    118e:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <xYieldPending>
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	08 95       	ret

000011a2 <vTaskDelay>:
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
    11a8:	89 2b       	or	r24, r25
    11aa:	49 f0       	breq	.+18     	; 0x11be <vTaskDelay+0x1c>
    11ac:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vTaskSuspendAll>
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	ce 01       	movw	r24, r28
    11b4:	0e 94 f0 06 	call	0xde0	; 0xde0 <prvAddCurrentTaskToDelayedList>
    11b8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <xTaskResumeAll>
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <vTaskDelay+0x1e>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	81 11       	cpse	r24, r1
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vTaskDelay+0x26>
    11c4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <vTaskSwitchContext>:
    11ce:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
    11d2:	88 23       	and	r24, r24
    11d4:	21 f0       	breq	.+8      	; 0x11de <vTaskSwitchContext+0x10>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xYieldPending>
    11dc:	08 95       	ret
    11de:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <xYieldPending>
    11e2:	20 91 15 07 	lds	r18, 0x0715	; 0x800715 <uxTopReadyPriority>
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <vTaskSwitchContext+0x1c>
    11e8:	21 50       	subi	r18, 0x01	; 1
    11ea:	82 2f       	mov	r24, r18
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	fc 01       	movw	r30, r24
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	e8 0f       	add	r30, r24
    11fe:	f9 1f       	adc	r31, r25
    1200:	e5 5b       	subi	r30, 0xB5	; 181
    1202:	f8 4f       	sbci	r31, 0xF8	; 248
    1204:	30 81       	ld	r19, Z
    1206:	33 23       	and	r19, r19
    1208:	79 f3       	breq	.-34     	; 0x11e8 <vTaskSwitchContext+0x1a>
    120a:	ac 01       	movw	r20, r24
    120c:	44 0f       	add	r20, r20
    120e:	55 1f       	adc	r21, r21
    1210:	44 0f       	add	r20, r20
    1212:	55 1f       	adc	r21, r21
    1214:	44 0f       	add	r20, r20
    1216:	55 1f       	adc	r21, r21
    1218:	48 0f       	add	r20, r24
    121a:	59 1f       	adc	r21, r25
    121c:	df 01       	movw	r26, r30
    121e:	01 80       	ldd	r0, Z+1	; 0x01
    1220:	f2 81       	ldd	r31, Z+2	; 0x02
    1222:	e0 2d       	mov	r30, r0
    1224:	02 80       	ldd	r0, Z+2	; 0x02
    1226:	f3 81       	ldd	r31, Z+3	; 0x03
    1228:	e0 2d       	mov	r30, r0
    122a:	12 96       	adiw	r26, 0x02	; 2
    122c:	fc 93       	st	X, r31
    122e:	ee 93       	st	-X, r30
    1230:	11 97       	sbiw	r26, 0x01	; 1
    1232:	42 5b       	subi	r20, 0xB2	; 178
    1234:	58 4f       	sbci	r21, 0xF8	; 248
    1236:	e4 17       	cp	r30, r20
    1238:	f5 07       	cpc	r31, r21
    123a:	29 f4       	brne	.+10     	; 0x1246 <vTaskSwitchContext+0x78>
    123c:	42 81       	ldd	r20, Z+2	; 0x02
    123e:	53 81       	ldd	r21, Z+3	; 0x03
    1240:	fd 01       	movw	r30, r26
    1242:	52 83       	std	Z+2, r21	; 0x02
    1244:	41 83       	std	Z+1, r20	; 0x01
    1246:	fc 01       	movw	r30, r24
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	8e 0f       	add	r24, r30
    1256:	9f 1f       	adc	r25, r31
    1258:	fc 01       	movw	r30, r24
    125a:	e5 5b       	subi	r30, 0xB5	; 181
    125c:	f8 4f       	sbci	r31, 0xF8	; 248
    125e:	01 80       	ldd	r0, Z+1	; 0x01
    1260:	f2 81       	ldd	r31, Z+2	; 0x02
    1262:	e0 2d       	mov	r30, r0
    1264:	86 81       	ldd	r24, Z+6	; 0x06
    1266:	97 81       	ldd	r25, Z+7	; 0x07
    1268:	90 93 70 07 	sts	0x0770, r25	; 0x800770 <pxCurrentTCB+0x1>
    126c:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <pxCurrentTCB>
    1270:	20 93 15 07 	sts	0x0715, r18	; 0x800715 <uxTopReadyPriority>
    1274:	08 95       	ret

00001276 <vTaskPlaceOnEventList>:
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	eb 01       	movw	r28, r22
    127c:	60 91 6f 07 	lds	r22, 0x076F	; 0x80076f <pxCurrentTCB>
    1280:	70 91 70 07 	lds	r23, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
    1284:	64 5f       	subi	r22, 0xF4	; 244
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
    128c:	61 e0       	ldi	r22, 0x01	; 1
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 f0 06 	call	0xde0	; 0xde0 <prvAddCurrentTaskToDelayedList>
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <xTaskRemoveFromEventList>:
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	dc 01       	movw	r26, r24
    12a4:	15 96       	adiw	r26, 0x05	; 5
    12a6:	ed 91       	ld	r30, X+
    12a8:	fc 91       	ld	r31, X
    12aa:	16 97       	sbiw	r26, 0x06	; 6
    12ac:	c6 81       	ldd	r28, Z+6	; 0x06
    12ae:	d7 81       	ldd	r29, Z+7	; 0x07
    12b0:	8e 01       	movw	r16, r28
    12b2:	04 5f       	subi	r16, 0xF4	; 244
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	c8 01       	movw	r24, r16
    12b8:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
    12bc:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxSchedulerSuspended>
    12c0:	81 11       	cpse	r24, r1
    12c2:	1c c0       	rjmp	.+56     	; 0x12fc <xTaskRemoveFromEventList+0x62>
    12c4:	0a 50       	subi	r16, 0x0A	; 10
    12c6:	11 09       	sbc	r17, r1
    12c8:	c8 01       	movw	r24, r16
    12ca:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
    12ce:	8e 89       	ldd	r24, Y+22	; 0x16
    12d0:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <uxTopReadyPriority>
    12d4:	98 17       	cp	r25, r24
    12d6:	10 f4       	brcc	.+4      	; 0x12dc <xTaskRemoveFromEventList+0x42>
    12d8:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <uxTopReadyPriority>
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9c 01       	movw	r18, r24
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	22 0f       	add	r18, r18
    12ea:	33 1f       	adc	r19, r19
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
    12f0:	b8 01       	movw	r22, r16
    12f2:	85 5b       	subi	r24, 0xB5	; 181
    12f4:	98 4f       	sbci	r25, 0xF8	; 248
    12f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
    12fa:	05 c0       	rjmp	.+10     	; 0x1306 <xTaskRemoveFromEventList+0x6c>
    12fc:	b8 01       	movw	r22, r16
    12fe:	8c e2       	ldi	r24, 0x2C	; 44
    1300:	97 e0       	ldi	r25, 0x07	; 7
    1302:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
    1306:	9e 89       	ldd	r25, Y+22	; 0x16
    1308:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <pxCurrentTCB>
    130c:	f0 91 70 07 	lds	r31, 0x0770	; 0x800770 <pxCurrentTCB+0x1>
    1310:	86 89       	ldd	r24, Z+22	; 0x16
    1312:	89 17       	cp	r24, r25
    1314:	20 f4       	brcc	.+8      	; 0x131e <xTaskRemoveFromEventList+0x84>
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xYieldPending>
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <xTaskRemoveFromEventList+0x86>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	08 95       	ret

0000132a <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    132a:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <xNumOfOverflows>
    132e:	fc 01       	movw	r30, r24
    1330:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    1332:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <xTickCount>
    1336:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <xTickCount+0x1>
    133a:	32 83       	std	Z+2, r19	; 0x02
    133c:	21 83       	std	Z+1, r18	; 0x01
    133e:	08 95       	ret

00001340 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    134c:	e0 91 16 07 	lds	r30, 0x0716	; 0x800716 <xTickCount>
    1350:	f0 91 17 07 	lds	r31, 0x0717	; 0x800717 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1354:	dc 01       	movw	r26, r24
    1356:	11 96       	adiw	r26, 0x01	; 1
    1358:	4d 91       	ld	r20, X+
    135a:	5c 91       	ld	r21, X
    135c:	12 97       	sbiw	r26, 0x02	; 2
    135e:	df 01       	movw	r26, r30
    1360:	a4 1b       	sub	r26, r20
    1362:	b5 0b       	sbc	r27, r21
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
    1364:	eb 01       	movw	r28, r22
    1366:	28 81       	ld	r18, Y
    1368:	39 81       	ldd	r19, Y+1	; 0x01
    136a:	2f 3f       	cpi	r18, 0xFF	; 255
    136c:	df ef       	ldi	r29, 0xFF	; 255
    136e:	3d 07       	cpc	r19, r29
    1370:	f9 f0       	breq	.+62     	; 0x13b0 <xTaskCheckForTimeOut+0x70>
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1372:	ec 01       	movw	r28, r24
    1374:	18 81       	ld	r17, Y
    1376:	c0 91 10 07 	lds	r28, 0x0710	; 0x800710 <xNumOfOverflows>
    137a:	1c 17       	cp	r17, r28
    137c:	41 f0       	breq	.+16     	; 0x138e <xTaskCheckForTimeOut+0x4e>
    137e:	e4 17       	cp	r30, r20
    1380:	f5 07       	cpc	r31, r21
    1382:	28 f0       	brcs	.+10     	; 0x138e <xTaskCheckForTimeOut+0x4e>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    1384:	fb 01       	movw	r30, r22
    1386:	11 82       	std	Z+1, r1	; 0x01
    1388:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    138a:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    138c:	12 c0       	rjmp	.+36     	; 0x13b2 <xTaskCheckForTimeOut+0x72>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    138e:	a2 17       	cp	r26, r18
    1390:	b3 07       	cpc	r27, r19
    1392:	48 f4       	brcc	.+18     	; 0x13a6 <xTaskCheckForTimeOut+0x66>
    1394:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1396:	2a 1b       	sub	r18, r26
    1398:	3b 0b       	sbc	r19, r27
    139a:	31 83       	std	Z+1, r19	; 0x01
    139c:	20 83       	st	Z, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    139e:	0e 94 95 09 	call	0x132a	; 0x132a <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <xTaskCheckForTimeOut+0x72>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    13a6:	db 01       	movw	r26, r22
    13a8:	1d 92       	st	X+, r1
    13aa:	1c 92       	st	X, r1
            xReturn = pdTRUE;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <xTaskCheckForTimeOut+0x72>
            if( *pxTicksToWait == portMAX_DELAY )
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
        {
            *pxTicksToWait = ( TickType_t ) 0;
            xReturn = pdTRUE;
        }
    }
    taskEXIT_CRITICAL();
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	08 95       	ret

000013be <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xYieldPending>
    13c4:	08 95       	ret

000013c6 <command>:

void command()
{


	PORTB=PORTB & ~ (1<<RS);
    13c6:	88 b3       	in	r24, 0x18	; 24
    13c8:	8e 7f       	andi	r24, 0xFE	; 254
    13ca:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~ (1<<RW) ;
    13cc:	88 b3       	in	r24, 0x18	; 24
    13ce:	8d 7f       	andi	r24, 0xFD	; 253
    13d0:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB  | (1<<E);
    13d2:	88 b3       	in	r24, 0x18	; 24
    13d4:	84 60       	ori	r24, 0x04	; 4
    13d6:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~(1<<E);
    13d8:	88 b3       	in	r24, 0x18	; 24
    13da:	8b 7f       	andi	r24, 0xFB	; 251
    13dc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13de:	8f e1       	ldi	r24, 0x1F	; 31
    13e0:	9e e4       	ldi	r25, 0x4E	; 78
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <command+0x1c>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <command+0x22>
    13e8:	00 00       	nop
    13ea:	08 95       	ret

000013ec <lcd_init>:

}

void lcd_init()
{
	DDRA = DDRB = 0xFF;
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	87 bb       	out	0x17, r24	; 23
    13f0:	8a bb       	out	0x1a, r24	; 26
	
	display=0x38;
    13f2:	88 e3       	ldi	r24, 0x38	; 56
    13f4:	8b bb       	out	0x1b, r24	; 27
	command();
    13f6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <command>

	display=0x01;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8b bb       	out	0x1b, r24	; 27
	command();
    13fe:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <command>

	display=0x0C;
    1402:	8c e0       	ldi	r24, 0x0C	; 12
    1404:	8b bb       	out	0x1b, r24	; 27
	command();
    1406:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <command>

	display=0x06;
    140a:	86 e0       	ldi	r24, 0x06	; 6
    140c:	8b bb       	out	0x1b, r24	; 27
	command();
    140e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <command>

	display=0x8F;
    1412:	8f e8       	ldi	r24, 0x8F	; 143
    1414:	8b bb       	out	0x1b, r24	; 27
	command();
    1416:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <command>
	
	display = 0x07;
    141a:	87 e0       	ldi	r24, 0x07	; 7
    141c:	8b bb       	out	0x1b, r24	; 27
	command();
    141e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <command>
    1422:	08 95       	ret

00001424 <DISPLAY>:

void DISPLAY()
{
	

	PORTB=PORTB | (1<<RS);
    1424:	88 b3       	in	r24, 0x18	; 24
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~ (1<<RW);
    142a:	88 b3       	in	r24, 0x18	; 24
    142c:	8d 7f       	andi	r24, 0xFD	; 253
    142e:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB  | (1<<E);
    1430:	88 b3       	in	r24, 0x18	; 24
    1432:	84 60       	ori	r24, 0x04	; 4
    1434:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~(1<<E);
    1436:	88 b3       	in	r24, 0x18	; 24
    1438:	8b 7f       	andi	r24, 0xFB	; 251
    143a:	88 bb       	out	0x18, r24	; 24
    143c:	8f e1       	ldi	r24, 0x1F	; 31
    143e:	9e e4       	ldi	r25, 0x4E	; 78
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <DISPLAY+0x1c>
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <DISPLAY+0x22>
    1446:	00 00       	nop
    1448:	08 95       	ret

0000144a <usart_init>:
#include <avr/interrupt.h>
#include "lcd.h"

void usart_init(void)
{
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
    144a:	88 e9       	ldi	r24, 0x98	; 152
    144c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ1) | (1<<UCSZ0) | (1<<URSEL);
    144e:	86 e8       	ldi	r24, 0x86	; 134
    1450:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33;
    1452:	83 e3       	ldi	r24, 0x33	; 51
    1454:	89 b9       	out	0x09, r24	; 9
    1456:	08 95       	ret

00001458 <usart_send>:
}

void usart_send(char *ch)
{
    1458:	fc 01       	movw	r30, r24
	
	
	
	while(*ch)
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <usart_send+0xc>
	{
		
		while(!(UCSRA & (1<<UDRE)));
    145c:	5d 9b       	sbis	0x0b, 5	; 11
    145e:	fe cf       	rjmp	.-4      	; 0x145c <usart_send+0x4>
		
		
		UDR = *ch;
    1460:	8c b9       	out	0x0c, r24	; 12
		
		ch++;
    1462:	31 96       	adiw	r30, 0x01	; 1
void usart_send(char *ch)
{
	
	
	
	while(*ch)
    1464:	80 81       	ld	r24, Z
    1466:	81 11       	cpse	r24, r1
    1468:	f9 cf       	rjmp	.-14     	; 0x145c <usart_send+0x4>
		
		ch++;
	}
	
	
}
    146a:	08 95       	ret

0000146c <receiver>:
			vTaskDelay(500);
		}
	}

	void receiver(void *param)
	{
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	00 d0       	rcall	.+0      	; 0x1472 <receiver+0x6>
    1472:	1f 92       	push	r1
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
		BaseType_t xStatus;

		while (1)
		{

			if (uxQueueMessagesWaiting(xQueue) != 5)   // How many element hold by queue is returned by this function.
    1478:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <xQueue>
    147c:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <xQueue+0x1>
    1480:	0e 94 8e 05 	call	0xb1c	; 0xb1c <uxQueueMessagesWaiting>
    1484:	85 30       	cpi	r24, 0x05	; 5
    1486:	21 f0       	breq	.+8      	; 0x1490 <receiver+0x24>
			{
				usart_send((char *)"Queue is full\r\r");
    1488:	8c e6       	ldi	r24, 0x6C	; 108
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <usart_send>
			}

			xStatus = xQueueReceive(xQueue, &ReceivedValue, 0);   // Get value from the queue. and return the whether it get the value or not. 
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	be 01       	movw	r22, r28
    1496:	6f 5f       	subi	r22, 0xFF	; 255
    1498:	7f 4f       	sbci	r23, 0xFF	; 255
    149a:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <xQueue>
    149e:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <xQueue+0x1>
    14a2:	0e 94 02 05 	call	0xa04	; 0xa04 <xQueueReceive>

			if (xStatus == pdPASS)
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	a9 f5       	brne	.+106    	; 0x1514 <receiver+0xa8>
			{
				if (ReceivedValue.eDataSource == esender1)
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	81 11       	cpse	r24, r1
    14ae:	19 c0       	rjmp	.+50     	; 0x14e2 <receiver+0x76>
				{

					sprintf(str, "Received from sender1 -->  %d\r\r", ReceivedValue.ucValue);
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	8f 93       	push	r24
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	8f 93       	push	r24
    14b8:	8c e7       	ldi	r24, 0x7C	; 124
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9f 93       	push	r25
    14be:	8f 93       	push	r24
    14c0:	89 e7       	ldi	r24, 0x79	; 121
    14c2:	97 e0       	ldi	r25, 0x07	; 7
    14c4:	9f 93       	push	r25
    14c6:	8f 93       	push	r24
    14c8:	0e 94 3e 0b 	call	0x167c	; 0x167c <sprintf>

					usart_send(str);
    14cc:	89 e7       	ldi	r24, 0x79	; 121
    14ce:	97 e0       	ldi	r25, 0x07	; 7
    14d0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <usart_send>
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	1d c0       	rjmp	.+58     	; 0x151c <receiver+0xb0>
				}

				else
				{
					sprintf(str, "Received from sender2 -->  %d\r\r", ReceivedValue.ucValue);
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	8f 93       	push	r24
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	8f 93       	push	r24
    14ea:	8c e9       	ldi	r24, 0x9C	; 156
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9f 93       	push	r25
    14f0:	8f 93       	push	r24
    14f2:	89 e7       	ldi	r24, 0x79	; 121
    14f4:	97 e0       	ldi	r25, 0x07	; 7
    14f6:	9f 93       	push	r25
    14f8:	8f 93       	push	r24
    14fa:	0e 94 3e 0b 	call	0x167c	; 0x167c <sprintf>

					usart_send(str);
    14fe:	89 e7       	ldi	r24, 0x79	; 121
    1500:	97 e0       	ldi	r25, 0x07	; 7
    1502:	0e 94 2c 0a 	call	0x1458	; 0x1458 <usart_send>
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	04 c0       	rjmp	.+8      	; 0x151c <receiver+0xb0>
				}
			}
			else
			{
				usart_send((char *)"not received from queue.\r\r");
    1514:	8c eb       	ldi	r24, 0xBC	; 188
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 2c 0a 	call	0x1458	; 0x1458 <usart_send>
			}
			vTaskDelay(500);
    151c:	84 ef       	ldi	r24, 0xF4	; 244
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <vTaskDelay>
		}
    1524:	a9 cf       	rjmp	.-174    	; 0x1478 <receiver+0xc>

00001526 <sender>:
			usart_send((char *)"not get anything\r");
		}
	}

	void sender(void *param)
	{
    1526:	ec 01       	movw	r28, r24
		//Data_t* ValueToSend;
		//ValueToSend = (Data_t*) param;

		while (1)
		{
			xStatus = xQueueSendToBack(xQueue, param, xTickToWait);  // used to put value at back of queue. and return whether it pass or not. 
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	42 e2       	ldi	r20, 0x22	; 34
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	be 01       	movw	r22, r28
    1530:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <xQueue>
    1534:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <xQueue+0x1>
    1538:	0e 94 78 04 	call	0x8f0	; 0x8f0 <xQueueGenericSend>

			if (xStatus == pdPASS)
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	29 f4       	brne	.+10     	; 0x154a <sender+0x24>
			{
				usart_send((char *)"Send to queue\r\r");
    1540:	87 ed       	ldi	r24, 0xD7	; 215
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 2c 0a 	call	0x1458	; 0x1458 <usart_send>
    1548:	04 c0       	rjmp	.+8      	; 0x1552 <sender+0x2c>
			}
			else
			{
				usart_send((char *)"not send\r\r");
    154a:	87 ee       	ldi	r24, 0xE7	; 231
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <usart_send>
			}

			vTaskDelay(500);
    1552:	84 ef       	ldi	r24, 0xF4	; 244
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <vTaskDelay>
		}
    155a:	e6 cf       	rjmp	.-52     	; 0x1528 <sender+0x2>

0000155c <__vector_13>:

ISR (USART_RXC_vect)
{
    155c:	1f 92       	push	r1
    155e:	0f 92       	push	r0
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
	display = UDR;
    157e:	8c b1       	in	r24, 0x0c	; 12
    1580:	8b bb       	out	0x1b, r24	; 27
	DISPLAY();
    1582:	0e 94 12 0a 	call	0x1424	; 0x1424 <DISPLAY>
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

000015a8 <vApplicationIdleHook>:
volatile uint32_t ulIdleCycleCount = 0UL;

void vApplicationIdleHook(void)
{

	ulIdleCycleCount++; // increment the variable. at each tick of crystal.
    15a8:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <ulIdleCycleCount>
    15ac:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <ulIdleCycleCount+0x1>
    15b0:	a0 91 73 07 	lds	r26, 0x0773	; 0x800773 <ulIdleCycleCount+0x2>
    15b4:	b0 91 74 07 	lds	r27, 0x0774	; 0x800774 <ulIdleCycleCount+0x3>
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	a1 1d       	adc	r26, r1
    15bc:	b1 1d       	adc	r27, r1
    15be:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <ulIdleCycleCount>
    15c2:	90 93 72 07 	sts	0x0772, r25	; 0x800772 <ulIdleCycleCount+0x1>
    15c6:	a0 93 73 07 	sts	0x0773, r26	; 0x800773 <ulIdleCycleCount+0x2>
    15ca:	b0 93 74 07 	sts	0x0774, r27	; 0x800774 <ulIdleCycleCount+0x3>
    15ce:	08 95       	ret

000015d0 <main>:
	{100, esender1},

	{200, esender2}};

	int main(void)
	{
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
		usart_init();
    15d6:	0e 94 25 0a 	call	0x144a	; 0x144a <usart_init>
		lcd_init();
    15da:	0e 94 f6 09 	call	0x13ec	; 0x13ec <lcd_init>

		xQueue = xQueueCreate(5, sizeof(Data_t));
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	63 e0       	ldi	r22, 0x03	; 3
    15e2:	85 e0       	ldi	r24, 0x05	; 5
    15e4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <xQueueGenericCreate>
    15e8:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <xQueue+0x1>
    15ec:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <xQueue>

		if (xQueue != NULL)
    15f0:	89 2b       	or	r24, r25
    15f2:	89 f1       	breq	.+98     	; 0x1656 <main+0x86>
		{

			xTaskCreate(sender, "sender1", 100, &(xStructsToSend[0]), 2, &TaskHandle1);
    15f4:	0f 2e       	mov	r0, r31
    15f6:	f7 e9       	ldi	r31, 0x97	; 151
    15f8:	ef 2e       	mov	r14, r31
    15fa:	f7 e0       	ldi	r31, 0x07	; 7
    15fc:	ff 2e       	mov	r15, r31
    15fe:	f0 2d       	mov	r31, r0
    1600:	02 e0       	ldi	r16, 0x02	; 2
    1602:	21 e6       	ldi	r18, 0x61	; 97
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	44 e6       	ldi	r20, 0x64	; 100
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	62 ef       	ldi	r22, 0xF2	; 242
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	83 e9       	ldi	r24, 0x93	; 147
    1610:	9a e0       	ldi	r25, 0x0A	; 10
    1612:	0e 94 4f 07 	call	0xe9e	; 0xe9e <xTaskCreate>
			xTaskCreate(sender, "sender2", 100, &(xStructsToSend[1]), 2, &TaskHandle2);
    1616:	0f 2e       	mov	r0, r31
    1618:	f5 e7       	ldi	r31, 0x75	; 117
    161a:	ef 2e       	mov	r14, r31
    161c:	f7 e0       	ldi	r31, 0x07	; 7
    161e:	ff 2e       	mov	r15, r31
    1620:	f0 2d       	mov	r31, r0
    1622:	24 e6       	ldi	r18, 0x64	; 100
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	44 e6       	ldi	r20, 0x64	; 100
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	6a ef       	ldi	r22, 0xFA	; 250
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	83 e9       	ldi	r24, 0x93	; 147
    1630:	9a e0       	ldi	r25, 0x0A	; 10
    1632:	0e 94 4f 07 	call	0xe9e	; 0xe9e <xTaskCreate>

			xTaskCreate(receiver, "Receiver", 100, NULL, 1, NULL);
    1636:	e1 2c       	mov	r14, r1
    1638:	f1 2c       	mov	r15, r1
    163a:	01 e0       	ldi	r16, 0x01	; 1
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	44 e6       	ldi	r20, 0x64	; 100
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	62 e0       	ldi	r22, 0x02	; 2
    1646:	71 e0       	ldi	r23, 0x01	; 1
    1648:	86 e3       	ldi	r24, 0x36	; 54
    164a:	9a e0       	ldi	r25, 0x0A	; 10
    164c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <xTaskCreate>

			vTaskStartScheduler();
    1650:	0e 94 a3 07 	call	0xf46	; 0xf46 <vTaskStartScheduler>
    1654:	04 c0       	rjmp	.+8      	; 0x165e <main+0x8e>
		}
		else
		{
			usart_send((char *)"not get anything\r");
    1656:	8b e0       	ldi	r24, 0x0B	; 11
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <usart_send>
		}
	}
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0f 91       	pop	r16
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14
    1668:	08 95       	ret

0000166a <memcpy>:
    166a:	fb 01       	movw	r30, r22
    166c:	dc 01       	movw	r26, r24
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <memcpy+0xa>
    1670:	01 90       	ld	r0, Z+
    1672:	0d 92       	st	X+, r0
    1674:	41 50       	subi	r20, 0x01	; 1
    1676:	50 40       	sbci	r21, 0x00	; 0
    1678:	d8 f7       	brcc	.-10     	; 0x1670 <memcpy+0x6>
    167a:	08 95       	ret

0000167c <sprintf>:
    167c:	ae e0       	ldi	r26, 0x0E	; 14
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e4 e4       	ldi	r30, 0x44	; 68
    1682:	fb e0       	ldi	r31, 0x0B	; 11
    1684:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__prologue_saves__+0x1c>
    1688:	0d 89       	ldd	r16, Y+21	; 0x15
    168a:	1e 89       	ldd	r17, Y+22	; 0x16
    168c:	86 e0       	ldi	r24, 0x06	; 6
    168e:	8c 83       	std	Y+4, r24	; 0x04
    1690:	1a 83       	std	Y+2, r17	; 0x02
    1692:	09 83       	std	Y+1, r16	; 0x01
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	9f e7       	ldi	r25, 0x7F	; 127
    1698:	9e 83       	std	Y+6, r25	; 0x06
    169a:	8d 83       	std	Y+5, r24	; 0x05
    169c:	ae 01       	movw	r20, r28
    169e:	47 5e       	subi	r20, 0xE7	; 231
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255
    16a2:	6f 89       	ldd	r22, Y+23	; 0x17
    16a4:	78 8d       	ldd	r23, Y+24	; 0x18
    16a6:	ce 01       	movw	r24, r28
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <vfprintf>
    16ae:	ef 81       	ldd	r30, Y+7	; 0x07
    16b0:	f8 85       	ldd	r31, Y+8	; 0x08
    16b2:	e0 0f       	add	r30, r16
    16b4:	f1 1f       	adc	r31, r17
    16b6:	10 82       	st	Z, r1
    16b8:	2e 96       	adiw	r28, 0x0e	; 14
    16ba:	e4 e0       	ldi	r30, 0x04	; 4
    16bc:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__epilogue_restores__+0x1c>

000016c0 <vfprintf>:
    16c0:	ab e0       	ldi	r26, 0x0B	; 11
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e6 e6       	ldi	r30, 0x66	; 102
    16c6:	fb e0       	ldi	r31, 0x0B	; 11
    16c8:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__prologue_saves__>
    16cc:	6c 01       	movw	r12, r24
    16ce:	7b 01       	movw	r14, r22
    16d0:	8a 01       	movw	r16, r20
    16d2:	fc 01       	movw	r30, r24
    16d4:	17 82       	std	Z+7, r1	; 0x07
    16d6:	16 82       	std	Z+6, r1	; 0x06
    16d8:	83 81       	ldd	r24, Z+3	; 0x03
    16da:	81 ff       	sbrs	r24, 1
    16dc:	cc c1       	rjmp	.+920    	; 0x1a76 <vfprintf+0x3b6>
    16de:	ce 01       	movw	r24, r28
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	3c 01       	movw	r6, r24
    16e4:	f6 01       	movw	r30, r12
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	f7 01       	movw	r30, r14
    16ea:	93 fd       	sbrc	r25, 3
    16ec:	85 91       	lpm	r24, Z+
    16ee:	93 ff       	sbrs	r25, 3
    16f0:	81 91       	ld	r24, Z+
    16f2:	7f 01       	movw	r14, r30
    16f4:	88 23       	and	r24, r24
    16f6:	09 f4       	brne	.+2      	; 0x16fa <vfprintf+0x3a>
    16f8:	ba c1       	rjmp	.+884    	; 0x1a6e <vfprintf+0x3ae>
    16fa:	85 32       	cpi	r24, 0x25	; 37
    16fc:	39 f4       	brne	.+14     	; 0x170c <vfprintf+0x4c>
    16fe:	93 fd       	sbrc	r25, 3
    1700:	85 91       	lpm	r24, Z+
    1702:	93 ff       	sbrs	r25, 3
    1704:	81 91       	ld	r24, Z+
    1706:	7f 01       	movw	r14, r30
    1708:	85 32       	cpi	r24, 0x25	; 37
    170a:	29 f4       	brne	.+10     	; 0x1716 <vfprintf+0x56>
    170c:	b6 01       	movw	r22, r12
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1714:	e7 cf       	rjmp	.-50     	; 0x16e4 <vfprintf+0x24>
    1716:	91 2c       	mov	r9, r1
    1718:	21 2c       	mov	r2, r1
    171a:	31 2c       	mov	r3, r1
    171c:	ff e1       	ldi	r31, 0x1F	; 31
    171e:	f3 15       	cp	r31, r3
    1720:	d8 f0       	brcs	.+54     	; 0x1758 <vfprintf+0x98>
    1722:	8b 32       	cpi	r24, 0x2B	; 43
    1724:	79 f0       	breq	.+30     	; 0x1744 <vfprintf+0x84>
    1726:	38 f4       	brcc	.+14     	; 0x1736 <vfprintf+0x76>
    1728:	80 32       	cpi	r24, 0x20	; 32
    172a:	79 f0       	breq	.+30     	; 0x174a <vfprintf+0x8a>
    172c:	83 32       	cpi	r24, 0x23	; 35
    172e:	a1 f4       	brne	.+40     	; 0x1758 <vfprintf+0x98>
    1730:	23 2d       	mov	r18, r3
    1732:	20 61       	ori	r18, 0x10	; 16
    1734:	1d c0       	rjmp	.+58     	; 0x1770 <vfprintf+0xb0>
    1736:	8d 32       	cpi	r24, 0x2D	; 45
    1738:	61 f0       	breq	.+24     	; 0x1752 <vfprintf+0x92>
    173a:	80 33       	cpi	r24, 0x30	; 48
    173c:	69 f4       	brne	.+26     	; 0x1758 <vfprintf+0x98>
    173e:	23 2d       	mov	r18, r3
    1740:	21 60       	ori	r18, 0x01	; 1
    1742:	16 c0       	rjmp	.+44     	; 0x1770 <vfprintf+0xb0>
    1744:	83 2d       	mov	r24, r3
    1746:	82 60       	ori	r24, 0x02	; 2
    1748:	38 2e       	mov	r3, r24
    174a:	e3 2d       	mov	r30, r3
    174c:	e4 60       	ori	r30, 0x04	; 4
    174e:	3e 2e       	mov	r3, r30
    1750:	2a c0       	rjmp	.+84     	; 0x17a6 <vfprintf+0xe6>
    1752:	f3 2d       	mov	r31, r3
    1754:	f8 60       	ori	r31, 0x08	; 8
    1756:	1d c0       	rjmp	.+58     	; 0x1792 <vfprintf+0xd2>
    1758:	37 fc       	sbrc	r3, 7
    175a:	2d c0       	rjmp	.+90     	; 0x17b6 <vfprintf+0xf6>
    175c:	20 ed       	ldi	r18, 0xD0	; 208
    175e:	28 0f       	add	r18, r24
    1760:	2a 30       	cpi	r18, 0x0A	; 10
    1762:	40 f0       	brcs	.+16     	; 0x1774 <vfprintf+0xb4>
    1764:	8e 32       	cpi	r24, 0x2E	; 46
    1766:	b9 f4       	brne	.+46     	; 0x1796 <vfprintf+0xd6>
    1768:	36 fc       	sbrc	r3, 6
    176a:	81 c1       	rjmp	.+770    	; 0x1a6e <vfprintf+0x3ae>
    176c:	23 2d       	mov	r18, r3
    176e:	20 64       	ori	r18, 0x40	; 64
    1770:	32 2e       	mov	r3, r18
    1772:	19 c0       	rjmp	.+50     	; 0x17a6 <vfprintf+0xe6>
    1774:	36 fe       	sbrs	r3, 6
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <vfprintf+0xc4>
    1778:	8a e0       	ldi	r24, 0x0A	; 10
    177a:	98 9e       	mul	r9, r24
    177c:	20 0d       	add	r18, r0
    177e:	11 24       	eor	r1, r1
    1780:	92 2e       	mov	r9, r18
    1782:	11 c0       	rjmp	.+34     	; 0x17a6 <vfprintf+0xe6>
    1784:	ea e0       	ldi	r30, 0x0A	; 10
    1786:	2e 9e       	mul	r2, r30
    1788:	20 0d       	add	r18, r0
    178a:	11 24       	eor	r1, r1
    178c:	22 2e       	mov	r2, r18
    178e:	f3 2d       	mov	r31, r3
    1790:	f0 62       	ori	r31, 0x20	; 32
    1792:	3f 2e       	mov	r3, r31
    1794:	08 c0       	rjmp	.+16     	; 0x17a6 <vfprintf+0xe6>
    1796:	8c 36       	cpi	r24, 0x6C	; 108
    1798:	21 f4       	brne	.+8      	; 0x17a2 <vfprintf+0xe2>
    179a:	83 2d       	mov	r24, r3
    179c:	80 68       	ori	r24, 0x80	; 128
    179e:	38 2e       	mov	r3, r24
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <vfprintf+0xe6>
    17a2:	88 36       	cpi	r24, 0x68	; 104
    17a4:	41 f4       	brne	.+16     	; 0x17b6 <vfprintf+0xf6>
    17a6:	f7 01       	movw	r30, r14
    17a8:	93 fd       	sbrc	r25, 3
    17aa:	85 91       	lpm	r24, Z+
    17ac:	93 ff       	sbrs	r25, 3
    17ae:	81 91       	ld	r24, Z+
    17b0:	7f 01       	movw	r14, r30
    17b2:	81 11       	cpse	r24, r1
    17b4:	b3 cf       	rjmp	.-154    	; 0x171c <vfprintf+0x5c>
    17b6:	98 2f       	mov	r25, r24
    17b8:	9f 7d       	andi	r25, 0xDF	; 223
    17ba:	95 54       	subi	r25, 0x45	; 69
    17bc:	93 30       	cpi	r25, 0x03	; 3
    17be:	28 f4       	brcc	.+10     	; 0x17ca <vfprintf+0x10a>
    17c0:	0c 5f       	subi	r16, 0xFC	; 252
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
    17c4:	9f e3       	ldi	r25, 0x3F	; 63
    17c6:	99 83       	std	Y+1, r25	; 0x01
    17c8:	0d c0       	rjmp	.+26     	; 0x17e4 <vfprintf+0x124>
    17ca:	83 36       	cpi	r24, 0x63	; 99
    17cc:	31 f0       	breq	.+12     	; 0x17da <vfprintf+0x11a>
    17ce:	83 37       	cpi	r24, 0x73	; 115
    17d0:	71 f0       	breq	.+28     	; 0x17ee <vfprintf+0x12e>
    17d2:	83 35       	cpi	r24, 0x53	; 83
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <vfprintf+0x118>
    17d6:	59 c0       	rjmp	.+178    	; 0x188a <vfprintf+0x1ca>
    17d8:	21 c0       	rjmp	.+66     	; 0x181c <vfprintf+0x15c>
    17da:	f8 01       	movw	r30, r16
    17dc:	80 81       	ld	r24, Z
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	0e 5f       	subi	r16, 0xFE	; 254
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	88 24       	eor	r8, r8
    17e6:	83 94       	inc	r8
    17e8:	91 2c       	mov	r9, r1
    17ea:	53 01       	movw	r10, r6
    17ec:	13 c0       	rjmp	.+38     	; 0x1814 <vfprintf+0x154>
    17ee:	28 01       	movw	r4, r16
    17f0:	f2 e0       	ldi	r31, 0x02	; 2
    17f2:	4f 0e       	add	r4, r31
    17f4:	51 1c       	adc	r5, r1
    17f6:	f8 01       	movw	r30, r16
    17f8:	a0 80       	ld	r10, Z
    17fa:	b1 80       	ldd	r11, Z+1	; 0x01
    17fc:	36 fe       	sbrs	r3, 6
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <vfprintf+0x146>
    1800:	69 2d       	mov	r22, r9
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	02 c0       	rjmp	.+4      	; 0x180a <vfprintf+0x14a>
    1806:	6f ef       	ldi	r22, 0xFF	; 255
    1808:	7f ef       	ldi	r23, 0xFF	; 255
    180a:	c5 01       	movw	r24, r10
    180c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <strnlen>
    1810:	4c 01       	movw	r8, r24
    1812:	82 01       	movw	r16, r4
    1814:	f3 2d       	mov	r31, r3
    1816:	ff 77       	andi	r31, 0x7F	; 127
    1818:	3f 2e       	mov	r3, r31
    181a:	16 c0       	rjmp	.+44     	; 0x1848 <vfprintf+0x188>
    181c:	28 01       	movw	r4, r16
    181e:	22 e0       	ldi	r18, 0x02	; 2
    1820:	42 0e       	add	r4, r18
    1822:	51 1c       	adc	r5, r1
    1824:	f8 01       	movw	r30, r16
    1826:	a0 80       	ld	r10, Z
    1828:	b1 80       	ldd	r11, Z+1	; 0x01
    182a:	36 fe       	sbrs	r3, 6
    182c:	03 c0       	rjmp	.+6      	; 0x1834 <vfprintf+0x174>
    182e:	69 2d       	mov	r22, r9
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <vfprintf+0x178>
    1834:	6f ef       	ldi	r22, 0xFF	; 255
    1836:	7f ef       	ldi	r23, 0xFF	; 255
    1838:	c5 01       	movw	r24, r10
    183a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <strnlen_P>
    183e:	4c 01       	movw	r8, r24
    1840:	f3 2d       	mov	r31, r3
    1842:	f0 68       	ori	r31, 0x80	; 128
    1844:	3f 2e       	mov	r3, r31
    1846:	82 01       	movw	r16, r4
    1848:	33 fc       	sbrc	r3, 3
    184a:	1b c0       	rjmp	.+54     	; 0x1882 <vfprintf+0x1c2>
    184c:	82 2d       	mov	r24, r2
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	88 16       	cp	r8, r24
    1852:	99 06       	cpc	r9, r25
    1854:	b0 f4       	brcc	.+44     	; 0x1882 <vfprintf+0x1c2>
    1856:	b6 01       	movw	r22, r12
    1858:	80 e2       	ldi	r24, 0x20	; 32
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1860:	2a 94       	dec	r2
    1862:	f4 cf       	rjmp	.-24     	; 0x184c <vfprintf+0x18c>
    1864:	f5 01       	movw	r30, r10
    1866:	37 fc       	sbrc	r3, 7
    1868:	85 91       	lpm	r24, Z+
    186a:	37 fe       	sbrs	r3, 7
    186c:	81 91       	ld	r24, Z+
    186e:	5f 01       	movw	r10, r30
    1870:	b6 01       	movw	r22, r12
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1878:	21 10       	cpse	r2, r1
    187a:	2a 94       	dec	r2
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	82 1a       	sub	r8, r18
    1880:	91 08       	sbc	r9, r1
    1882:	81 14       	cp	r8, r1
    1884:	91 04       	cpc	r9, r1
    1886:	71 f7       	brne	.-36     	; 0x1864 <vfprintf+0x1a4>
    1888:	e8 c0       	rjmp	.+464    	; 0x1a5a <vfprintf+0x39a>
    188a:	84 36       	cpi	r24, 0x64	; 100
    188c:	11 f0       	breq	.+4      	; 0x1892 <vfprintf+0x1d2>
    188e:	89 36       	cpi	r24, 0x69	; 105
    1890:	41 f5       	brne	.+80     	; 0x18e2 <vfprintf+0x222>
    1892:	f8 01       	movw	r30, r16
    1894:	37 fe       	sbrs	r3, 7
    1896:	07 c0       	rjmp	.+14     	; 0x18a6 <vfprintf+0x1e6>
    1898:	60 81       	ld	r22, Z
    189a:	71 81       	ldd	r23, Z+1	; 0x01
    189c:	82 81       	ldd	r24, Z+2	; 0x02
    189e:	93 81       	ldd	r25, Z+3	; 0x03
    18a0:	0c 5f       	subi	r16, 0xFC	; 252
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	08 c0       	rjmp	.+16     	; 0x18b6 <vfprintf+0x1f6>
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	07 2e       	mov	r0, r23
    18ac:	00 0c       	add	r0, r0
    18ae:	88 0b       	sbc	r24, r24
    18b0:	99 0b       	sbc	r25, r25
    18b2:	0e 5f       	subi	r16, 0xFE	; 254
    18b4:	1f 4f       	sbci	r17, 0xFF	; 255
    18b6:	f3 2d       	mov	r31, r3
    18b8:	ff 76       	andi	r31, 0x6F	; 111
    18ba:	3f 2e       	mov	r3, r31
    18bc:	97 ff       	sbrs	r25, 7
    18be:	09 c0       	rjmp	.+18     	; 0x18d2 <vfprintf+0x212>
    18c0:	90 95       	com	r25
    18c2:	80 95       	com	r24
    18c4:	70 95       	com	r23
    18c6:	61 95       	neg	r22
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	8f 4f       	sbci	r24, 0xFF	; 255
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	f0 68       	ori	r31, 0x80	; 128
    18d0:	3f 2e       	mov	r3, r31
    18d2:	2a e0       	ldi	r18, 0x0A	; 10
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	a3 01       	movw	r20, r6
    18d8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__ultoa_invert>
    18dc:	88 2e       	mov	r8, r24
    18de:	86 18       	sub	r8, r6
    18e0:	45 c0       	rjmp	.+138    	; 0x196c <vfprintf+0x2ac>
    18e2:	85 37       	cpi	r24, 0x75	; 117
    18e4:	31 f4       	brne	.+12     	; 0x18f2 <vfprintf+0x232>
    18e6:	23 2d       	mov	r18, r3
    18e8:	2f 7e       	andi	r18, 0xEF	; 239
    18ea:	b2 2e       	mov	r11, r18
    18ec:	2a e0       	ldi	r18, 0x0A	; 10
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	25 c0       	rjmp	.+74     	; 0x193c <vfprintf+0x27c>
    18f2:	93 2d       	mov	r25, r3
    18f4:	99 7f       	andi	r25, 0xF9	; 249
    18f6:	b9 2e       	mov	r11, r25
    18f8:	8f 36       	cpi	r24, 0x6F	; 111
    18fa:	c1 f0       	breq	.+48     	; 0x192c <vfprintf+0x26c>
    18fc:	18 f4       	brcc	.+6      	; 0x1904 <vfprintf+0x244>
    18fe:	88 35       	cpi	r24, 0x58	; 88
    1900:	79 f0       	breq	.+30     	; 0x1920 <vfprintf+0x260>
    1902:	b5 c0       	rjmp	.+362    	; 0x1a6e <vfprintf+0x3ae>
    1904:	80 37       	cpi	r24, 0x70	; 112
    1906:	19 f0       	breq	.+6      	; 0x190e <vfprintf+0x24e>
    1908:	88 37       	cpi	r24, 0x78	; 120
    190a:	21 f0       	breq	.+8      	; 0x1914 <vfprintf+0x254>
    190c:	b0 c0       	rjmp	.+352    	; 0x1a6e <vfprintf+0x3ae>
    190e:	e9 2f       	mov	r30, r25
    1910:	e0 61       	ori	r30, 0x10	; 16
    1912:	be 2e       	mov	r11, r30
    1914:	b4 fe       	sbrs	r11, 4
    1916:	0d c0       	rjmp	.+26     	; 0x1932 <vfprintf+0x272>
    1918:	fb 2d       	mov	r31, r11
    191a:	f4 60       	ori	r31, 0x04	; 4
    191c:	bf 2e       	mov	r11, r31
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <vfprintf+0x272>
    1920:	34 fe       	sbrs	r3, 4
    1922:	0a c0       	rjmp	.+20     	; 0x1938 <vfprintf+0x278>
    1924:	29 2f       	mov	r18, r25
    1926:	26 60       	ori	r18, 0x06	; 6
    1928:	b2 2e       	mov	r11, r18
    192a:	06 c0       	rjmp	.+12     	; 0x1938 <vfprintf+0x278>
    192c:	28 e0       	ldi	r18, 0x08	; 8
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	05 c0       	rjmp	.+10     	; 0x193c <vfprintf+0x27c>
    1932:	20 e1       	ldi	r18, 0x10	; 16
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	02 c0       	rjmp	.+4      	; 0x193c <vfprintf+0x27c>
    1938:	20 e1       	ldi	r18, 0x10	; 16
    193a:	32 e0       	ldi	r19, 0x02	; 2
    193c:	f8 01       	movw	r30, r16
    193e:	b7 fe       	sbrs	r11, 7
    1940:	07 c0       	rjmp	.+14     	; 0x1950 <vfprintf+0x290>
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	0c 5f       	subi	r16, 0xFC	; 252
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	06 c0       	rjmp	.+12     	; 0x195c <vfprintf+0x29c>
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 5f       	subi	r16, 0xFE	; 254
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	a3 01       	movw	r20, r6
    195e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__ultoa_invert>
    1962:	88 2e       	mov	r8, r24
    1964:	86 18       	sub	r8, r6
    1966:	fb 2d       	mov	r31, r11
    1968:	ff 77       	andi	r31, 0x7F	; 127
    196a:	3f 2e       	mov	r3, r31
    196c:	36 fe       	sbrs	r3, 6
    196e:	0d c0       	rjmp	.+26     	; 0x198a <vfprintf+0x2ca>
    1970:	23 2d       	mov	r18, r3
    1972:	2e 7f       	andi	r18, 0xFE	; 254
    1974:	a2 2e       	mov	r10, r18
    1976:	89 14       	cp	r8, r9
    1978:	58 f4       	brcc	.+22     	; 0x1990 <vfprintf+0x2d0>
    197a:	34 fe       	sbrs	r3, 4
    197c:	0b c0       	rjmp	.+22     	; 0x1994 <vfprintf+0x2d4>
    197e:	32 fc       	sbrc	r3, 2
    1980:	09 c0       	rjmp	.+18     	; 0x1994 <vfprintf+0x2d4>
    1982:	83 2d       	mov	r24, r3
    1984:	8e 7e       	andi	r24, 0xEE	; 238
    1986:	a8 2e       	mov	r10, r24
    1988:	05 c0       	rjmp	.+10     	; 0x1994 <vfprintf+0x2d4>
    198a:	b8 2c       	mov	r11, r8
    198c:	a3 2c       	mov	r10, r3
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <vfprintf+0x2d6>
    1990:	b8 2c       	mov	r11, r8
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <vfprintf+0x2d6>
    1994:	b9 2c       	mov	r11, r9
    1996:	a4 fe       	sbrs	r10, 4
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <vfprintf+0x2f8>
    199a:	fe 01       	movw	r30, r28
    199c:	e8 0d       	add	r30, r8
    199e:	f1 1d       	adc	r31, r1
    19a0:	80 81       	ld	r24, Z
    19a2:	80 33       	cpi	r24, 0x30	; 48
    19a4:	21 f4       	brne	.+8      	; 0x19ae <vfprintf+0x2ee>
    19a6:	9a 2d       	mov	r25, r10
    19a8:	99 7e       	andi	r25, 0xE9	; 233
    19aa:	a9 2e       	mov	r10, r25
    19ac:	09 c0       	rjmp	.+18     	; 0x19c0 <vfprintf+0x300>
    19ae:	a2 fe       	sbrs	r10, 2
    19b0:	06 c0       	rjmp	.+12     	; 0x19be <vfprintf+0x2fe>
    19b2:	b3 94       	inc	r11
    19b4:	b3 94       	inc	r11
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <vfprintf+0x300>
    19b8:	8a 2d       	mov	r24, r10
    19ba:	86 78       	andi	r24, 0x86	; 134
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <vfprintf+0x300>
    19be:	b3 94       	inc	r11
    19c0:	a3 fc       	sbrc	r10, 3
    19c2:	11 c0       	rjmp	.+34     	; 0x19e6 <vfprintf+0x326>
    19c4:	a0 fe       	sbrs	r10, 0
    19c6:	06 c0       	rjmp	.+12     	; 0x19d4 <vfprintf+0x314>
    19c8:	b2 14       	cp	r11, r2
    19ca:	88 f4       	brcc	.+34     	; 0x19ee <vfprintf+0x32e>
    19cc:	28 0c       	add	r2, r8
    19ce:	92 2c       	mov	r9, r2
    19d0:	9b 18       	sub	r9, r11
    19d2:	0e c0       	rjmp	.+28     	; 0x19f0 <vfprintf+0x330>
    19d4:	b2 14       	cp	r11, r2
    19d6:	60 f4       	brcc	.+24     	; 0x19f0 <vfprintf+0x330>
    19d8:	b6 01       	movw	r22, r12
    19da:	80 e2       	ldi	r24, 0x20	; 32
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    19e2:	b3 94       	inc	r11
    19e4:	f7 cf       	rjmp	.-18     	; 0x19d4 <vfprintf+0x314>
    19e6:	b2 14       	cp	r11, r2
    19e8:	18 f4       	brcc	.+6      	; 0x19f0 <vfprintf+0x330>
    19ea:	2b 18       	sub	r2, r11
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <vfprintf+0x332>
    19ee:	98 2c       	mov	r9, r8
    19f0:	21 2c       	mov	r2, r1
    19f2:	a4 fe       	sbrs	r10, 4
    19f4:	10 c0       	rjmp	.+32     	; 0x1a16 <vfprintf+0x356>
    19f6:	b6 01       	movw	r22, r12
    19f8:	80 e3       	ldi	r24, 0x30	; 48
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1a00:	a2 fe       	sbrs	r10, 2
    1a02:	17 c0       	rjmp	.+46     	; 0x1a32 <vfprintf+0x372>
    1a04:	a1 fc       	sbrc	r10, 1
    1a06:	03 c0       	rjmp	.+6      	; 0x1a0e <vfprintf+0x34e>
    1a08:	88 e7       	ldi	r24, 0x78	; 120
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <vfprintf+0x352>
    1a0e:	88 e5       	ldi	r24, 0x58	; 88
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	b6 01       	movw	r22, r12
    1a14:	0c c0       	rjmp	.+24     	; 0x1a2e <vfprintf+0x36e>
    1a16:	8a 2d       	mov	r24, r10
    1a18:	86 78       	andi	r24, 0x86	; 134
    1a1a:	59 f0       	breq	.+22     	; 0x1a32 <vfprintf+0x372>
    1a1c:	a1 fe       	sbrs	r10, 1
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <vfprintf+0x364>
    1a20:	8b e2       	ldi	r24, 0x2B	; 43
    1a22:	01 c0       	rjmp	.+2      	; 0x1a26 <vfprintf+0x366>
    1a24:	80 e2       	ldi	r24, 0x20	; 32
    1a26:	a7 fc       	sbrc	r10, 7
    1a28:	8d e2       	ldi	r24, 0x2D	; 45
    1a2a:	b6 01       	movw	r22, r12
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1a32:	89 14       	cp	r8, r9
    1a34:	38 f4       	brcc	.+14     	; 0x1a44 <vfprintf+0x384>
    1a36:	b6 01       	movw	r22, r12
    1a38:	80 e3       	ldi	r24, 0x30	; 48
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1a40:	9a 94       	dec	r9
    1a42:	f7 cf       	rjmp	.-18     	; 0x1a32 <vfprintf+0x372>
    1a44:	8a 94       	dec	r8
    1a46:	f3 01       	movw	r30, r6
    1a48:	e8 0d       	add	r30, r8
    1a4a:	f1 1d       	adc	r31, r1
    1a4c:	80 81       	ld	r24, Z
    1a4e:	b6 01       	movw	r22, r12
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1a56:	81 10       	cpse	r8, r1
    1a58:	f5 cf       	rjmp	.-22     	; 0x1a44 <vfprintf+0x384>
    1a5a:	22 20       	and	r2, r2
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <vfprintf+0x3a0>
    1a5e:	42 ce       	rjmp	.-892    	; 0x16e4 <vfprintf+0x24>
    1a60:	b6 01       	movw	r22, r12
    1a62:	80 e2       	ldi	r24, 0x20	; 32
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1a6a:	2a 94       	dec	r2
    1a6c:	f6 cf       	rjmp	.-20     	; 0x1a5a <vfprintf+0x39a>
    1a6e:	f6 01       	movw	r30, r12
    1a70:	86 81       	ldd	r24, Z+6	; 0x06
    1a72:	97 81       	ldd	r25, Z+7	; 0x07
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <vfprintf+0x3ba>
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	9f ef       	ldi	r25, 0xFF	; 255
    1a7a:	2b 96       	adiw	r28, 0x0b	; 11
    1a7c:	e2 e1       	ldi	r30, 0x12	; 18
    1a7e:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__epilogue_restores__>

00001a82 <strnlen_P>:
    1a82:	fc 01       	movw	r30, r24
    1a84:	05 90       	lpm	r0, Z+
    1a86:	61 50       	subi	r22, 0x01	; 1
    1a88:	70 40       	sbci	r23, 0x00	; 0
    1a8a:	01 10       	cpse	r0, r1
    1a8c:	d8 f7       	brcc	.-10     	; 0x1a84 <strnlen_P+0x2>
    1a8e:	80 95       	com	r24
    1a90:	90 95       	com	r25
    1a92:	8e 0f       	add	r24, r30
    1a94:	9f 1f       	adc	r25, r31
    1a96:	08 95       	ret

00001a98 <strnlen>:
    1a98:	fc 01       	movw	r30, r24
    1a9a:	61 50       	subi	r22, 0x01	; 1
    1a9c:	70 40       	sbci	r23, 0x00	; 0
    1a9e:	01 90       	ld	r0, Z+
    1aa0:	01 10       	cpse	r0, r1
    1aa2:	d8 f7       	brcc	.-10     	; 0x1a9a <strnlen+0x2>
    1aa4:	80 95       	com	r24
    1aa6:	90 95       	com	r25
    1aa8:	8e 0f       	add	r24, r30
    1aaa:	9f 1f       	adc	r25, r31
    1aac:	08 95       	ret

00001aae <fputc>:
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	fb 01       	movw	r30, r22
    1ab8:	23 81       	ldd	r18, Z+3	; 0x03
    1aba:	21 fd       	sbrc	r18, 1
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <fputc+0x16>
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	9f ef       	ldi	r25, 0xFF	; 255
    1ac2:	2c c0       	rjmp	.+88     	; 0x1b1c <fputc+0x6e>
    1ac4:	22 ff       	sbrs	r18, 2
    1ac6:	16 c0       	rjmp	.+44     	; 0x1af4 <fputc+0x46>
    1ac8:	46 81       	ldd	r20, Z+6	; 0x06
    1aca:	57 81       	ldd	r21, Z+7	; 0x07
    1acc:	24 81       	ldd	r18, Z+4	; 0x04
    1ace:	35 81       	ldd	r19, Z+5	; 0x05
    1ad0:	42 17       	cp	r20, r18
    1ad2:	53 07       	cpc	r21, r19
    1ad4:	44 f4       	brge	.+16     	; 0x1ae6 <fputc+0x38>
    1ad6:	a0 81       	ld	r26, Z
    1ad8:	b1 81       	ldd	r27, Z+1	; 0x01
    1ada:	9d 01       	movw	r18, r26
    1adc:	2f 5f       	subi	r18, 0xFF	; 255
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	31 83       	std	Z+1, r19	; 0x01
    1ae2:	20 83       	st	Z, r18
    1ae4:	8c 93       	st	X, r24
    1ae6:	26 81       	ldd	r18, Z+6	; 0x06
    1ae8:	37 81       	ldd	r19, Z+7	; 0x07
    1aea:	2f 5f       	subi	r18, 0xFF	; 255
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
    1aee:	37 83       	std	Z+7, r19	; 0x07
    1af0:	26 83       	std	Z+6, r18	; 0x06
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <fputc+0x6e>
    1af4:	8b 01       	movw	r16, r22
    1af6:	ec 01       	movw	r28, r24
    1af8:	fb 01       	movw	r30, r22
    1afa:	00 84       	ldd	r0, Z+8	; 0x08
    1afc:	f1 85       	ldd	r31, Z+9	; 0x09
    1afe:	e0 2d       	mov	r30, r0
    1b00:	09 95       	icall
    1b02:	89 2b       	or	r24, r25
    1b04:	e1 f6       	brne	.-72     	; 0x1abe <fputc+0x10>
    1b06:	d8 01       	movw	r26, r16
    1b08:	16 96       	adiw	r26, 0x06	; 6
    1b0a:	8d 91       	ld	r24, X+
    1b0c:	9c 91       	ld	r25, X
    1b0e:	17 97       	sbiw	r26, 0x07	; 7
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	17 96       	adiw	r26, 0x07	; 7
    1b14:	9c 93       	st	X, r25
    1b16:	8e 93       	st	-X, r24
    1b18:	16 97       	sbiw	r26, 0x06	; 6
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	08 95       	ret

00001b26 <__ultoa_invert>:
    1b26:	fa 01       	movw	r30, r20
    1b28:	aa 27       	eor	r26, r26
    1b2a:	28 30       	cpi	r18, 0x08	; 8
    1b2c:	51 f1       	breq	.+84     	; 0x1b82 <__ultoa_invert+0x5c>
    1b2e:	20 31       	cpi	r18, 0x10	; 16
    1b30:	81 f1       	breq	.+96     	; 0x1b92 <__ultoa_invert+0x6c>
    1b32:	e8 94       	clt
    1b34:	6f 93       	push	r22
    1b36:	6e 7f       	andi	r22, 0xFE	; 254
    1b38:	6e 5f       	subi	r22, 0xFE	; 254
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	af 4f       	sbci	r26, 0xFF	; 255
    1b42:	b1 e0       	ldi	r27, 0x01	; 1
    1b44:	3e d0       	rcall	.+124    	; 0x1bc2 <__ultoa_invert+0x9c>
    1b46:	b4 e0       	ldi	r27, 0x04	; 4
    1b48:	3c d0       	rcall	.+120    	; 0x1bc2 <__ultoa_invert+0x9c>
    1b4a:	67 0f       	add	r22, r23
    1b4c:	78 1f       	adc	r23, r24
    1b4e:	89 1f       	adc	r24, r25
    1b50:	9a 1f       	adc	r25, r26
    1b52:	a1 1d       	adc	r26, r1
    1b54:	68 0f       	add	r22, r24
    1b56:	79 1f       	adc	r23, r25
    1b58:	8a 1f       	adc	r24, r26
    1b5a:	91 1d       	adc	r25, r1
    1b5c:	a1 1d       	adc	r26, r1
    1b5e:	6a 0f       	add	r22, r26
    1b60:	71 1d       	adc	r23, r1
    1b62:	81 1d       	adc	r24, r1
    1b64:	91 1d       	adc	r25, r1
    1b66:	a1 1d       	adc	r26, r1
    1b68:	20 d0       	rcall	.+64     	; 0x1baa <__ultoa_invert+0x84>
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <__ultoa_invert+0x48>
    1b6c:	68 94       	set
    1b6e:	3f 91       	pop	r19
    1b70:	2a e0       	ldi	r18, 0x0A	; 10
    1b72:	26 9f       	mul	r18, r22
    1b74:	11 24       	eor	r1, r1
    1b76:	30 19       	sub	r19, r0
    1b78:	30 5d       	subi	r19, 0xD0	; 208
    1b7a:	31 93       	st	Z+, r19
    1b7c:	de f6       	brtc	.-74     	; 0x1b34 <__ultoa_invert+0xe>
    1b7e:	cf 01       	movw	r24, r30
    1b80:	08 95       	ret
    1b82:	46 2f       	mov	r20, r22
    1b84:	47 70       	andi	r20, 0x07	; 7
    1b86:	40 5d       	subi	r20, 0xD0	; 208
    1b88:	41 93       	st	Z+, r20
    1b8a:	b3 e0       	ldi	r27, 0x03	; 3
    1b8c:	0f d0       	rcall	.+30     	; 0x1bac <__ultoa_invert+0x86>
    1b8e:	c9 f7       	brne	.-14     	; 0x1b82 <__ultoa_invert+0x5c>
    1b90:	f6 cf       	rjmp	.-20     	; 0x1b7e <__ultoa_invert+0x58>
    1b92:	46 2f       	mov	r20, r22
    1b94:	4f 70       	andi	r20, 0x0F	; 15
    1b96:	40 5d       	subi	r20, 0xD0	; 208
    1b98:	4a 33       	cpi	r20, 0x3A	; 58
    1b9a:	18 f0       	brcs	.+6      	; 0x1ba2 <__ultoa_invert+0x7c>
    1b9c:	49 5d       	subi	r20, 0xD9	; 217
    1b9e:	31 fd       	sbrc	r19, 1
    1ba0:	40 52       	subi	r20, 0x20	; 32
    1ba2:	41 93       	st	Z+, r20
    1ba4:	02 d0       	rcall	.+4      	; 0x1baa <__ultoa_invert+0x84>
    1ba6:	a9 f7       	brne	.-22     	; 0x1b92 <__ultoa_invert+0x6c>
    1ba8:	ea cf       	rjmp	.-44     	; 0x1b7e <__ultoa_invert+0x58>
    1baa:	b4 e0       	ldi	r27, 0x04	; 4
    1bac:	a6 95       	lsr	r26
    1bae:	97 95       	ror	r25
    1bb0:	87 95       	ror	r24
    1bb2:	77 95       	ror	r23
    1bb4:	67 95       	ror	r22
    1bb6:	ba 95       	dec	r27
    1bb8:	c9 f7       	brne	.-14     	; 0x1bac <__ultoa_invert+0x86>
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	61 05       	cpc	r22, r1
    1bbe:	71 05       	cpc	r23, r1
    1bc0:	08 95       	ret
    1bc2:	9b 01       	movw	r18, r22
    1bc4:	ac 01       	movw	r20, r24
    1bc6:	0a 2e       	mov	r0, r26
    1bc8:	06 94       	lsr	r0
    1bca:	57 95       	ror	r21
    1bcc:	47 95       	ror	r20
    1bce:	37 95       	ror	r19
    1bd0:	27 95       	ror	r18
    1bd2:	ba 95       	dec	r27
    1bd4:	c9 f7       	brne	.-14     	; 0x1bc8 <__ultoa_invert+0xa2>
    1bd6:	62 0f       	add	r22, r18
    1bd8:	73 1f       	adc	r23, r19
    1bda:	84 1f       	adc	r24, r20
    1bdc:	95 1f       	adc	r25, r21
    1bde:	a0 1d       	adc	r26, r0
    1be0:	08 95       	ret

00001be2 <__prologue_saves__>:
    1be2:	2f 92       	push	r2
    1be4:	3f 92       	push	r3
    1be6:	4f 92       	push	r4
    1be8:	5f 92       	push	r5
    1bea:	6f 92       	push	r6
    1bec:	7f 92       	push	r7
    1bee:	8f 92       	push	r8
    1bf0:	9f 92       	push	r9
    1bf2:	af 92       	push	r10
    1bf4:	bf 92       	push	r11
    1bf6:	cf 92       	push	r12
    1bf8:	df 92       	push	r13
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	ca 1b       	sub	r28, r26
    1c0c:	db 0b       	sbc	r29, r27
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	09 94       	ijmp

00001c1a <__epilogue_restores__>:
    1c1a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c1c:	39 88       	ldd	r3, Y+17	; 0x11
    1c1e:	48 88       	ldd	r4, Y+16	; 0x10
    1c20:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c22:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c24:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c26:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c28:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c2c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c2e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c30:	df 80       	ldd	r13, Y+7	; 0x07
    1c32:	ee 80       	ldd	r14, Y+6	; 0x06
    1c34:	fd 80       	ldd	r15, Y+5	; 0x05
    1c36:	0c 81       	ldd	r16, Y+4	; 0x04
    1c38:	1b 81       	ldd	r17, Y+3	; 0x03
    1c3a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c3c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c3e:	ce 0f       	add	r28, r30
    1c40:	d1 1d       	adc	r29, r1
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	ed 01       	movw	r28, r26
    1c4e:	08 95       	ret

00001c50 <_exit>:
    1c50:	f8 94       	cli

00001c52 <__stop_program>:
    1c52:	ff cf       	rjmp	.-2      	; 0x1c52 <__stop_program>
