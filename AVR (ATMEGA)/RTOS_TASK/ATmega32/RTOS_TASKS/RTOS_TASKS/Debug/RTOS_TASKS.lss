
RTOS_TASKS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001706  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00001706  0000179a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000065b  008000c8  008000c8  00001802  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000314c  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc3  00000000  00000000  00004cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f81  00000000  00000000  00005a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000980  00000000  00000000  00007a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001332  00000000  00000000  00008384  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b4f  00000000  00000000  000096b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000c205  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 32       	cpi	r26, 0x23	; 35
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 07 	call	0xf86	; 0xf86 <main>
      8a:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
      92:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      94:	03 96       	adiw	r24, 0x03	; 3
      96:	92 83       	std	Z+2, r25	; 0x02
      98:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
      9a:	2f ef       	ldi	r18, 0xFF	; 255
      9c:	3f ef       	ldi	r19, 0xFF	; 255
      9e:	34 83       	std	Z+4, r19	; 0x04
      a0:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      a2:	96 83       	std	Z+6, r25	; 0x06
      a4:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      a6:	90 87       	std	Z+8, r25	; 0x08
      a8:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
      aa:	10 82       	st	Z, r1
      ac:	08 95       	ret

000000ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
      ae:	fc 01       	movw	r30, r24
      b0:	11 86       	std	Z+9, r1	; 0x09
      b2:	10 86       	std	Z+8, r1	; 0x08
      b4:	08 95       	ret

000000b6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	9c 01       	movw	r18, r24
      bc:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
      be:	dc 01       	movw	r26, r24
      c0:	11 96       	adiw	r26, 0x01	; 1
      c2:	cd 91       	ld	r28, X+
      c4:	dc 91       	ld	r29, X
      c6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
      c8:	d3 83       	std	Z+3, r29	; 0x03
      ca:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
      cc:	8c 81       	ldd	r24, Y+4	; 0x04
      ce:	9d 81       	ldd	r25, Y+5	; 0x05
      d0:	95 83       	std	Z+5, r25	; 0x05
      d2:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
      d4:	8c 81       	ldd	r24, Y+4	; 0x04
      d6:	9d 81       	ldd	r25, Y+5	; 0x05
      d8:	dc 01       	movw	r26, r24
      da:	13 96       	adiw	r26, 0x03	; 3
      dc:	7c 93       	st	X, r23
      de:	6e 93       	st	-X, r22
      e0:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
      e2:	7d 83       	std	Y+5, r23	; 0x05
      e4:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
      e6:	31 87       	std	Z+9, r19	; 0x09
      e8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
      ea:	f9 01       	movw	r30, r18
      ec:	80 81       	ld	r24, Z
      ee:	8f 5f       	subi	r24, 0xFF	; 255
      f0:	80 83       	st	Z, r24
}
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
      fe:	48 81       	ld	r20, Y
     100:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     102:	4f 3f       	cpi	r20, 0xFF	; 255
     104:	2f ef       	ldi	r18, 0xFF	; 255
     106:	52 07       	cpc	r21, r18
     108:	21 f4       	brne	.+8      	; 0x112 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     10a:	fc 01       	movw	r30, r24
     10c:	a7 81       	ldd	r26, Z+7	; 0x07
     10e:	b0 85       	ldd	r27, Z+8	; 0x08
     110:	0d c0       	rjmp	.+26     	; 0x12c <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     112:	dc 01       	movw	r26, r24
     114:	13 96       	adiw	r26, 0x03	; 3
     116:	01 c0       	rjmp	.+2      	; 0x11a <vListInsert+0x22>
     118:	df 01       	movw	r26, r30
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	ed 91       	ld	r30, X+
     11e:	fc 91       	ld	r31, X
     120:	13 97       	sbiw	r26, 0x03	; 3
     122:	20 81       	ld	r18, Z
     124:	31 81       	ldd	r19, Z+1	; 0x01
     126:	42 17       	cp	r20, r18
     128:	53 07       	cpc	r21, r19
     12a:	b0 f7       	brcc	.-20     	; 0x118 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     12c:	12 96       	adiw	r26, 0x02	; 2
     12e:	ed 91       	ld	r30, X+
     130:	fc 91       	ld	r31, X
     132:	13 97       	sbiw	r26, 0x03	; 3
     134:	fb 83       	std	Y+3, r31	; 0x03
     136:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     138:	d5 83       	std	Z+5, r29	; 0x05
     13a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     13c:	bd 83       	std	Y+5, r27	; 0x05
     13e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     140:	13 96       	adiw	r26, 0x03	; 3
     142:	dc 93       	st	X, r29
     144:	ce 93       	st	-X, r28
     146:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     148:	99 87       	std	Y+9, r25	; 0x09
     14a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     14c:	fc 01       	movw	r30, r24
     14e:	20 81       	ld	r18, Z
     150:	2f 5f       	subi	r18, 0xFF	; 255
     152:	20 83       	st	Z, r18
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     160:	a0 85       	ldd	r26, Z+8	; 0x08
     162:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     164:	c2 81       	ldd	r28, Z+2	; 0x02
     166:	d3 81       	ldd	r29, Z+3	; 0x03
     168:	84 81       	ldd	r24, Z+4	; 0x04
     16a:	95 81       	ldd	r25, Z+5	; 0x05
     16c:	9d 83       	std	Y+5, r25	; 0x05
     16e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     170:	c4 81       	ldd	r28, Z+4	; 0x04
     172:	d5 81       	ldd	r29, Z+5	; 0x05
     174:	82 81       	ldd	r24, Z+2	; 0x02
     176:	93 81       	ldd	r25, Z+3	; 0x03
     178:	9b 83       	std	Y+3, r25	; 0x03
     17a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     17c:	11 96       	adiw	r26, 0x01	; 1
     17e:	8d 91       	ld	r24, X+
     180:	9c 91       	ld	r25, X
     182:	12 97       	sbiw	r26, 0x02	; 2
     184:	e8 17       	cp	r30, r24
     186:	f9 07       	cpc	r31, r25
     188:	31 f4       	brne	.+12     	; 0x196 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     18a:	84 81       	ldd	r24, Z+4	; 0x04
     18c:	95 81       	ldd	r25, Z+5	; 0x05
     18e:	12 96       	adiw	r26, 0x02	; 2
     190:	9c 93       	st	X, r25
     192:	8e 93       	st	-X, r24
     194:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     196:	11 86       	std	Z+9, r1	; 0x09
     198:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     19a:	8c 91       	ld	r24, X
     19c:	81 50       	subi	r24, 0x01	; 1
     19e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1a0:	8c 91       	ld	r24, X
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <prvSetupTimerInterrupt>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
     1a8:	1b bc       	out	0x2b, r1	; 43
     1aa:	8c e7       	ldi	r24, 0x7C	; 124
     1ac:	8a bd       	out	0x2a, r24	; 42
     1ae:	8b e0       	ldi	r24, 0x0B	; 11
     1b0:	8e bd       	out	0x2e, r24	; 46
     1b2:	89 b7       	in	r24, 0x39	; 57
     1b4:	80 61       	ori	r24, 0x10	; 16
     1b6:	89 bf       	out	0x39, r24	; 57
     1b8:	08 95       	ret

000001ba <pxPortInitialiseStack>:
     1ba:	31 e1       	ldi	r19, 0x11	; 17
     1bc:	fc 01       	movw	r30, r24
     1be:	30 83       	st	Z, r19
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	22 e2       	ldi	r18, 0x22	; 34
     1c4:	20 83       	st	Z, r18
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	a3 e3       	ldi	r26, 0x33	; 51
     1ca:	a0 83       	st	Z, r26
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	60 83       	st	Z, r22
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	70 83       	st	Z, r23
     1d4:	31 97       	sbiw	r30, 0x01	; 1
     1d6:	10 82       	st	Z, r1
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	60 e8       	ldi	r22, 0x80	; 128
     1dc:	60 83       	st	Z, r22
     1de:	31 97       	sbiw	r30, 0x01	; 1
     1e0:	10 82       	st	Z, r1
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	62 e0       	ldi	r22, 0x02	; 2
     1e6:	60 83       	st	Z, r22
     1e8:	31 97       	sbiw	r30, 0x01	; 1
     1ea:	63 e0       	ldi	r22, 0x03	; 3
     1ec:	60 83       	st	Z, r22
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	64 e0       	ldi	r22, 0x04	; 4
     1f2:	60 83       	st	Z, r22
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	65 e0       	ldi	r22, 0x05	; 5
     1f8:	60 83       	st	Z, r22
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	66 e0       	ldi	r22, 0x06	; 6
     1fe:	60 83       	st	Z, r22
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	67 e0       	ldi	r22, 0x07	; 7
     204:	60 83       	st	Z, r22
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	68 e0       	ldi	r22, 0x08	; 8
     20a:	60 83       	st	Z, r22
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	69 e0       	ldi	r22, 0x09	; 9
     210:	60 83       	st	Z, r22
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	60 e1       	ldi	r22, 0x10	; 16
     216:	60 83       	st	Z, r22
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	30 83       	st	Z, r19
     21c:	31 97       	sbiw	r30, 0x01	; 1
     21e:	32 e1       	ldi	r19, 0x12	; 18
     220:	30 83       	st	Z, r19
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	33 e1       	ldi	r19, 0x13	; 19
     226:	30 83       	st	Z, r19
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	34 e1       	ldi	r19, 0x14	; 20
     22c:	30 83       	st	Z, r19
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	35 e1       	ldi	r19, 0x15	; 21
     232:	30 83       	st	Z, r19
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	36 e1       	ldi	r19, 0x16	; 22
     238:	30 83       	st	Z, r19
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	37 e1       	ldi	r19, 0x17	; 23
     23e:	30 83       	st	Z, r19
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	38 e1       	ldi	r19, 0x18	; 24
     244:	30 83       	st	Z, r19
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	39 e1       	ldi	r19, 0x19	; 25
     24a:	30 83       	st	Z, r19
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	30 e2       	ldi	r19, 0x20	; 32
     250:	30 83       	st	Z, r19
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	31 e2       	ldi	r19, 0x21	; 33
     256:	30 83       	st	Z, r19
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	20 83       	st	Z, r18
     25c:	31 97       	sbiw	r30, 0x01	; 1
     25e:	23 e2       	ldi	r18, 0x23	; 35
     260:	20 83       	st	Z, r18
     262:	31 97       	sbiw	r30, 0x01	; 1
     264:	40 83       	st	Z, r20
     266:	31 97       	sbiw	r30, 0x01	; 1
     268:	50 83       	st	Z, r21
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	26 e2       	ldi	r18, 0x26	; 38
     26e:	20 83       	st	Z, r18
     270:	31 97       	sbiw	r30, 0x01	; 1
     272:	27 e2       	ldi	r18, 0x27	; 39
     274:	20 83       	st	Z, r18
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	28 e2       	ldi	r18, 0x28	; 40
     27a:	20 83       	st	Z, r18
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	29 e2       	ldi	r18, 0x29	; 41
     280:	20 83       	st	Z, r18
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	20 e3       	ldi	r18, 0x30	; 48
     286:	20 83       	st	Z, r18
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	21 e3       	ldi	r18, 0x31	; 49
     28c:	20 83       	st	Z, r18
     28e:	86 97       	sbiw	r24, 0x26	; 38
     290:	08 95       	ret

00000292 <xPortStartScheduler>:
     292:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <prvSetupTimerInterrupt>
     296:	a0 91 19 07 	lds	r26, 0x0719	; 0x800719 <pxCurrentTCB>
     29a:	b0 91 1a 07 	lds	r27, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     29e:	cd 91       	ld	r28, X+
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	dd 91       	ld	r29, X+
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	bf 91       	pop	r27
     2b0:	af 91       	pop	r26
     2b2:	9f 91       	pop	r25
     2b4:	8f 91       	pop	r24
     2b6:	7f 91       	pop	r23
     2b8:	6f 91       	pop	r22
     2ba:	5f 91       	pop	r21
     2bc:	4f 91       	pop	r20
     2be:	3f 91       	pop	r19
     2c0:	2f 91       	pop	r18
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	9f 90       	pop	r9
     2d4:	8f 90       	pop	r8
     2d6:	7f 90       	pop	r7
     2d8:	6f 90       	pop	r6
     2da:	5f 90       	pop	r5
     2dc:	4f 90       	pop	r4
     2de:	3f 90       	pop	r3
     2e0:	2f 90       	pop	r2
     2e2:	1f 90       	pop	r1
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	08 95       	ret
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	08 95       	ret

000002f0 <vPortYield>:
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	0f 92       	push	r0
     2f8:	1f 92       	push	r1
     2fa:	11 24       	eor	r1, r1
     2fc:	2f 92       	push	r2
     2fe:	3f 92       	push	r3
     300:	4f 92       	push	r4
     302:	5f 92       	push	r5
     304:	6f 92       	push	r6
     306:	7f 92       	push	r7
     308:	8f 92       	push	r8
     30a:	9f 92       	push	r9
     30c:	af 92       	push	r10
     30e:	bf 92       	push	r11
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	2f 93       	push	r18
     31e:	3f 93       	push	r19
     320:	4f 93       	push	r20
     322:	5f 93       	push	r21
     324:	6f 93       	push	r22
     326:	7f 93       	push	r23
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	af 93       	push	r26
     32e:	bf 93       	push	r27
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ef 93       	push	r30
     336:	ff 93       	push	r31
     338:	a0 91 19 07 	lds	r26, 0x0719	; 0x800719 <pxCurrentTCB>
     33c:	b0 91 1a 07 	lds	r27, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     340:	0d b6       	in	r0, 0x3d	; 61
     342:	0d 92       	st	X+, r0
     344:	0e b6       	in	r0, 0x3e	; 62
     346:	0d 92       	st	X+, r0
     348:	0e 94 12 07 	call	0xe24	; 0xe24 <vTaskSwitchContext>
     34c:	a0 91 19 07 	lds	r26, 0x0719	; 0x800719 <pxCurrentTCB>
     350:	b0 91 1a 07 	lds	r27, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     354:	cd 91       	ld	r28, X+
     356:	cd bf       	out	0x3d, r28	; 61
     358:	dd 91       	ld	r29, X+
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	ff 91       	pop	r31
     35e:	ef 91       	pop	r30
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	bf 91       	pop	r27
     366:	af 91       	pop	r26
     368:	9f 91       	pop	r25
     36a:	8f 91       	pop	r24
     36c:	7f 91       	pop	r23
     36e:	6f 91       	pop	r22
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	bf 90       	pop	r11
     386:	af 90       	pop	r10
     388:	9f 90       	pop	r9
     38a:	8f 90       	pop	r8
     38c:	7f 90       	pop	r7
     38e:	6f 90       	pop	r6
     390:	5f 90       	pop	r5
     392:	4f 90       	pop	r4
     394:	3f 90       	pop	r3
     396:	2f 90       	pop	r2
     398:	1f 90       	pop	r1
     39a:	0f 90       	pop	r0
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	0f 90       	pop	r0
     3a0:	08 95       	ret

000003a2 <__vector_7>:
	 * tick count.  We don't need to switch context, this can only be done by
	 * manual calls to taskYIELD();
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
	void TIMER1_COMPA_vect( void )
	{
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
		xTaskIncrementTick();
     3c4:	0e 94 00 06 	call	0xc00	; 0xc00 <xTaskIncrementTick>
	}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	bf 91       	pop	r27
     3ce:	af 91       	pop	r26
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	7f 91       	pop	r23
     3d6:	6f 91       	pop	r22
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     3ea:	e4 ed       	ldi	r30, 0xD4	; 212
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	a8 ed       	ldi	r26, 0xD8	; 216
     3f0:	b0 e0       	ldi	r27, 0x00	; 0
     3f2:	b1 83       	std	Z+1, r27	; 0x01
     3f4:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     3f6:	13 82       	std	Z+3, r1	; 0x03
     3f8:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     3fa:	e0 eb       	ldi	r30, 0xB0	; 176
     3fc:	f6 e0       	ldi	r31, 0x06	; 6
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     3fe:	f0 93 d3 00 	sts	0x00D3, r31	; 0x8000d3 <pxEnd+0x1>
     402:	e0 93 d2 00 	sts	0x00D2, r30	; 0x8000d2 <pxEnd>
    pxEnd->xBlockSize = 0;
     406:	13 82       	std	Z+3, r1	; 0x03
     408:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     40a:	11 82       	std	Z+1, r1	; 0x01
     40c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     40e:	88 ed       	ldi	r24, 0xD8	; 216
     410:	95 e0       	ldi	r25, 0x05	; 5
     412:	13 96       	adiw	r26, 0x03	; 3
     414:	9c 93       	st	X, r25
     416:	8e 93       	st	-X, r24
     418:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     41a:	ed 93       	st	X+, r30
     41c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     41e:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <xMinimumEverFreeBytesRemaining+0x1>
     422:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     426:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <xFreeBytesRemaining+0x1>
     42a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e8       	ldi	r25, 0x80	; 128
     432:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__data_end+0x1>
     436:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__data_end>
     43a:	08 95       	ret

0000043c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     442:	a4 ed       	ldi	r26, 0xD4	; 212
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	01 c0       	rjmp	.+2      	; 0x44a <prvInsertBlockIntoFreeList+0xe>
     448:	df 01       	movw	r26, r30
     44a:	ed 91       	ld	r30, X+
     44c:	fc 91       	ld	r31, X
     44e:	11 97       	sbiw	r26, 0x01	; 1
     450:	ec 17       	cp	r30, r28
     452:	fd 07       	cpc	r31, r29
     454:	c8 f3       	brcs	.-14     	; 0x448 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     456:	12 96       	adiw	r26, 0x02	; 2
     458:	8d 91       	ld	r24, X+
     45a:	9c 91       	ld	r25, X
     45c:	13 97       	sbiw	r26, 0x03	; 3
     45e:	9d 01       	movw	r18, r26
     460:	28 0f       	add	r18, r24
     462:	39 1f       	adc	r19, r25
     464:	c2 17       	cp	r28, r18
     466:	d3 07       	cpc	r29, r19
     468:	49 f4       	brne	.+18     	; 0x47c <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     46a:	2a 81       	ldd	r18, Y+2	; 0x02
     46c:	3b 81       	ldd	r19, Y+3	; 0x03
     46e:	82 0f       	add	r24, r18
     470:	93 1f       	adc	r25, r19
     472:	13 96       	adiw	r26, 0x03	; 3
     474:	9c 93       	st	X, r25
     476:	8e 93       	st	-X, r24
     478:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     47a:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	9b 81       	ldd	r25, Y+3	; 0x03
     480:	9e 01       	movw	r18, r28
     482:	28 0f       	add	r18, r24
     484:	39 1f       	adc	r19, r25
     486:	e2 17       	cp	r30, r18
     488:	f3 07       	cpc	r31, r19
     48a:	c1 f4       	brne	.+48     	; 0x4bc <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     48c:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <pxEnd>
     490:	30 91 d3 00 	lds	r19, 0x00D3	; 0x8000d3 <pxEnd+0x1>
     494:	e2 17       	cp	r30, r18
     496:	f3 07       	cpc	r31, r19
     498:	71 f0       	breq	.+28     	; 0x4b6 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     49a:	22 81       	ldd	r18, Z+2	; 0x02
     49c:	33 81       	ldd	r19, Z+3	; 0x03
     49e:	82 0f       	add	r24, r18
     4a0:	93 1f       	adc	r25, r19
     4a2:	9b 83       	std	Y+3, r25	; 0x03
     4a4:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     4a6:	ed 91       	ld	r30, X+
     4a8:	fc 91       	ld	r31, X
     4aa:	11 97       	sbiw	r26, 0x01	; 1
     4ac:	80 81       	ld	r24, Z
     4ae:	91 81       	ldd	r25, Z+1	; 0x01
     4b0:	99 83       	std	Y+1, r25	; 0x01
     4b2:	88 83       	st	Y, r24
     4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4b6:	39 83       	std	Y+1, r19	; 0x01
     4b8:	28 83       	st	Y, r18
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4bc:	f9 83       	std	Y+1, r31	; 0x01
     4be:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     4c0:	ca 17       	cp	r28, r26
     4c2:	db 07       	cpc	r29, r27
     4c4:	11 f0       	breq	.+4      	; 0x4ca <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4c6:	cd 93       	st	X+, r28
     4c8:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     4de:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     4e2:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <pxEnd>
     4e6:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <pxEnd+0x1>
     4ea:	89 2b       	or	r24, r25
     4ec:	11 f4       	brne	.+4      	; 0x4f2 <pvPortMalloc+0x22>
        {
            prvHeapInit();
     4ee:	0e 94 f5 01 	call	0x3ea	; 0x3ea <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     4f2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end>
     4f6:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__data_end+0x1>
     4fa:	80 23       	and	r24, r16
     4fc:	91 23       	and	r25, r17
     4fe:	89 2b       	or	r24, r25
     500:	09 f0       	breq	.+2      	; 0x504 <pvPortMalloc+0x34>
     502:	77 c0       	rjmp	.+238    	; 0x5f2 <pvPortMalloc+0x122>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     504:	01 15       	cp	r16, r1
     506:	11 05       	cpc	r17, r1
     508:	49 f0       	breq	.+18     	; 0x51c <pvPortMalloc+0x4c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     50a:	c8 01       	movw	r24, r16
     50c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     50e:	08 17       	cp	r16, r24
     510:	19 07       	cpc	r17, r25
     512:	18 f0       	brcs	.+6      	; 0x51a <pvPortMalloc+0x4a>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	10 e0       	ldi	r17, 0x00	; 0
     518:	01 c0       	rjmp	.+2      	; 0x51c <pvPortMalloc+0x4c>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     51a:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     51c:	01 15       	cp	r16, r1
     51e:	11 05       	cpc	r17, r1
     520:	09 f4       	brne	.+2      	; 0x524 <pvPortMalloc+0x54>
     522:	6a c0       	rjmp	.+212    	; 0x5f8 <pvPortMalloc+0x128>
     524:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <xFreeBytesRemaining>
     528:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <xFreeBytesRemaining+0x1>
     52c:	80 17       	cp	r24, r16
     52e:	91 07       	cpc	r25, r17
     530:	08 f4       	brcc	.+2      	; 0x534 <pvPortMalloc+0x64>
     532:	65 c0       	rjmp	.+202    	; 0x5fe <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     534:	c0 91 d4 00 	lds	r28, 0x00D4	; 0x8000d4 <xStart>
     538:	d0 91 d5 00 	lds	r29, 0x00D5	; 0x8000d5 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     53c:	e4 ed       	ldi	r30, 0xD4	; 212
     53e:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     540:	02 c0       	rjmp	.+4      	; 0x546 <pvPortMalloc+0x76>
                {
                    pxPreviousBlock = pxBlock;
     542:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     544:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	9b 81       	ldd	r25, Y+3	; 0x03
     54a:	80 17       	cp	r24, r16
     54c:	91 07       	cpc	r25, r17
     54e:	20 f4       	brcc	.+8      	; 0x558 <pvPortMalloc+0x88>
     550:	88 81       	ld	r24, Y
     552:	99 81       	ldd	r25, Y+1	; 0x01
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	a9 f7       	brne	.-22     	; 0x542 <pvPortMalloc+0x72>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     558:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <pxEnd>
     55c:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <pxEnd+0x1>
     560:	c8 17       	cp	r28, r24
     562:	d9 07       	cpc	r29, r25
     564:	09 f4       	brne	.+2      	; 0x568 <pvPortMalloc+0x98>
     566:	4e c0       	rjmp	.+156    	; 0x604 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     568:	e0 80       	ld	r14, Z
     56a:	f1 80       	ldd	r15, Z+1	; 0x01
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	e8 0e       	add	r14, r24
     570:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     572:	88 81       	ld	r24, Y
     574:	99 81       	ldd	r25, Y+1	; 0x01
     576:	91 83       	std	Z+1, r25	; 0x01
     578:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     57a:	2a 81       	ldd	r18, Y+2	; 0x02
     57c:	3b 81       	ldd	r19, Y+3	; 0x03
     57e:	20 1b       	sub	r18, r16
     580:	31 0b       	sbc	r19, r17
     582:	29 30       	cpi	r18, 0x09	; 9
     584:	31 05       	cpc	r19, r1
     586:	50 f0       	brcs	.+20     	; 0x59c <pvPortMalloc+0xcc>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     588:	ce 01       	movw	r24, r28
     58a:	80 0f       	add	r24, r16
     58c:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     58e:	fc 01       	movw	r30, r24
     590:	33 83       	std	Z+3, r19	; 0x03
     592:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     594:	1b 83       	std	Y+3, r17	; 0x03
     596:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     598:	0e 94 1e 02 	call	0x43c	; 0x43c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     59c:	2a 81       	ldd	r18, Y+2	; 0x02
     59e:	3b 81       	ldd	r19, Y+3	; 0x03
     5a0:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <xFreeBytesRemaining>
     5a4:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <xFreeBytesRemaining+0x1>
     5a8:	82 1b       	sub	r24, r18
     5aa:	93 0b       	sbc	r25, r19
     5ac:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <xFreeBytesRemaining+0x1>
     5b0:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5b4:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <xMinimumEverFreeBytesRemaining>
     5b8:	50 91 cf 00 	lds	r21, 0x00CF	; 0x8000cf <xMinimumEverFreeBytesRemaining+0x1>
     5bc:	84 17       	cp	r24, r20
     5be:	95 07       	cpc	r25, r21
     5c0:	20 f4       	brcc	.+8      	; 0x5ca <pvPortMalloc+0xfa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     5c2:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <xMinimumEverFreeBytesRemaining+0x1>
     5c6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     5ca:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end>
     5ce:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__data_end+0x1>
     5d2:	28 2b       	or	r18, r24
     5d4:	39 2b       	or	r19, r25
     5d6:	3b 83       	std	Y+3, r19	; 0x03
     5d8:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     5da:	19 82       	std	Y+1, r1	; 0x01
     5dc:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     5de:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <xNumberOfSuccessfulAllocations>
     5e2:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <xNumberOfSuccessfulAllocations+0x1>
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <xNumberOfSuccessfulAllocations+0x1>
     5ec:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <xNumberOfSuccessfulAllocations>
     5f0:	0b c0       	rjmp	.+22     	; 0x608 <pvPortMalloc+0x138>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     5f2:	e1 2c       	mov	r14, r1
     5f4:	f1 2c       	mov	r15, r1
     5f6:	08 c0       	rjmp	.+16     	; 0x608 <pvPortMalloc+0x138>
     5f8:	e1 2c       	mov	r14, r1
     5fa:	f1 2c       	mov	r15, r1
     5fc:	05 c0       	rjmp	.+10     	; 0x608 <pvPortMalloc+0x138>
     5fe:	e1 2c       	mov	r14, r1
     600:	f1 2c       	mov	r15, r1
     602:	02 c0       	rjmp	.+4      	; 0x608 <pvPortMalloc+0x138>
     604:	e1 2c       	mov	r14, r1
     606:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     608:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xTaskResumeAll>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     60c:	c7 01       	movw	r24, r14
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     624:	00 97       	sbiw	r24, 0x00	; 0
     626:	99 f1       	breq	.+102    	; 0x68e <vPortFree+0x72>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     628:	ec 01       	movw	r28, r24
     62a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     62c:	4a 81       	ldd	r20, Y+2	; 0x02
     62e:	5b 81       	ldd	r21, Y+3	; 0x03
     630:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__data_end>
     634:	30 91 c9 00 	lds	r19, 0x00C9	; 0x8000c9 <__data_end+0x1>
     638:	ba 01       	movw	r22, r20
     63a:	62 23       	and	r22, r18
     63c:	73 23       	and	r23, r19
     63e:	67 2b       	or	r22, r23
     640:	31 f1       	breq	.+76     	; 0x68e <vPortFree+0x72>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     642:	68 81       	ld	r22, Y
     644:	79 81       	ldd	r23, Y+1	; 0x01
     646:	67 2b       	or	r22, r23
     648:	11 f5       	brne	.+68     	; 0x68e <vPortFree+0x72>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     64a:	20 95       	com	r18
     64c:	30 95       	com	r19
     64e:	24 23       	and	r18, r20
     650:	35 23       	and	r19, r21
     652:	3b 83       	std	Y+3, r19	; 0x03
     654:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     656:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     65a:	8a 81       	ldd	r24, Y+2	; 0x02
     65c:	9b 81       	ldd	r25, Y+3	; 0x03
     65e:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <xFreeBytesRemaining>
     662:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <xFreeBytesRemaining+0x1>
     666:	82 0f       	add	r24, r18
     668:	93 1f       	adc	r25, r19
     66a:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <xFreeBytesRemaining+0x1>
     66e:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     672:	ce 01       	movw	r24, r28
     674:	0e 94 1e 02 	call	0x43c	; 0x43c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     678:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <xNumberOfSuccessfulFrees>
     67c:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <xNumberOfSuccessfulFrees+0x1>
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <xNumberOfSuccessfulFrees+0x1>
     686:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     68a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	08 95       	ret

00000698 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     698:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
     69c:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
     6a0:	80 81       	ld	r24, Z
     6a2:	81 11       	cpse	r24, r1
     6a4:	07 c0       	rjmp	.+14     	; 0x6b4 <prvResetNextTaskUnblockTime+0x1c>
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	9f ef       	ldi	r25, 0xFF	; 255
     6aa:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <xNextTaskUnblockTime+0x1>
     6ae:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <xNextTaskUnblockTime>
     6b2:	08 95       	ret
     6b4:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
     6b8:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
     6bc:	05 80       	ldd	r0, Z+5	; 0x05
     6be:	f6 81       	ldd	r31, Z+6	; 0x06
     6c0:	e0 2d       	mov	r30, r0
     6c2:	80 81       	ld	r24, Z
     6c4:	91 81       	ldd	r25, Z+1	; 0x01
     6c6:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <xNextTaskUnblockTime+0x1>
     6ca:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <xNextTaskUnblockTime>
     6ce:	08 95       	ret

000006d0 <prvDeleteTCB>:
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	ec 01       	movw	r28, r24
     6d6:	8f 89       	ldd	r24, Y+23	; 0x17
     6d8:	98 8d       	ldd	r25, Y+24	; 0x18
     6da:	0e 94 0e 03 	call	0x61c	; 0x61c <vPortFree>
     6de:	ce 01       	movw	r24, r28
     6e0:	0e 94 0e 03 	call	0x61c	; 0x61c <vPortFree>
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <prvInitialiseNewTask>:
     6ea:	6f 92       	push	r6
     6ec:	7f 92       	push	r7
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	4c 01       	movw	r8, r24
     70a:	d5 01       	movw	r26, r10
     70c:	57 96       	adiw	r26, 0x17	; 23
     70e:	8d 91       	ld	r24, X+
     710:	9c 91       	ld	r25, X
     712:	58 97       	sbiw	r26, 0x18	; 24
     714:	21 50       	subi	r18, 0x01	; 1
     716:	31 09       	sbc	r19, r1
     718:	3c 01       	movw	r6, r24
     71a:	62 0e       	add	r6, r18
     71c:	73 1e       	adc	r7, r19
     71e:	61 15       	cp	r22, r1
     720:	71 05       	cpc	r23, r1
     722:	89 f4       	brne	.+34     	; 0x746 <prvInitialiseNewTask+0x5c>
     724:	16 c0       	rjmp	.+44     	; 0x752 <prvInitialiseNewTask+0x68>
     726:	82 2f       	mov	r24, r18
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	fb 01       	movw	r30, r22
     72c:	e8 0f       	add	r30, r24
     72e:	f9 1f       	adc	r31, r25
     730:	30 81       	ld	r19, Z
     732:	d5 01       	movw	r26, r10
     734:	a8 0f       	add	r26, r24
     736:	b9 1f       	adc	r27, r25
     738:	59 96       	adiw	r26, 0x19	; 25
     73a:	3c 93       	st	X, r19
     73c:	80 81       	ld	r24, Z
     73e:	88 23       	and	r24, r24
     740:	29 f0       	breq	.+10     	; 0x74c <prvInitialiseNewTask+0x62>
     742:	2f 5f       	subi	r18, 0xFF	; 255
     744:	01 c0       	rjmp	.+2      	; 0x748 <prvInitialiseNewTask+0x5e>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	2f 30       	cpi	r18, 0x0F	; 15
     74a:	68 f3       	brcs	.-38     	; 0x726 <prvInitialiseNewTask+0x3c>
     74c:	f5 01       	movw	r30, r10
     74e:	17 a2       	std	Z+39, r1	; 0x27
     750:	03 c0       	rjmp	.+6      	; 0x758 <prvInitialiseNewTask+0x6e>
     752:	d5 01       	movw	r26, r10
     754:	59 96       	adiw	r26, 0x19	; 25
     756:	1c 92       	st	X, r1
     758:	b3 e0       	ldi	r27, 0x03	; 3
     75a:	be 15       	cp	r27, r14
     75c:	20 f4       	brcc	.+8      	; 0x766 <prvInitialiseNewTask+0x7c>
     75e:	0f 2e       	mov	r0, r31
     760:	f3 e0       	ldi	r31, 0x03	; 3
     762:	ef 2e       	mov	r14, r31
     764:	f0 2d       	mov	r31, r0
     766:	f5 01       	movw	r30, r10
     768:	e6 8a       	std	Z+22, r14	; 0x16
     76a:	c5 01       	movw	r24, r10
     76c:	02 96       	adiw	r24, 0x02	; 2
     76e:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     772:	c5 01       	movw	r24, r10
     774:	0c 96       	adiw	r24, 0x0c	; 12
     776:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     77a:	d5 01       	movw	r26, r10
     77c:	19 96       	adiw	r26, 0x09	; 9
     77e:	bc 92       	st	X, r11
     780:	ae 92       	st	-X, r10
     782:	18 97       	sbiw	r26, 0x08	; 8
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	8e 19       	sub	r24, r14
     78a:	91 09       	sbc	r25, r1
     78c:	1d 96       	adiw	r26, 0x0d	; 13
     78e:	9c 93       	st	X, r25
     790:	8e 93       	st	-X, r24
     792:	1c 97       	sbiw	r26, 0x0c	; 12
     794:	53 96       	adiw	r26, 0x13	; 19
     796:	bc 92       	st	X, r11
     798:	ae 92       	st	-X, r10
     79a:	52 97       	sbiw	r26, 0x12	; 18
     79c:	84 e0       	ldi	r24, 0x04	; 4
     79e:	f5 01       	movw	r30, r10
     7a0:	b8 96       	adiw	r30, 0x28	; 40
     7a2:	df 01       	movw	r26, r30
     7a4:	1d 92       	st	X+, r1
     7a6:	8a 95       	dec	r24
     7a8:	e9 f7       	brne	.-6      	; 0x7a4 <prvInitialiseNewTask+0xba>
     7aa:	f5 01       	movw	r30, r10
     7ac:	14 a6       	std	Z+44, r1	; 0x2c
     7ae:	a8 01       	movw	r20, r16
     7b0:	b4 01       	movw	r22, r8
     7b2:	c3 01       	movw	r24, r6
     7b4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <pxPortInitialiseStack>
     7b8:	d5 01       	movw	r26, r10
     7ba:	8d 93       	st	X+, r24
     7bc:	9c 93       	st	X, r25
     7be:	c1 14       	cp	r12, r1
     7c0:	d1 04       	cpc	r13, r1
     7c2:	19 f0       	breq	.+6      	; 0x7ca <prvInitialiseNewTask+0xe0>
     7c4:	f6 01       	movw	r30, r12
     7c6:	b1 82       	std	Z+1, r11	; 0x01
     7c8:	a0 82       	st	Z, r10
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	bf 90       	pop	r11
     7da:	af 90       	pop	r10
     7dc:	9f 90       	pop	r9
     7de:	8f 90       	pop	r8
     7e0:	7f 90       	pop	r7
     7e2:	6f 90       	pop	r6
     7e4:	08 95       	ret

000007e6 <prvInitialiseTaskLists>:
     7e6:	cf 93       	push	r28
     7e8:	c0 e0       	ldi	r28, 0x00	; 0
     7ea:	10 c0       	rjmp	.+32     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7ec:	8c 2f       	mov	r24, r28
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	9c 01       	movw	r18, r24
     7f2:	22 0f       	add	r18, r18
     7f4:	33 1f       	adc	r19, r19
     7f6:	22 0f       	add	r18, r18
     7f8:	33 1f       	adc	r19, r19
     7fa:	22 0f       	add	r18, r18
     7fc:	33 1f       	adc	r19, r19
     7fe:	82 0f       	add	r24, r18
     800:	93 1f       	adc	r25, r19
     802:	8b 50       	subi	r24, 0x0B	; 11
     804:	99 4f       	sbci	r25, 0xF9	; 249
     806:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     80a:	cf 5f       	subi	r28, 0xFF	; 255
     80c:	c4 30       	cpi	r28, 0x04	; 4
     80e:	70 f3       	brcs	.-36     	; 0x7ec <prvInitialiseTaskLists+0x6>
     810:	8c ee       	ldi	r24, 0xEC	; 236
     812:	96 e0       	ldi	r25, 0x06	; 6
     814:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     818:	83 ee       	ldi	r24, 0xE3	; 227
     81a:	96 e0       	ldi	r25, 0x06	; 6
     81c:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     820:	86 ed       	ldi	r24, 0xD6	; 214
     822:	96 e0       	ldi	r25, 0x06	; 6
     824:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     828:	8d ec       	ldi	r24, 0xCD	; 205
     82a:	96 e0       	ldi	r25, 0x06	; 6
     82c:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     830:	83 ec       	ldi	r24, 0xC3	; 195
     832:	96 e0       	ldi	r25, 0x06	; 6
     834:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     838:	8c ee       	ldi	r24, 0xEC	; 236
     83a:	96 e0       	ldi	r25, 0x06	; 6
     83c:	90 93 e2 06 	sts	0x06E2, r25	; 0x8006e2 <pxDelayedTaskList+0x1>
     840:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <pxDelayedTaskList>
     844:	83 ee       	ldi	r24, 0xE3	; 227
     846:	96 e0       	ldi	r25, 0x06	; 6
     848:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
     84c:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <pxOverflowDelayedTaskList>
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <prvAddNewTaskToReadyList>:
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	ec 01       	movw	r28, r24
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	0f 92       	push	r0
     860:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxCurrentNumberOfTasks>
     864:	8f 5f       	subi	r24, 0xFF	; 255
     866:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <uxCurrentNumberOfTasks>
     86a:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <pxCurrentTCB>
     86e:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     872:	89 2b       	or	r24, r25
     874:	59 f4       	brne	.+22     	; 0x88c <__stack+0x2d>
     876:	d0 93 1a 07 	sts	0x071A, r29	; 0x80071a <pxCurrentTCB+0x1>
     87a:	c0 93 19 07 	sts	0x0719, r28	; 0x800719 <pxCurrentTCB>
     87e:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxCurrentNumberOfTasks>
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	99 f4       	brne	.+38     	; 0x8ac <__stack+0x4d>
     886:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <prvInitialiseTaskLists>
     88a:	10 c0       	rjmp	.+32     	; 0x8ac <__stack+0x4d>
     88c:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <xSchedulerRunning>
     890:	81 11       	cpse	r24, r1
     892:	0c c0       	rjmp	.+24     	; 0x8ac <__stack+0x4d>
     894:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <pxCurrentTCB>
     898:	f0 91 1a 07 	lds	r31, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     89c:	96 89       	ldd	r25, Z+22	; 0x16
     89e:	8e 89       	ldd	r24, Y+22	; 0x16
     8a0:	89 17       	cp	r24, r25
     8a2:	20 f0       	brcs	.+8      	; 0x8ac <__stack+0x4d>
     8a4:	d0 93 1a 07 	sts	0x071A, r29	; 0x80071a <pxCurrentTCB+0x1>
     8a8:	c0 93 19 07 	sts	0x0719, r28	; 0x800719 <pxCurrentTCB>
     8ac:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <uxTaskNumber>
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <uxTaskNumber>
     8b6:	2e 89       	ldd	r18, Y+22	; 0x16
     8b8:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <uxTopReadyPriority>
     8bc:	82 17       	cp	r24, r18
     8be:	10 f4       	brcc	.+4      	; 0x8c4 <__stack+0x65>
     8c0:	20 93 bf 06 	sts	0x06BF, r18	; 0x8006bf <uxTopReadyPriority>
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	be 01       	movw	r22, r28
     8c8:	6e 5f       	subi	r22, 0xFE	; 254
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	c9 01       	movw	r24, r18
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	82 0f       	add	r24, r18
     8dc:	93 1f       	adc	r25, r19
     8de:	8b 50       	subi	r24, 0x0B	; 11
     8e0:	99 4f       	sbci	r25, 0xF9	; 249
     8e2:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
     8e6:	0f 90       	pop	r0
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <xSchedulerRunning>
     8ee:	88 23       	and	r24, r24
     8f0:	21 f0       	breq	.+8      	; 0x8fa <__stack+0x9b>
     8f2:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <pxCurrentTCB>
     8f6:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <prvCheckTasksWaitingTermination>:
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	1c c0       	rjmp	.+56     	; 0x93e <prvCheckTasksWaitingTermination+0x3e>
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	0f 92       	push	r0
     90c:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <xTasksWaitingTermination+0x5>
     910:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <xTasksWaitingTermination+0x6>
     914:	c6 81       	ldd	r28, Z+6	; 0x06
     916:	d7 81       	ldd	r29, Z+7	; 0x07
     918:	ce 01       	movw	r24, r28
     91a:	02 96       	adiw	r24, 0x02	; 2
     91c:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     920:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxCurrentNumberOfTasks>
     924:	81 50       	subi	r24, 0x01	; 1
     926:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <uxCurrentNumberOfTasks>
     92a:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <uxDeletedTasksWaitingCleanUp>
     92e:	81 50       	subi	r24, 0x01	; 1
     930:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxDeletedTasksWaitingCleanUp>
     934:	0f 90       	pop	r0
     936:	0f be       	out	0x3f, r0	; 63
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <prvDeleteTCB>
     93e:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <uxDeletedTasksWaitingCleanUp>
     942:	81 11       	cpse	r24, r1
     944:	e0 cf       	rjmp	.-64     	; 0x906 <prvCheckTasksWaitingTermination+0x6>
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <prvAddCurrentTaskToDelayedList>:
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	ec 01       	movw	r28, r24
     958:	f6 2e       	mov	r15, r22
     95a:	00 91 c0 06 	lds	r16, 0x06C0	; 0x8006c0 <xTickCount>
     95e:	10 91 c1 06 	lds	r17, 0x06C1	; 0x8006c1 <xTickCount+0x1>
     962:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <pxCurrentTCB>
     966:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     96a:	02 96       	adiw	r24, 0x02	; 2
     96c:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     970:	cf 3f       	cpi	r28, 0xFF	; 255
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	d8 07       	cpc	r29, r24
     976:	69 f4       	brne	.+26     	; 0x992 <prvAddCurrentTaskToDelayedList+0x46>
     978:	ff 20       	and	r15, r15
     97a:	59 f0       	breq	.+22     	; 0x992 <prvAddCurrentTaskToDelayedList+0x46>
     97c:	60 91 19 07 	lds	r22, 0x0719	; 0x800719 <pxCurrentTCB>
     980:	70 91 1a 07 	lds	r23, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     984:	6e 5f       	subi	r22, 0xFE	; 254
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	83 ec       	ldi	r24, 0xC3	; 195
     98a:	96 e0       	ldi	r25, 0x06	; 6
     98c:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
     990:	2f c0       	rjmp	.+94     	; 0x9f0 <prvAddCurrentTaskToDelayedList+0xa4>
     992:	c0 0f       	add	r28, r16
     994:	d1 1f       	adc	r29, r17
     996:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <pxCurrentTCB>
     99a:	f0 91 1a 07 	lds	r31, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     99e:	d3 83       	std	Z+3, r29	; 0x03
     9a0:	c2 83       	std	Z+2, r28	; 0x02
     9a2:	c0 17       	cp	r28, r16
     9a4:	d1 07       	cpc	r29, r17
     9a6:	68 f4       	brcc	.+26     	; 0x9c2 <prvAddCurrentTaskToDelayedList+0x76>
     9a8:	60 91 19 07 	lds	r22, 0x0719	; 0x800719 <pxCurrentTCB>
     9ac:	70 91 1a 07 	lds	r23, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     9b0:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <pxOverflowDelayedTaskList>
     9b4:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
     9b8:	6e 5f       	subi	r22, 0xFE	; 254
     9ba:	7f 4f       	sbci	r23, 0xFF	; 255
     9bc:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
     9c0:	17 c0       	rjmp	.+46     	; 0x9f0 <prvAddCurrentTaskToDelayedList+0xa4>
     9c2:	60 91 19 07 	lds	r22, 0x0719	; 0x800719 <pxCurrentTCB>
     9c6:	70 91 1a 07 	lds	r23, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     9ca:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
     9ce:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
     9d2:	6e 5f       	subi	r22, 0xFE	; 254
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
     9da:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <xNextTaskUnblockTime>
     9de:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <xNextTaskUnblockTime+0x1>
     9e2:	c8 17       	cp	r28, r24
     9e4:	d9 07       	cpc	r29, r25
     9e6:	20 f4       	brcc	.+8      	; 0x9f0 <prvAddCurrentTaskToDelayedList+0xa4>
     9e8:	d0 93 b8 06 	sts	0x06B8, r29	; 0x8006b8 <xNextTaskUnblockTime+0x1>
     9ec:	c0 93 b7 06 	sts	0x06B7, r28	; 0x8006b7 <xNextTaskUnblockTime>
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	08 95       	ret

000009fc <prvIdleTask>:
     9fc:	0e 94 80 04 	call	0x900	; 0x900 <prvCheckTasksWaitingTermination>
     a00:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     a04:	0e 94 a8 07 	call	0xf50	; 0xf50 <vApplicationIdleHook>
     a08:	f9 cf       	rjmp	.-14     	; 0x9fc <prvIdleTask>

00000a0a <xTaskCreate>:
     a0a:	2f 92       	push	r2
     a0c:	3f 92       	push	r3
     a0e:	4f 92       	push	r4
     a10:	5f 92       	push	r5
     a12:	6f 92       	push	r6
     a14:	7f 92       	push	r7
     a16:	8f 92       	push	r8
     a18:	9f 92       	push	r9
     a1a:	af 92       	push	r10
     a1c:	bf 92       	push	r11
     a1e:	cf 92       	push	r12
     a20:	df 92       	push	r13
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	3c 01       	movw	r6, r24
     a30:	1b 01       	movw	r2, r22
     a32:	5a 01       	movw	r10, r20
     a34:	29 01       	movw	r4, r18
     a36:	ca 01       	movw	r24, r20
     a38:	0e 94 68 02 	call	0x4d0	; 0x4d0 <pvPortMalloc>
     a3c:	6c 01       	movw	r12, r24
     a3e:	89 2b       	or	r24, r25
     a40:	71 f0       	breq	.+28     	; 0xa5e <xTaskCreate+0x54>
     a42:	8d e2       	ldi	r24, 0x2D	; 45
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 68 02 	call	0x4d0	; 0x4d0 <pvPortMalloc>
     a4a:	ec 01       	movw	r28, r24
     a4c:	89 2b       	or	r24, r25
     a4e:	19 f0       	breq	.+6      	; 0xa56 <xTaskCreate+0x4c>
     a50:	d8 8e       	std	Y+24, r13	; 0x18
     a52:	cf 8a       	std	Y+23, r12	; 0x17
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <xTaskCreate+0x58>
     a56:	c6 01       	movw	r24, r12
     a58:	0e 94 0e 03 	call	0x61c	; 0x61c <vPortFree>
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <xTaskCreate+0x58>
     a5e:	c0 e0       	ldi	r28, 0x00	; 0
     a60:	d0 e0       	ldi	r29, 0x00	; 0
     a62:	20 97       	sbiw	r28, 0x00	; 0
     a64:	91 f0       	breq	.+36     	; 0xa8a <xTaskCreate+0x80>
     a66:	95 01       	movw	r18, r10
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	81 2c       	mov	r8, r1
     a6e:	91 2c       	mov	r9, r1
     a70:	5e 01       	movw	r10, r28
     a72:	67 01       	movw	r12, r14
     a74:	e0 2e       	mov	r14, r16
     a76:	82 01       	movw	r16, r4
     a78:	b1 01       	movw	r22, r2
     a7a:	c3 01       	movw	r24, r6
     a7c:	0e 94 75 03 	call	0x6ea	; 0x6ea <prvInitialiseNewTask>
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 2a 04 	call	0x854	; 0x854 <prvAddNewTaskToReadyList>
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <xTaskCreate+0x82>
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	bf 90       	pop	r11
     a9e:	af 90       	pop	r10
     aa0:	9f 90       	pop	r9
     aa2:	8f 90       	pop	r8
     aa4:	7f 90       	pop	r7
     aa6:	6f 90       	pop	r6
     aa8:	5f 90       	pop	r5
     aaa:	4f 90       	pop	r4
     aac:	3f 90       	pop	r3
     aae:	2f 90       	pop	r2
     ab0:	08 95       	ret

00000ab2 <uxTaskPriorityGet>:
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	0f 92       	push	r0
     ab8:	00 97       	sbiw	r24, 0x00	; 0
     aba:	29 f4       	brne	.+10     	; 0xac6 <uxTaskPriorityGet+0x14>
     abc:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <pxCurrentTCB>
     ac0:	f0 91 1a 07 	lds	r31, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <uxTaskPriorityGet+0x16>
     ac6:	fc 01       	movw	r30, r24
     ac8:	86 89       	ldd	r24, Z+22	; 0x16
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	08 95       	ret

00000ad0 <vTaskPrioritySet>:
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	ec 01       	movw	r28, r24
     ada:	64 30       	cpi	r22, 0x04	; 4
     adc:	08 f0       	brcs	.+2      	; 0xae0 <vTaskPrioritySet+0x10>
     ade:	63 e0       	ldi	r22, 0x03	; 3
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	0f 92       	push	r0
     ae6:	20 97       	sbiw	r28, 0x00	; 0
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <vTaskPrioritySet+0x22>
     aea:	c0 91 19 07 	lds	r28, 0x0719	; 0x800719 <pxCurrentTCB>
     aee:	d0 91 1a 07 	lds	r29, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     af2:	8e 89       	ldd	r24, Y+22	; 0x16
     af4:	68 17       	cp	r22, r24
     af6:	09 f4       	brne	.+2      	; 0xafa <vTaskPrioritySet+0x2a>
     af8:	4a c0       	rjmp	.+148    	; 0xb8e <vTaskPrioritySet+0xbe>
     afa:	86 17       	cp	r24, r22
     afc:	60 f4       	brcc	.+24     	; 0xb16 <vTaskPrioritySet+0x46>
     afe:	20 91 19 07 	lds	r18, 0x0719	; 0x800719 <pxCurrentTCB>
     b02:	30 91 1a 07 	lds	r19, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     b06:	c2 17       	cp	r28, r18
     b08:	d3 07       	cpc	r29, r19
     b0a:	49 f0       	breq	.+18     	; 0xb1e <vTaskPrioritySet+0x4e>
     b0c:	20 91 19 07 	lds	r18, 0x0719	; 0x800719 <pxCurrentTCB>
     b10:	30 91 1a 07 	lds	r19, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <vTaskPrioritySet+0x4e>
     b16:	20 91 19 07 	lds	r18, 0x0719	; 0x800719 <pxCurrentTCB>
     b1a:	30 91 1a 07 	lds	r19, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     b1e:	6e 8b       	std	Y+22, r22	; 0x16
     b20:	2c 85       	ldd	r18, Y+12	; 0x0c
     b22:	3d 85       	ldd	r19, Y+13	; 0x0d
     b24:	33 23       	and	r19, r19
     b26:	34 f0       	brlt	.+12     	; 0xb34 <vTaskPrioritySet+0x64>
     b28:	24 e0       	ldi	r18, 0x04	; 4
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	26 1b       	sub	r18, r22
     b2e:	31 09       	sbc	r19, r1
     b30:	3d 87       	std	Y+13, r19	; 0x0d
     b32:	2c 87       	std	Y+12, r18	; 0x0c
     b34:	2a 85       	ldd	r18, Y+10	; 0x0a
     b36:	3b 85       	ldd	r19, Y+11	; 0x0b
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	ac 01       	movw	r20, r24
     b3c:	44 0f       	add	r20, r20
     b3e:	55 1f       	adc	r21, r21
     b40:	44 0f       	add	r20, r20
     b42:	55 1f       	adc	r21, r21
     b44:	44 0f       	add	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	84 0f       	add	r24, r20
     b4a:	95 1f       	adc	r25, r21
     b4c:	8b 50       	subi	r24, 0x0B	; 11
     b4e:	99 4f       	sbci	r25, 0xF9	; 249
     b50:	28 17       	cp	r18, r24
     b52:	39 07       	cpc	r19, r25
     b54:	e1 f4       	brne	.+56     	; 0xb8e <vTaskPrioritySet+0xbe>
     b56:	8e 01       	movw	r16, r28
     b58:	0e 5f       	subi	r16, 0xFE	; 254
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255
     b5c:	c8 01       	movw	r24, r16
     b5e:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     b62:	8e 89       	ldd	r24, Y+22	; 0x16
     b64:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <uxTopReadyPriority>
     b68:	98 17       	cp	r25, r24
     b6a:	10 f4       	brcc	.+4      	; 0xb70 <vTaskPrioritySet+0xa0>
     b6c:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <uxTopReadyPriority>
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	9c 01       	movw	r18, r24
     b74:	22 0f       	add	r18, r18
     b76:	33 1f       	adc	r19, r19
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	82 0f       	add	r24, r18
     b82:	93 1f       	adc	r25, r19
     b84:	b8 01       	movw	r22, r16
     b86:	8b 50       	subi	r24, 0x0B	; 11
     b88:	99 4f       	sbci	r25, 0xF9	; 249
     b8a:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <vTaskStartScheduler>:
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	0f 2e       	mov	r0, r31
     ba4:	f5 eb       	ldi	r31, 0xB5	; 181
     ba6:	ef 2e       	mov	r14, r31
     ba8:	f6 e0       	ldi	r31, 0x06	; 6
     baa:	ff 2e       	mov	r15, r31
     bac:	f0 2d       	mov	r31, r0
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	45 e5       	ldi	r20, 0x55	; 85
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	61 e6       	ldi	r22, 0x61	; 97
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	8e ef       	ldi	r24, 0xFE	; 254
     bbe:	94 e0       	ldi	r25, 0x04	; 4
     bc0:	0e 94 05 05 	call	0xa0a	; 0xa0a <xTaskCreate>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	81 f4       	brne	.+32     	; 0xbe8 <vTaskStartScheduler+0x4c>
     bc8:	f8 94       	cli
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	9f ef       	ldi	r25, 0xFF	; 255
     bce:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <xNextTaskUnblockTime+0x1>
     bd2:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <xNextTaskUnblockTime>
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <xSchedulerRunning>
     bdc:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <xTickCount+0x1>
     be0:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <xTickCount>
     be4:	0e 94 49 01 	call	0x292	; 0x292 <xPortStartScheduler>
     be8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	08 95       	ret

00000bf4 <vTaskSuspendAll>:
     bf4:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <uxSchedulerSuspended>
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <uxSchedulerSuspended>
     bfe:	08 95       	ret

00000c00 <xTaskIncrementTick>:
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <uxSchedulerSuspended>
     c10:	81 11       	cpse	r24, r1
     c12:	73 c0       	rjmp	.+230    	; 0xcfa <xTaskIncrementTick+0xfa>
     c14:	e0 90 c0 06 	lds	r14, 0x06C0	; 0x8006c0 <xTickCount>
     c18:	f0 90 c1 06 	lds	r15, 0x06C1	; 0x8006c1 <xTickCount+0x1>
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	e8 1a       	sub	r14, r24
     c20:	f8 0a       	sbc	r15, r24
     c22:	f0 92 c1 06 	sts	0x06C1, r15	; 0x8006c1 <xTickCount+0x1>
     c26:	e0 92 c0 06 	sts	0x06C0, r14	; 0x8006c0 <xTickCount>
     c2a:	e1 14       	cp	r14, r1
     c2c:	f1 04       	cpc	r15, r1
     c2e:	b9 f4       	brne	.+46     	; 0xc5e <xTaskIncrementTick+0x5e>
     c30:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
     c34:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
     c38:	20 91 df 06 	lds	r18, 0x06DF	; 0x8006df <pxOverflowDelayedTaskList>
     c3c:	30 91 e0 06 	lds	r19, 0x06E0	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
     c40:	30 93 e2 06 	sts	0x06E2, r19	; 0x8006e2 <pxDelayedTaskList+0x1>
     c44:	20 93 e1 06 	sts	0x06E1, r18	; 0x8006e1 <pxDelayedTaskList>
     c48:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
     c4c:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <pxOverflowDelayedTaskList>
     c50:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <xNumOfOverflows>
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <xNumOfOverflows>
     c5a:	0e 94 4c 03 	call	0x698	; 0x698 <prvResetNextTaskUnblockTime>
     c5e:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <xNextTaskUnblockTime>
     c62:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <xNextTaskUnblockTime+0x1>
     c66:	e8 16       	cp	r14, r24
     c68:	f9 06       	cpc	r15, r25
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <xTaskIncrementTick+0x6e>
     c6c:	4f c0       	rjmp	.+158    	; 0xd0c <xTaskIncrementTick+0x10c>
     c6e:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
     c72:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
     c76:	80 81       	ld	r24, Z
     c78:	81 11       	cpse	r24, r1
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <xTaskIncrementTick+0x8a>
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	9f ef       	ldi	r25, 0xFF	; 255
     c80:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <xNextTaskUnblockTime+0x1>
     c84:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <xNextTaskUnblockTime>
     c88:	41 c0       	rjmp	.+130    	; 0xd0c <xTaskIncrementTick+0x10c>
     c8a:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
     c8e:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
     c92:	05 80       	ldd	r0, Z+5	; 0x05
     c94:	f6 81       	ldd	r31, Z+6	; 0x06
     c96:	e0 2d       	mov	r30, r0
     c98:	c6 81       	ldd	r28, Z+6	; 0x06
     c9a:	d7 81       	ldd	r29, Z+7	; 0x07
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ca0:	e8 16       	cp	r14, r24
     ca2:	f9 06       	cpc	r15, r25
     ca4:	28 f4       	brcc	.+10     	; 0xcb0 <xTaskIncrementTick+0xb0>
     ca6:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <xNextTaskUnblockTime+0x1>
     caa:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <xNextTaskUnblockTime>
     cae:	2e c0       	rjmp	.+92     	; 0xd0c <xTaskIncrementTick+0x10c>
     cb0:	8e 01       	movw	r16, r28
     cb2:	0e 5f       	subi	r16, 0xFE	; 254
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	c8 01       	movw	r24, r16
     cb8:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     cbc:	8c 89       	ldd	r24, Y+20	; 0x14
     cbe:	9d 89       	ldd	r25, Y+21	; 0x15
     cc0:	89 2b       	or	r24, r25
     cc2:	21 f0       	breq	.+8      	; 0xccc <xTaskIncrementTick+0xcc>
     cc4:	ce 01       	movw	r24, r28
     cc6:	0c 96       	adiw	r24, 0x0c	; 12
     cc8:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     ccc:	8e 89       	ldd	r24, Y+22	; 0x16
     cce:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <uxTopReadyPriority>
     cd2:	98 17       	cp	r25, r24
     cd4:	10 f4       	brcc	.+4      	; 0xcda <xTaskIncrementTick+0xda>
     cd6:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <uxTopReadyPriority>
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9c 01       	movw	r18, r24
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	22 0f       	add	r18, r18
     ce8:	33 1f       	adc	r19, r19
     cea:	82 0f       	add	r24, r18
     cec:	93 1f       	adc	r25, r19
     cee:	b8 01       	movw	r22, r16
     cf0:	8b 50       	subi	r24, 0x0B	; 11
     cf2:	99 4f       	sbci	r25, 0xF9	; 249
     cf4:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
     cf8:	ba cf       	rjmp	.-140    	; 0xc6e <xTaskIncrementTick+0x6e>
     cfa:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <xPendedTicks>
     cfe:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <xPendedTicks+0x1>
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	90 93 bd 06 	sts	0x06BD, r25	; 0x8006bd <xPendedTicks+0x1>
     d08:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <xPendedTicks>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	08 95       	ret

00000d1c <xTaskResumeAll>:
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	0f 92       	push	r0
     d2a:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <uxSchedulerSuspended>
     d2e:	81 50       	subi	r24, 0x01	; 1
     d30:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <uxSchedulerSuspended>
     d34:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <uxSchedulerSuspended>
     d38:	81 11       	cpse	r24, r1
     d3a:	56 c0       	rjmp	.+172    	; 0xde8 <xTaskResumeAll+0xcc>
     d3c:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxCurrentNumberOfTasks>
     d40:	81 11       	cpse	r24, r1
     d42:	33 c0       	rjmp	.+102    	; 0xdaa <xTaskResumeAll+0x8e>
     d44:	51 c0       	rjmp	.+162    	; 0xde8 <xTaskResumeAll+0xcc>
     d46:	e0 91 db 06 	lds	r30, 0x06DB	; 0x8006db <xPendingReadyList+0x5>
     d4a:	f0 91 dc 06 	lds	r31, 0x06DC	; 0x8006dc <xPendingReadyList+0x6>
     d4e:	c6 81       	ldd	r28, Z+6	; 0x06
     d50:	d7 81       	ldd	r29, Z+7	; 0x07
     d52:	ce 01       	movw	r24, r28
     d54:	0c 96       	adiw	r24, 0x0c	; 12
     d56:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     d5a:	8e 01       	movw	r16, r28
     d5c:	0e 5f       	subi	r16, 0xFE	; 254
     d5e:	1f 4f       	sbci	r17, 0xFF	; 255
     d60:	c8 01       	movw	r24, r16
     d62:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     d66:	8e 89       	ldd	r24, Y+22	; 0x16
     d68:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <uxTopReadyPriority>
     d6c:	98 17       	cp	r25, r24
     d6e:	10 f4       	brcc	.+4      	; 0xd74 <xTaskResumeAll+0x58>
     d70:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <uxTopReadyPriority>
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9c 01       	movw	r18, r24
     d78:	22 0f       	add	r18, r18
     d7a:	33 1f       	adc	r19, r19
     d7c:	22 0f       	add	r18, r18
     d7e:	33 1f       	adc	r19, r19
     d80:	22 0f       	add	r18, r18
     d82:	33 1f       	adc	r19, r19
     d84:	82 0f       	add	r24, r18
     d86:	93 1f       	adc	r25, r19
     d88:	b8 01       	movw	r22, r16
     d8a:	8b 50       	subi	r24, 0x0B	; 11
     d8c:	99 4f       	sbci	r25, 0xF9	; 249
     d8e:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
     d92:	9e 89       	ldd	r25, Y+22	; 0x16
     d94:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <pxCurrentTCB>
     d98:	f0 91 1a 07 	lds	r31, 0x071A	; 0x80071a <pxCurrentTCB+0x1>
     d9c:	86 89       	ldd	r24, Z+22	; 0x16
     d9e:	98 17       	cp	r25, r24
     da0:	30 f0       	brcs	.+12     	; 0xdae <xTaskResumeAll+0x92>
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <xYieldPending>
     da8:	02 c0       	rjmp	.+4      	; 0xdae <xTaskResumeAll+0x92>
     daa:	c0 e0       	ldi	r28, 0x00	; 0
     dac:	d0 e0       	ldi	r29, 0x00	; 0
     dae:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <xPendingReadyList>
     db2:	81 11       	cpse	r24, r1
     db4:	c8 cf       	rjmp	.-112    	; 0xd46 <xTaskResumeAll+0x2a>
     db6:	cd 2b       	or	r28, r29
     db8:	11 f0       	breq	.+4      	; 0xdbe <xTaskResumeAll+0xa2>
     dba:	0e 94 4c 03 	call	0x698	; 0x698 <prvResetNextTaskUnblockTime>
     dbe:	c0 91 bc 06 	lds	r28, 0x06BC	; 0x8006bc <xPendedTicks>
     dc2:	d0 91 bd 06 	lds	r29, 0x06BD	; 0x8006bd <xPendedTicks+0x1>
     dc6:	20 97       	sbiw	r28, 0x00	; 0
     dc8:	69 f0       	breq	.+26     	; 0xde4 <xTaskResumeAll+0xc8>
     dca:	0e 94 00 06 	call	0xc00	; 0xc00 <xTaskIncrementTick>
     dce:	88 23       	and	r24, r24
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <xTaskResumeAll+0xbc>
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <xYieldPending>
     dd8:	21 97       	sbiw	r28, 0x01	; 1
     dda:	b9 f7       	brne	.-18     	; 0xdca <xTaskResumeAll+0xae>
     ddc:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <xPendedTicks+0x1>
     de0:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <xPendedTicks>
     de4:	80 91 bb 06 	lds	r24, 0x06BB	; 0x8006bb <xYieldPending>
     de8:	0f 90       	pop	r0
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <vTaskDelay>:
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	ec 01       	movw	r28, r24
     dfe:	89 2b       	or	r24, r25
     e00:	49 f0       	breq	.+18     	; 0xe14 <vTaskDelay+0x1c>
     e02:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <vTaskSuspendAll>
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	ce 01       	movw	r24, r28
     e0a:	0e 94 a6 04 	call	0x94c	; 0x94c <prvAddCurrentTaskToDelayedList>
     e0e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <xTaskResumeAll>
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <vTaskDelay+0x1e>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	81 11       	cpse	r24, r1
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <vTaskDelay+0x26>
     e1a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     e24:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <uxSchedulerSuspended>
     e28:	88 23       	and	r24, r24
     e2a:	21 f0       	breq	.+8      	; 0xe34 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <xYieldPending>
     e32:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     e34:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     e38:	20 91 bf 06 	lds	r18, 0x06BF	; 0x8006bf <uxTopReadyPriority>
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <vTaskSwitchContext+0x1c>
     e3e:	21 50       	subi	r18, 0x01	; 1
     e40:	82 2f       	mov	r24, r18
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	fc 01       	movw	r30, r24
     e46:	ee 0f       	add	r30, r30
     e48:	ff 1f       	adc	r31, r31
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	e8 0f       	add	r30, r24
     e54:	f9 1f       	adc	r31, r25
     e56:	eb 50       	subi	r30, 0x0B	; 11
     e58:	f9 4f       	sbci	r31, 0xF9	; 249
     e5a:	30 81       	ld	r19, Z
     e5c:	33 23       	and	r19, r19
     e5e:	79 f3       	breq	.-34     	; 0xe3e <vTaskSwitchContext+0x1a>
     e60:	ac 01       	movw	r20, r24
     e62:	44 0f       	add	r20, r20
     e64:	55 1f       	adc	r21, r21
     e66:	44 0f       	add	r20, r20
     e68:	55 1f       	adc	r21, r21
     e6a:	44 0f       	add	r20, r20
     e6c:	55 1f       	adc	r21, r21
     e6e:	48 0f       	add	r20, r24
     e70:	59 1f       	adc	r21, r25
     e72:	df 01       	movw	r26, r30
     e74:	01 80       	ldd	r0, Z+1	; 0x01
     e76:	f2 81       	ldd	r31, Z+2	; 0x02
     e78:	e0 2d       	mov	r30, r0
     e7a:	02 80       	ldd	r0, Z+2	; 0x02
     e7c:	f3 81       	ldd	r31, Z+3	; 0x03
     e7e:	e0 2d       	mov	r30, r0
     e80:	12 96       	adiw	r26, 0x02	; 2
     e82:	fc 93       	st	X, r31
     e84:	ee 93       	st	-X, r30
     e86:	11 97       	sbiw	r26, 0x01	; 1
     e88:	48 50       	subi	r20, 0x08	; 8
     e8a:	59 4f       	sbci	r21, 0xF9	; 249
     e8c:	e4 17       	cp	r30, r20
     e8e:	f5 07       	cpc	r31, r21
     e90:	29 f4       	brne	.+10     	; 0xe9c <vTaskSwitchContext+0x78>
     e92:	42 81       	ldd	r20, Z+2	; 0x02
     e94:	53 81       	ldd	r21, Z+3	; 0x03
     e96:	fd 01       	movw	r30, r26
     e98:	52 83       	std	Z+2, r21	; 0x02
     e9a:	41 83       	std	Z+1, r20	; 0x01
     e9c:	fc 01       	movw	r30, r24
     e9e:	ee 0f       	add	r30, r30
     ea0:	ff 1f       	adc	r31, r31
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	8e 0f       	add	r24, r30
     eac:	9f 1f       	adc	r25, r31
     eae:	fc 01       	movw	r30, r24
     eb0:	eb 50       	subi	r30, 0x0B	; 11
     eb2:	f9 4f       	sbci	r31, 0xF9	; 249
     eb4:	01 80       	ldd	r0, Z+1	; 0x01
     eb6:	f2 81       	ldd	r31, Z+2	; 0x02
     eb8:	e0 2d       	mov	r30, r0
     eba:	86 81       	ldd	r24, Z+6	; 0x06
     ebc:	97 81       	ldd	r25, Z+7	; 0x07
     ebe:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <pxCurrentTCB+0x1>
     ec2:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <pxCurrentTCB>
     ec6:	20 93 bf 06 	sts	0x06BF, r18	; 0x8006bf <uxTopReadyPriority>
     eca:	08 95       	ret

00000ecc <command>:

void command()
{


	PORTB=PORTB & ~ (1<<RS);
     ecc:	88 b3       	in	r24, 0x18	; 24
     ece:	8e 7f       	andi	r24, 0xFE	; 254
     ed0:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~ (1<<RW) ;
     ed2:	88 b3       	in	r24, 0x18	; 24
     ed4:	8d 7f       	andi	r24, 0xFD	; 253
     ed6:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB  | (1<<E);
     ed8:	88 b3       	in	r24, 0x18	; 24
     eda:	84 60       	ori	r24, 0x04	; 4
     edc:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~(1<<E);
     ede:	88 b3       	in	r24, 0x18	; 24
     ee0:	8b 7f       	andi	r24, 0xFB	; 251
     ee2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee4:	8f e3       	ldi	r24, 0x3F	; 63
     ee6:	9c e9       	ldi	r25, 0x9C	; 156
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <command+0x1c>
     eec:	00 c0       	rjmp	.+0      	; 0xeee <command+0x22>
     eee:	00 00       	nop
     ef0:	08 95       	ret

00000ef2 <lcd_init>:

}

void lcd_init()
{
	DDRA = DDRB = 0xFF;
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	87 bb       	out	0x17, r24	; 23
     ef6:	8a bb       	out	0x1a, r24	; 26
	
	display=0x38;
     ef8:	88 e3       	ldi	r24, 0x38	; 56
     efa:	8b bb       	out	0x1b, r24	; 27
	command();
     efc:	0e 94 66 07 	call	0xecc	; 0xecc <command>

	display=0x01;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	8b bb       	out	0x1b, r24	; 27
	command();
     f04:	0e 94 66 07 	call	0xecc	; 0xecc <command>

	display=0x0C;
     f08:	8c e0       	ldi	r24, 0x0C	; 12
     f0a:	8b bb       	out	0x1b, r24	; 27
	command();
     f0c:	0e 94 66 07 	call	0xecc	; 0xecc <command>

	display=0x06;
     f10:	86 e0       	ldi	r24, 0x06	; 6
     f12:	8b bb       	out	0x1b, r24	; 27
	command();
     f14:	0e 94 66 07 	call	0xecc	; 0xecc <command>

	display=0x8F;
     f18:	8f e8       	ldi	r24, 0x8F	; 143
     f1a:	8b bb       	out	0x1b, r24	; 27
	command();
     f1c:	0e 94 66 07 	call	0xecc	; 0xecc <command>
	
	display = 0x07;
     f20:	87 e0       	ldi	r24, 0x07	; 7
     f22:	8b bb       	out	0x1b, r24	; 27
	command();
     f24:	0e 94 66 07 	call	0xecc	; 0xecc <command>
     f28:	08 95       	ret

00000f2a <DISPLAY>:

void DISPLAY()
{
	

	PORTB=PORTB | (1<<RS);
     f2a:	88 b3       	in	r24, 0x18	; 24
     f2c:	81 60       	ori	r24, 0x01	; 1
     f2e:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~ (1<<RW);
     f30:	88 b3       	in	r24, 0x18	; 24
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB  | (1<<E);
     f36:	88 b3       	in	r24, 0x18	; 24
     f38:	84 60       	ori	r24, 0x04	; 4
     f3a:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~(1<<E);
     f3c:	88 b3       	in	r24, 0x18	; 24
     f3e:	8b 7f       	andi	r24, 0xFB	; 251
     f40:	88 bb       	out	0x18, r24	; 24
     f42:	8f e3       	ldi	r24, 0x3F	; 63
     f44:	9c e9       	ldi	r25, 0x9C	; 156
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <DISPLAY+0x1c>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <DISPLAY+0x22>
     f4c:	00 00       	nop
     f4e:	08 95       	ret

00000f50 <vApplicationIdleHook>:


void vApplicationIdleHook( void )
{
	
	ulIdleCycleCount++;  // increment the varialbe. at each tick of crystal. 
     f50:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <ulIdleCycleCount>
     f54:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <ulIdleCycleCount+0x1>
     f58:	a0 91 1d 07 	lds	r26, 0x071D	; 0x80071d <ulIdleCycleCount+0x2>
     f5c:	b0 91 1e 07 	lds	r27, 0x071E	; 0x80071e <ulIdleCycleCount+0x3>
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	a1 1d       	adc	r26, r1
     f64:	b1 1d       	adc	r27, r1
     f66:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <ulIdleCycleCount>
     f6a:	90 93 1c 07 	sts	0x071C, r25	; 0x80071c <ulIdleCycleCount+0x1>
     f6e:	a0 93 1d 07 	sts	0x071D, r26	; 0x80071d <ulIdleCycleCount+0x2>
     f72:	b0 93 1e 07 	sts	0x071E, r27	; 0x80071e <ulIdleCycleCount+0x3>
     f76:	08 95       	ret

00000f78 <usart_init>:



void usart_init(void)
{
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
     f78:	88 e9       	ldi	r24, 0x98	; 152
     f7a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ1) | (1<<UCSZ0) | (1<<URSEL);
     f7c:	86 e8       	ldi	r24, 0x86	; 134
     f7e:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33;
     f80:	83 e3       	ldi	r24, 0x33	; 51
     f82:	89 b9       	out	0x09, r24	; 9
     f84:	08 95       	ret

00000f86 <main>:
}



int main(void)
{
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
	usart_init();
     f8c:	0e 94 bc 07 	call	0xf78	; 0xf78 <usart_init>
	lcd_init();
     f90:	0e 94 79 07 	call	0xef2	; 0xef2 <lcd_init>
	
	xTaskCreate(ContinousTask2, "Task2",100, NULL, 1, &TaskHandle2);
     f94:	0f 2e       	mov	r0, r31
     f96:	ff e1       	ldi	r31, 0x1F	; 31
     f98:	ef 2e       	mov	r14, r31
     f9a:	f7 e0       	ldi	r31, 0x07	; 7
     f9c:	ff 2e       	mov	r15, r31
     f9e:	f0 2d       	mov	r31, r0
     fa0:	01 e0       	ldi	r16, 0x01	; 1
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	44 e6       	ldi	r20, 0x64	; 100
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	66 e6       	ldi	r22, 0x66	; 102
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	88 e6       	ldi	r24, 0x68	; 104
     fb0:	98 e0       	ldi	r25, 0x08	; 8
     fb2:	0e 94 05 05 	call	0xa0a	; 0xa0a <xTaskCreate>
	xTaskCreate(ContinousTask1, "task1", 100, NULL, 1, &TaskHandle1);
     fb6:	0f 2e       	mov	r0, r31
     fb8:	f1 e2       	ldi	r31, 0x21	; 33
     fba:	ef 2e       	mov	r14, r31
     fbc:	f7 e0       	ldi	r31, 0x07	; 7
     fbe:	ff 2e       	mov	r15, r31
     fc0:	f0 2d       	mov	r31, r0
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	44 e6       	ldi	r20, 0x64	; 100
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	6c e6       	ldi	r22, 0x6C	; 108
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	8d ef       	ldi	r24, 0xFD	; 253
     fd0:	97 e0       	ldi	r25, 0x07	; 7
     fd2:	0e 94 05 05 	call	0xa0a	; 0xa0a <xTaskCreate>
	
	vTaskStartScheduler();
     fd6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vTaskStartScheduler>
}
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	08 95       	ret

00000fe6 <usart_send>:
	UCSRC = (1<<UCSZ1) | (1<<UCSZ0) | (1<<URSEL);
	UBRRL = 0x33;
}

void usart_send(char *ch)
{
     fe6:	fc 01       	movw	r30, r24
	
	
	
	while(*ch)
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <usart_send+0xc>
	{
		
		while(!(UCSRA & (1<<UDRE)));
     fea:	5d 9b       	sbis	0x0b, 5	; 11
     fec:	fe cf       	rjmp	.-4      	; 0xfea <usart_send+0x4>
		
		
		UDR = *ch;
     fee:	8c b9       	out	0x0c, r24	; 12
		
		ch++;
     ff0:	31 96       	adiw	r30, 0x01	; 1
void usart_send(char *ch)
{
	
	
	
	while(*ch)
     ff2:	80 81       	ld	r24, Z
     ff4:	81 11       	cpse	r24, r1
     ff6:	f9 cf       	rjmp	.-14     	; 0xfea <usart_send+0x4>
		
		ch++;
	}
	
	
}
     ff8:	08 95       	ret

00000ffa <ContinousTask1>:
	vTaskStartScheduler();
}


void ContinousTask1(void *param)
{
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	6e 97       	sbiw	r28, 0x1e	; 30
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
	
	
	
	while(1)
	{
		if(ulIdleCycleCount > 10)
    100e:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <ulIdleCycleCount>
    1012:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <ulIdleCycleCount+0x1>
    1016:	a0 91 1d 07 	lds	r26, 0x071D	; 0x80071d <ulIdleCycleCount+0x2>
    101a:	b0 91 1e 07 	lds	r27, 0x071E	; 0x80071e <ulIdleCycleCount+0x3>
    101e:	0b 97       	sbiw	r24, 0x0b	; 11
    1020:	a1 05       	cpc	r26, r1
    1022:	b1 05       	cpc	r27, r1
    1024:	88 f1       	brcs	.+98     	; 0x1088 <ContinousTask1+0x8e>
		{
			uxPriority = uxTaskPriorityGet(NULL);
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 59 05 	call	0xab2	; 0xab2 <uxTaskPriorityGet>
    102e:	18 2f       	mov	r17, r24
			vTaskPrioritySet(TaskHandle1, (uxPriority + 2));
    1030:	62 e0       	ldi	r22, 0x02	; 2
    1032:	68 0f       	add	r22, r24
    1034:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <TaskHandle1>
    1038:	90 91 22 07 	lds	r25, 0x0722	; 0x800722 <TaskHandle1+0x1>
    103c:	0e 94 68 05 	call	0xad0	; 0xad0 <vTaskPrioritySet>
			
		    sprintf(str, "Task Priority ---> %d\r",uxPriority);
    1040:	1f 92       	push	r1
    1042:	1f 93       	push	r17
    1044:	82 e7       	ldi	r24, 0x72	; 114
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9f 93       	push	r25
    104a:	8f 93       	push	r24
    104c:	8e 01       	movw	r16, r28
    104e:	0f 5f       	subi	r16, 0xFF	; 255
    1050:	1f 4f       	sbci	r17, 0xFF	; 255
    1052:	1f 93       	push	r17
    1054:	0f 93       	push	r16
    1056:	0e 94 97 08 	call	0x112e	; 0x112e <sprintf>
		    usart_send(str);
    105a:	c8 01       	movw	r24, r16
    105c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <usart_send>
		    sprintf(str, "%s\r",__TIME__);
    1060:	89 e8       	ldi	r24, 0x89	; 137
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9f 93       	push	r25
    1066:	8f 93       	push	r24
    1068:	82 e9       	ldi	r24, 0x92	; 146
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9f 93       	push	r25
    106e:	8f 93       	push	r24
    1070:	1f 93       	push	r17
    1072:	0f 93       	push	r16
    1074:	0e 94 97 08 	call	0x112e	; 0x112e <sprintf>
			usart_send(str);
    1078:	c8 01       	movw	r24, r16
    107a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <usart_send>
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
			
			
		
		}
		
		sprintf(str, "Tick count ---> %lu\r",ulIdleCycleCount);
    1088:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <ulIdleCycleCount>
    108c:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <ulIdleCycleCount+0x1>
    1090:	a0 91 1d 07 	lds	r26, 0x071D	; 0x80071d <ulIdleCycleCount+0x2>
    1094:	b0 91 1e 07 	lds	r27, 0x071E	; 0x80071e <ulIdleCycleCount+0x3>
    1098:	bf 93       	push	r27
    109a:	af 93       	push	r26
    109c:	9f 93       	push	r25
    109e:	8f 93       	push	r24
    10a0:	86 e9       	ldi	r24, 0x96	; 150
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9f 93       	push	r25
    10a6:	8f 93       	push	r24
    10a8:	8e 01       	movw	r16, r28
    10aa:	0f 5f       	subi	r16, 0xFF	; 255
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	1f 93       	push	r17
    10b0:	0f 93       	push	r16
    10b2:	0e 94 97 08 	call	0x112e	; 0x112e <sprintf>
		usart_send(str);
    10b6:	c8 01       	movw	r24, r16
    10b8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <usart_send>
		

		vTaskDelay(1000);
    10bc:	88 ee       	ldi	r24, 0xE8	; 232
    10be:	93 e0       	ldi	r25, 0x03	; 3
    10c0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <vTaskDelay>
		
	}
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	9f cf       	rjmp	.-194    	; 0x100e <ContinousTask1+0x14>

000010d0 <ContinousTask2>:
	
	while(1)
	{
		
		
		usart_send((char*)"continous Task2 is running\r\n");
    10d0:	8b ea       	ldi	r24, 0xAB	; 171
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <usart_send>
		vTaskDelay(1000);
    10d8:	88 ee       	ldi	r24, 0xE8	; 232
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <vTaskDelay>
    10e0:	f7 cf       	rjmp	.-18     	; 0x10d0 <ContinousTask2>

000010e2 <__vector_13>:
	
	
}

ISR (USART_RXC_vect)
{
    10e2:	1f 92       	push	r1
    10e4:	0f 92       	push	r0
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	0f 92       	push	r0
    10ea:	11 24       	eor	r1, r1
    10ec:	2f 93       	push	r18
    10ee:	3f 93       	push	r19
    10f0:	4f 93       	push	r20
    10f2:	5f 93       	push	r21
    10f4:	6f 93       	push	r22
    10f6:	7f 93       	push	r23
    10f8:	8f 93       	push	r24
    10fa:	9f 93       	push	r25
    10fc:	af 93       	push	r26
    10fe:	bf 93       	push	r27
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
	display = UDR;
    1104:	8c b1       	in	r24, 0x0c	; 12
    1106:	8b bb       	out	0x1b, r24	; 27
	DISPLAY();
    1108:	0e 94 95 07 	call	0xf2a	; 0xf2a <DISPLAY>
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <sprintf>:
    112e:	ae e0       	ldi	r26, 0x0E	; 14
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ed e9       	ldi	r30, 0x9D	; 157
    1134:	f8 e0       	ldi	r31, 0x08	; 8
    1136:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__prologue_saves__+0x1c>
    113a:	0d 89       	ldd	r16, Y+21	; 0x15
    113c:	1e 89       	ldd	r17, Y+22	; 0x16
    113e:	86 e0       	ldi	r24, 0x06	; 6
    1140:	8c 83       	std	Y+4, r24	; 0x04
    1142:	1a 83       	std	Y+2, r17	; 0x02
    1144:	09 83       	std	Y+1, r16	; 0x01
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	9f e7       	ldi	r25, 0x7F	; 127
    114a:	9e 83       	std	Y+6, r25	; 0x06
    114c:	8d 83       	std	Y+5, r24	; 0x05
    114e:	ae 01       	movw	r20, r28
    1150:	47 5e       	subi	r20, 0xE7	; 231
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	6f 89       	ldd	r22, Y+23	; 0x17
    1156:	78 8d       	ldd	r23, Y+24	; 0x18
    1158:	ce 01       	movw	r24, r28
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	0e 94 b9 08 	call	0x1172	; 0x1172 <vfprintf>
    1160:	ef 81       	ldd	r30, Y+7	; 0x07
    1162:	f8 85       	ldd	r31, Y+8	; 0x08
    1164:	e0 0f       	add	r30, r16
    1166:	f1 1f       	adc	r31, r17
    1168:	10 82       	st	Z, r1
    116a:	2e 96       	adiw	r28, 0x0e	; 14
    116c:	e4 e0       	ldi	r30, 0x04	; 4
    116e:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__epilogue_restores__+0x1c>

00001172 <vfprintf>:
    1172:	ab e0       	ldi	r26, 0x0B	; 11
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	ef eb       	ldi	r30, 0xBF	; 191
    1178:	f8 e0       	ldi	r31, 0x08	; 8
    117a:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__prologue_saves__>
    117e:	6c 01       	movw	r12, r24
    1180:	7b 01       	movw	r14, r22
    1182:	8a 01       	movw	r16, r20
    1184:	fc 01       	movw	r30, r24
    1186:	17 82       	std	Z+7, r1	; 0x07
    1188:	16 82       	std	Z+6, r1	; 0x06
    118a:	83 81       	ldd	r24, Z+3	; 0x03
    118c:	81 ff       	sbrs	r24, 1
    118e:	cc c1       	rjmp	.+920    	; 0x1528 <vfprintf+0x3b6>
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	3c 01       	movw	r6, r24
    1196:	f6 01       	movw	r30, r12
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	f7 01       	movw	r30, r14
    119c:	93 fd       	sbrc	r25, 3
    119e:	85 91       	lpm	r24, Z+
    11a0:	93 ff       	sbrs	r25, 3
    11a2:	81 91       	ld	r24, Z+
    11a4:	7f 01       	movw	r14, r30
    11a6:	88 23       	and	r24, r24
    11a8:	09 f4       	brne	.+2      	; 0x11ac <vfprintf+0x3a>
    11aa:	ba c1       	rjmp	.+884    	; 0x1520 <vfprintf+0x3ae>
    11ac:	85 32       	cpi	r24, 0x25	; 37
    11ae:	39 f4       	brne	.+14     	; 0x11be <vfprintf+0x4c>
    11b0:	93 fd       	sbrc	r25, 3
    11b2:	85 91       	lpm	r24, Z+
    11b4:	93 ff       	sbrs	r25, 3
    11b6:	81 91       	ld	r24, Z+
    11b8:	7f 01       	movw	r14, r30
    11ba:	85 32       	cpi	r24, 0x25	; 37
    11bc:	29 f4       	brne	.+10     	; 0x11c8 <vfprintf+0x56>
    11be:	b6 01       	movw	r22, r12
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <fputc>
    11c6:	e7 cf       	rjmp	.-50     	; 0x1196 <vfprintf+0x24>
    11c8:	91 2c       	mov	r9, r1
    11ca:	21 2c       	mov	r2, r1
    11cc:	31 2c       	mov	r3, r1
    11ce:	ff e1       	ldi	r31, 0x1F	; 31
    11d0:	f3 15       	cp	r31, r3
    11d2:	d8 f0       	brcs	.+54     	; 0x120a <vfprintf+0x98>
    11d4:	8b 32       	cpi	r24, 0x2B	; 43
    11d6:	79 f0       	breq	.+30     	; 0x11f6 <vfprintf+0x84>
    11d8:	38 f4       	brcc	.+14     	; 0x11e8 <vfprintf+0x76>
    11da:	80 32       	cpi	r24, 0x20	; 32
    11dc:	79 f0       	breq	.+30     	; 0x11fc <vfprintf+0x8a>
    11de:	83 32       	cpi	r24, 0x23	; 35
    11e0:	a1 f4       	brne	.+40     	; 0x120a <vfprintf+0x98>
    11e2:	23 2d       	mov	r18, r3
    11e4:	20 61       	ori	r18, 0x10	; 16
    11e6:	1d c0       	rjmp	.+58     	; 0x1222 <vfprintf+0xb0>
    11e8:	8d 32       	cpi	r24, 0x2D	; 45
    11ea:	61 f0       	breq	.+24     	; 0x1204 <vfprintf+0x92>
    11ec:	80 33       	cpi	r24, 0x30	; 48
    11ee:	69 f4       	brne	.+26     	; 0x120a <vfprintf+0x98>
    11f0:	23 2d       	mov	r18, r3
    11f2:	21 60       	ori	r18, 0x01	; 1
    11f4:	16 c0       	rjmp	.+44     	; 0x1222 <vfprintf+0xb0>
    11f6:	83 2d       	mov	r24, r3
    11f8:	82 60       	ori	r24, 0x02	; 2
    11fa:	38 2e       	mov	r3, r24
    11fc:	e3 2d       	mov	r30, r3
    11fe:	e4 60       	ori	r30, 0x04	; 4
    1200:	3e 2e       	mov	r3, r30
    1202:	2a c0       	rjmp	.+84     	; 0x1258 <vfprintf+0xe6>
    1204:	f3 2d       	mov	r31, r3
    1206:	f8 60       	ori	r31, 0x08	; 8
    1208:	1d c0       	rjmp	.+58     	; 0x1244 <vfprintf+0xd2>
    120a:	37 fc       	sbrc	r3, 7
    120c:	2d c0       	rjmp	.+90     	; 0x1268 <vfprintf+0xf6>
    120e:	20 ed       	ldi	r18, 0xD0	; 208
    1210:	28 0f       	add	r18, r24
    1212:	2a 30       	cpi	r18, 0x0A	; 10
    1214:	40 f0       	brcs	.+16     	; 0x1226 <vfprintf+0xb4>
    1216:	8e 32       	cpi	r24, 0x2E	; 46
    1218:	b9 f4       	brne	.+46     	; 0x1248 <vfprintf+0xd6>
    121a:	36 fc       	sbrc	r3, 6
    121c:	81 c1       	rjmp	.+770    	; 0x1520 <vfprintf+0x3ae>
    121e:	23 2d       	mov	r18, r3
    1220:	20 64       	ori	r18, 0x40	; 64
    1222:	32 2e       	mov	r3, r18
    1224:	19 c0       	rjmp	.+50     	; 0x1258 <vfprintf+0xe6>
    1226:	36 fe       	sbrs	r3, 6
    1228:	06 c0       	rjmp	.+12     	; 0x1236 <vfprintf+0xc4>
    122a:	8a e0       	ldi	r24, 0x0A	; 10
    122c:	98 9e       	mul	r9, r24
    122e:	20 0d       	add	r18, r0
    1230:	11 24       	eor	r1, r1
    1232:	92 2e       	mov	r9, r18
    1234:	11 c0       	rjmp	.+34     	; 0x1258 <vfprintf+0xe6>
    1236:	ea e0       	ldi	r30, 0x0A	; 10
    1238:	2e 9e       	mul	r2, r30
    123a:	20 0d       	add	r18, r0
    123c:	11 24       	eor	r1, r1
    123e:	22 2e       	mov	r2, r18
    1240:	f3 2d       	mov	r31, r3
    1242:	f0 62       	ori	r31, 0x20	; 32
    1244:	3f 2e       	mov	r3, r31
    1246:	08 c0       	rjmp	.+16     	; 0x1258 <vfprintf+0xe6>
    1248:	8c 36       	cpi	r24, 0x6C	; 108
    124a:	21 f4       	brne	.+8      	; 0x1254 <vfprintf+0xe2>
    124c:	83 2d       	mov	r24, r3
    124e:	80 68       	ori	r24, 0x80	; 128
    1250:	38 2e       	mov	r3, r24
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <vfprintf+0xe6>
    1254:	88 36       	cpi	r24, 0x68	; 104
    1256:	41 f4       	brne	.+16     	; 0x1268 <vfprintf+0xf6>
    1258:	f7 01       	movw	r30, r14
    125a:	93 fd       	sbrc	r25, 3
    125c:	85 91       	lpm	r24, Z+
    125e:	93 ff       	sbrs	r25, 3
    1260:	81 91       	ld	r24, Z+
    1262:	7f 01       	movw	r14, r30
    1264:	81 11       	cpse	r24, r1
    1266:	b3 cf       	rjmp	.-154    	; 0x11ce <vfprintf+0x5c>
    1268:	98 2f       	mov	r25, r24
    126a:	9f 7d       	andi	r25, 0xDF	; 223
    126c:	95 54       	subi	r25, 0x45	; 69
    126e:	93 30       	cpi	r25, 0x03	; 3
    1270:	28 f4       	brcc	.+10     	; 0x127c <vfprintf+0x10a>
    1272:	0c 5f       	subi	r16, 0xFC	; 252
    1274:	1f 4f       	sbci	r17, 0xFF	; 255
    1276:	9f e3       	ldi	r25, 0x3F	; 63
    1278:	99 83       	std	Y+1, r25	; 0x01
    127a:	0d c0       	rjmp	.+26     	; 0x1296 <vfprintf+0x124>
    127c:	83 36       	cpi	r24, 0x63	; 99
    127e:	31 f0       	breq	.+12     	; 0x128c <vfprintf+0x11a>
    1280:	83 37       	cpi	r24, 0x73	; 115
    1282:	71 f0       	breq	.+28     	; 0x12a0 <vfprintf+0x12e>
    1284:	83 35       	cpi	r24, 0x53	; 83
    1286:	09 f0       	breq	.+2      	; 0x128a <vfprintf+0x118>
    1288:	59 c0       	rjmp	.+178    	; 0x133c <vfprintf+0x1ca>
    128a:	21 c0       	rjmp	.+66     	; 0x12ce <vfprintf+0x15c>
    128c:	f8 01       	movw	r30, r16
    128e:	80 81       	ld	r24, Z
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	0e 5f       	subi	r16, 0xFE	; 254
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	88 24       	eor	r8, r8
    1298:	83 94       	inc	r8
    129a:	91 2c       	mov	r9, r1
    129c:	53 01       	movw	r10, r6
    129e:	13 c0       	rjmp	.+38     	; 0x12c6 <vfprintf+0x154>
    12a0:	28 01       	movw	r4, r16
    12a2:	f2 e0       	ldi	r31, 0x02	; 2
    12a4:	4f 0e       	add	r4, r31
    12a6:	51 1c       	adc	r5, r1
    12a8:	f8 01       	movw	r30, r16
    12aa:	a0 80       	ld	r10, Z
    12ac:	b1 80       	ldd	r11, Z+1	; 0x01
    12ae:	36 fe       	sbrs	r3, 6
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <vfprintf+0x146>
    12b2:	69 2d       	mov	r22, r9
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <vfprintf+0x14a>
    12b8:	6f ef       	ldi	r22, 0xFF	; 255
    12ba:	7f ef       	ldi	r23, 0xFF	; 255
    12bc:	c5 01       	movw	r24, r10
    12be:	0e 94 a5 0a 	call	0x154a	; 0x154a <strnlen>
    12c2:	4c 01       	movw	r8, r24
    12c4:	82 01       	movw	r16, r4
    12c6:	f3 2d       	mov	r31, r3
    12c8:	ff 77       	andi	r31, 0x7F	; 127
    12ca:	3f 2e       	mov	r3, r31
    12cc:	16 c0       	rjmp	.+44     	; 0x12fa <vfprintf+0x188>
    12ce:	28 01       	movw	r4, r16
    12d0:	22 e0       	ldi	r18, 0x02	; 2
    12d2:	42 0e       	add	r4, r18
    12d4:	51 1c       	adc	r5, r1
    12d6:	f8 01       	movw	r30, r16
    12d8:	a0 80       	ld	r10, Z
    12da:	b1 80       	ldd	r11, Z+1	; 0x01
    12dc:	36 fe       	sbrs	r3, 6
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <vfprintf+0x174>
    12e0:	69 2d       	mov	r22, r9
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <vfprintf+0x178>
    12e6:	6f ef       	ldi	r22, 0xFF	; 255
    12e8:	7f ef       	ldi	r23, 0xFF	; 255
    12ea:	c5 01       	movw	r24, r10
    12ec:	0e 94 9a 0a 	call	0x1534	; 0x1534 <strnlen_P>
    12f0:	4c 01       	movw	r8, r24
    12f2:	f3 2d       	mov	r31, r3
    12f4:	f0 68       	ori	r31, 0x80	; 128
    12f6:	3f 2e       	mov	r3, r31
    12f8:	82 01       	movw	r16, r4
    12fa:	33 fc       	sbrc	r3, 3
    12fc:	1b c0       	rjmp	.+54     	; 0x1334 <vfprintf+0x1c2>
    12fe:	82 2d       	mov	r24, r2
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	88 16       	cp	r8, r24
    1304:	99 06       	cpc	r9, r25
    1306:	b0 f4       	brcc	.+44     	; 0x1334 <vfprintf+0x1c2>
    1308:	b6 01       	movw	r22, r12
    130a:	80 e2       	ldi	r24, 0x20	; 32
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <fputc>
    1312:	2a 94       	dec	r2
    1314:	f4 cf       	rjmp	.-24     	; 0x12fe <vfprintf+0x18c>
    1316:	f5 01       	movw	r30, r10
    1318:	37 fc       	sbrc	r3, 7
    131a:	85 91       	lpm	r24, Z+
    131c:	37 fe       	sbrs	r3, 7
    131e:	81 91       	ld	r24, Z+
    1320:	5f 01       	movw	r10, r30
    1322:	b6 01       	movw	r22, r12
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 b0 0a 	call	0x1560	; 0x1560 <fputc>
    132a:	21 10       	cpse	r2, r1
    132c:	2a 94       	dec	r2
    132e:	21 e0       	ldi	r18, 0x01	; 1
    1330:	82 1a       	sub	r8, r18
    1332:	91 08       	sbc	r9, r1
    1334:	81 14       	cp	r8, r1
    1336:	91 04       	cpc	r9, r1
    1338:	71 f7       	brne	.-36     	; 0x1316 <vfprintf+0x1a4>
    133a:	e8 c0       	rjmp	.+464    	; 0x150c <vfprintf+0x39a>
    133c:	84 36       	cpi	r24, 0x64	; 100
    133e:	11 f0       	breq	.+4      	; 0x1344 <vfprintf+0x1d2>
    1340:	89 36       	cpi	r24, 0x69	; 105
    1342:	41 f5       	brne	.+80     	; 0x1394 <vfprintf+0x222>
    1344:	f8 01       	movw	r30, r16
    1346:	37 fe       	sbrs	r3, 7
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <vfprintf+0x1e6>
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	0c 5f       	subi	r16, 0xFC	; 252
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <vfprintf+0x1f6>
    1358:	60 81       	ld	r22, Z
    135a:	71 81       	ldd	r23, Z+1	; 0x01
    135c:	07 2e       	mov	r0, r23
    135e:	00 0c       	add	r0, r0
    1360:	88 0b       	sbc	r24, r24
    1362:	99 0b       	sbc	r25, r25
    1364:	0e 5f       	subi	r16, 0xFE	; 254
    1366:	1f 4f       	sbci	r17, 0xFF	; 255
    1368:	f3 2d       	mov	r31, r3
    136a:	ff 76       	andi	r31, 0x6F	; 111
    136c:	3f 2e       	mov	r3, r31
    136e:	97 ff       	sbrs	r25, 7
    1370:	09 c0       	rjmp	.+18     	; 0x1384 <vfprintf+0x212>
    1372:	90 95       	com	r25
    1374:	80 95       	com	r24
    1376:	70 95       	com	r23
    1378:	61 95       	neg	r22
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	8f 4f       	sbci	r24, 0xFF	; 255
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	f0 68       	ori	r31, 0x80	; 128
    1382:	3f 2e       	mov	r3, r31
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	a3 01       	movw	r20, r6
    138a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__ultoa_invert>
    138e:	88 2e       	mov	r8, r24
    1390:	86 18       	sub	r8, r6
    1392:	45 c0       	rjmp	.+138    	; 0x141e <vfprintf+0x2ac>
    1394:	85 37       	cpi	r24, 0x75	; 117
    1396:	31 f4       	brne	.+12     	; 0x13a4 <vfprintf+0x232>
    1398:	23 2d       	mov	r18, r3
    139a:	2f 7e       	andi	r18, 0xEF	; 239
    139c:	b2 2e       	mov	r11, r18
    139e:	2a e0       	ldi	r18, 0x0A	; 10
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	25 c0       	rjmp	.+74     	; 0x13ee <vfprintf+0x27c>
    13a4:	93 2d       	mov	r25, r3
    13a6:	99 7f       	andi	r25, 0xF9	; 249
    13a8:	b9 2e       	mov	r11, r25
    13aa:	8f 36       	cpi	r24, 0x6F	; 111
    13ac:	c1 f0       	breq	.+48     	; 0x13de <vfprintf+0x26c>
    13ae:	18 f4       	brcc	.+6      	; 0x13b6 <vfprintf+0x244>
    13b0:	88 35       	cpi	r24, 0x58	; 88
    13b2:	79 f0       	breq	.+30     	; 0x13d2 <vfprintf+0x260>
    13b4:	b5 c0       	rjmp	.+362    	; 0x1520 <vfprintf+0x3ae>
    13b6:	80 37       	cpi	r24, 0x70	; 112
    13b8:	19 f0       	breq	.+6      	; 0x13c0 <vfprintf+0x24e>
    13ba:	88 37       	cpi	r24, 0x78	; 120
    13bc:	21 f0       	breq	.+8      	; 0x13c6 <vfprintf+0x254>
    13be:	b0 c0       	rjmp	.+352    	; 0x1520 <vfprintf+0x3ae>
    13c0:	e9 2f       	mov	r30, r25
    13c2:	e0 61       	ori	r30, 0x10	; 16
    13c4:	be 2e       	mov	r11, r30
    13c6:	b4 fe       	sbrs	r11, 4
    13c8:	0d c0       	rjmp	.+26     	; 0x13e4 <vfprintf+0x272>
    13ca:	fb 2d       	mov	r31, r11
    13cc:	f4 60       	ori	r31, 0x04	; 4
    13ce:	bf 2e       	mov	r11, r31
    13d0:	09 c0       	rjmp	.+18     	; 0x13e4 <vfprintf+0x272>
    13d2:	34 fe       	sbrs	r3, 4
    13d4:	0a c0       	rjmp	.+20     	; 0x13ea <vfprintf+0x278>
    13d6:	29 2f       	mov	r18, r25
    13d8:	26 60       	ori	r18, 0x06	; 6
    13da:	b2 2e       	mov	r11, r18
    13dc:	06 c0       	rjmp	.+12     	; 0x13ea <vfprintf+0x278>
    13de:	28 e0       	ldi	r18, 0x08	; 8
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	05 c0       	rjmp	.+10     	; 0x13ee <vfprintf+0x27c>
    13e4:	20 e1       	ldi	r18, 0x10	; 16
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <vfprintf+0x27c>
    13ea:	20 e1       	ldi	r18, 0x10	; 16
    13ec:	32 e0       	ldi	r19, 0x02	; 2
    13ee:	f8 01       	movw	r30, r16
    13f0:	b7 fe       	sbrs	r11, 7
    13f2:	07 c0       	rjmp	.+14     	; 0x1402 <vfprintf+0x290>
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	0c 5f       	subi	r16, 0xFC	; 252
    13fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1400:	06 c0       	rjmp	.+12     	; 0x140e <vfprintf+0x29c>
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 5f       	subi	r16, 0xFE	; 254
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
    140e:	a3 01       	movw	r20, r6
    1410:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__ultoa_invert>
    1414:	88 2e       	mov	r8, r24
    1416:	86 18       	sub	r8, r6
    1418:	fb 2d       	mov	r31, r11
    141a:	ff 77       	andi	r31, 0x7F	; 127
    141c:	3f 2e       	mov	r3, r31
    141e:	36 fe       	sbrs	r3, 6
    1420:	0d c0       	rjmp	.+26     	; 0x143c <vfprintf+0x2ca>
    1422:	23 2d       	mov	r18, r3
    1424:	2e 7f       	andi	r18, 0xFE	; 254
    1426:	a2 2e       	mov	r10, r18
    1428:	89 14       	cp	r8, r9
    142a:	58 f4       	brcc	.+22     	; 0x1442 <vfprintf+0x2d0>
    142c:	34 fe       	sbrs	r3, 4
    142e:	0b c0       	rjmp	.+22     	; 0x1446 <vfprintf+0x2d4>
    1430:	32 fc       	sbrc	r3, 2
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <vfprintf+0x2d4>
    1434:	83 2d       	mov	r24, r3
    1436:	8e 7e       	andi	r24, 0xEE	; 238
    1438:	a8 2e       	mov	r10, r24
    143a:	05 c0       	rjmp	.+10     	; 0x1446 <vfprintf+0x2d4>
    143c:	b8 2c       	mov	r11, r8
    143e:	a3 2c       	mov	r10, r3
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <vfprintf+0x2d6>
    1442:	b8 2c       	mov	r11, r8
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <vfprintf+0x2d6>
    1446:	b9 2c       	mov	r11, r9
    1448:	a4 fe       	sbrs	r10, 4
    144a:	0f c0       	rjmp	.+30     	; 0x146a <vfprintf+0x2f8>
    144c:	fe 01       	movw	r30, r28
    144e:	e8 0d       	add	r30, r8
    1450:	f1 1d       	adc	r31, r1
    1452:	80 81       	ld	r24, Z
    1454:	80 33       	cpi	r24, 0x30	; 48
    1456:	21 f4       	brne	.+8      	; 0x1460 <vfprintf+0x2ee>
    1458:	9a 2d       	mov	r25, r10
    145a:	99 7e       	andi	r25, 0xE9	; 233
    145c:	a9 2e       	mov	r10, r25
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <vfprintf+0x300>
    1460:	a2 fe       	sbrs	r10, 2
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <vfprintf+0x2fe>
    1464:	b3 94       	inc	r11
    1466:	b3 94       	inc	r11
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <vfprintf+0x300>
    146a:	8a 2d       	mov	r24, r10
    146c:	86 78       	andi	r24, 0x86	; 134
    146e:	09 f0       	breq	.+2      	; 0x1472 <vfprintf+0x300>
    1470:	b3 94       	inc	r11
    1472:	a3 fc       	sbrc	r10, 3
    1474:	11 c0       	rjmp	.+34     	; 0x1498 <vfprintf+0x326>
    1476:	a0 fe       	sbrs	r10, 0
    1478:	06 c0       	rjmp	.+12     	; 0x1486 <vfprintf+0x314>
    147a:	b2 14       	cp	r11, r2
    147c:	88 f4       	brcc	.+34     	; 0x14a0 <vfprintf+0x32e>
    147e:	28 0c       	add	r2, r8
    1480:	92 2c       	mov	r9, r2
    1482:	9b 18       	sub	r9, r11
    1484:	0e c0       	rjmp	.+28     	; 0x14a2 <vfprintf+0x330>
    1486:	b2 14       	cp	r11, r2
    1488:	60 f4       	brcc	.+24     	; 0x14a2 <vfprintf+0x330>
    148a:	b6 01       	movw	r22, r12
    148c:	80 e2       	ldi	r24, 0x20	; 32
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 b0 0a 	call	0x1560	; 0x1560 <fputc>
    1494:	b3 94       	inc	r11
    1496:	f7 cf       	rjmp	.-18     	; 0x1486 <vfprintf+0x314>
    1498:	b2 14       	cp	r11, r2
    149a:	18 f4       	brcc	.+6      	; 0x14a2 <vfprintf+0x330>
    149c:	2b 18       	sub	r2, r11
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <vfprintf+0x332>
    14a0:	98 2c       	mov	r9, r8
    14a2:	21 2c       	mov	r2, r1
    14a4:	a4 fe       	sbrs	r10, 4
    14a6:	10 c0       	rjmp	.+32     	; 0x14c8 <vfprintf+0x356>
    14a8:	b6 01       	movw	r22, r12
    14aa:	80 e3       	ldi	r24, 0x30	; 48
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 b0 0a 	call	0x1560	; 0x1560 <fputc>
    14b2:	a2 fe       	sbrs	r10, 2
    14b4:	17 c0       	rjmp	.+46     	; 0x14e4 <vfprintf+0x372>
    14b6:	a1 fc       	sbrc	r10, 1
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <vfprintf+0x34e>
    14ba:	88 e7       	ldi	r24, 0x78	; 120
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <vfprintf+0x352>
    14c0:	88 e5       	ldi	r24, 0x58	; 88
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	b6 01       	movw	r22, r12
    14c6:	0c c0       	rjmp	.+24     	; 0x14e0 <vfprintf+0x36e>
    14c8:	8a 2d       	mov	r24, r10
    14ca:	86 78       	andi	r24, 0x86	; 134
    14cc:	59 f0       	breq	.+22     	; 0x14e4 <vfprintf+0x372>
    14ce:	a1 fe       	sbrs	r10, 1
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <vfprintf+0x364>
    14d2:	8b e2       	ldi	r24, 0x2B	; 43
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <vfprintf+0x366>
    14d6:	80 e2       	ldi	r24, 0x20	; 32
    14d8:	a7 fc       	sbrc	r10, 7
    14da:	8d e2       	ldi	r24, 0x2D	; 45
    14dc:	b6 01       	movw	r22, r12
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <fputc>
    14e4:	89 14       	cp	r8, r9
    14e6:	38 f4       	brcc	.+14     	; 0x14f6 <vfprintf+0x384>
    14e8:	b6 01       	movw	r22, r12
    14ea:	80 e3       	ldi	r24, 0x30	; 48
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 b0 0a 	call	0x1560	; 0x1560 <fputc>
    14f2:	9a 94       	dec	r9
    14f4:	f7 cf       	rjmp	.-18     	; 0x14e4 <vfprintf+0x372>
    14f6:	8a 94       	dec	r8
    14f8:	f3 01       	movw	r30, r6
    14fa:	e8 0d       	add	r30, r8
    14fc:	f1 1d       	adc	r31, r1
    14fe:	80 81       	ld	r24, Z
    1500:	b6 01       	movw	r22, r12
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 b0 0a 	call	0x1560	; 0x1560 <fputc>
    1508:	81 10       	cpse	r8, r1
    150a:	f5 cf       	rjmp	.-22     	; 0x14f6 <vfprintf+0x384>
    150c:	22 20       	and	r2, r2
    150e:	09 f4       	brne	.+2      	; 0x1512 <vfprintf+0x3a0>
    1510:	42 ce       	rjmp	.-892    	; 0x1196 <vfprintf+0x24>
    1512:	b6 01       	movw	r22, r12
    1514:	80 e2       	ldi	r24, 0x20	; 32
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 b0 0a 	call	0x1560	; 0x1560 <fputc>
    151c:	2a 94       	dec	r2
    151e:	f6 cf       	rjmp	.-20     	; 0x150c <vfprintf+0x39a>
    1520:	f6 01       	movw	r30, r12
    1522:	86 81       	ldd	r24, Z+6	; 0x06
    1524:	97 81       	ldd	r25, Z+7	; 0x07
    1526:	02 c0       	rjmp	.+4      	; 0x152c <vfprintf+0x3ba>
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	9f ef       	ldi	r25, 0xFF	; 255
    152c:	2b 96       	adiw	r28, 0x0b	; 11
    152e:	e2 e1       	ldi	r30, 0x12	; 18
    1530:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__epilogue_restores__>

00001534 <strnlen_P>:
    1534:	fc 01       	movw	r30, r24
    1536:	05 90       	lpm	r0, Z+
    1538:	61 50       	subi	r22, 0x01	; 1
    153a:	70 40       	sbci	r23, 0x00	; 0
    153c:	01 10       	cpse	r0, r1
    153e:	d8 f7       	brcc	.-10     	; 0x1536 <strnlen_P+0x2>
    1540:	80 95       	com	r24
    1542:	90 95       	com	r25
    1544:	8e 0f       	add	r24, r30
    1546:	9f 1f       	adc	r25, r31
    1548:	08 95       	ret

0000154a <strnlen>:
    154a:	fc 01       	movw	r30, r24
    154c:	61 50       	subi	r22, 0x01	; 1
    154e:	70 40       	sbci	r23, 0x00	; 0
    1550:	01 90       	ld	r0, Z+
    1552:	01 10       	cpse	r0, r1
    1554:	d8 f7       	brcc	.-10     	; 0x154c <strnlen+0x2>
    1556:	80 95       	com	r24
    1558:	90 95       	com	r25
    155a:	8e 0f       	add	r24, r30
    155c:	9f 1f       	adc	r25, r31
    155e:	08 95       	ret

00001560 <fputc>:
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	fb 01       	movw	r30, r22
    156a:	23 81       	ldd	r18, Z+3	; 0x03
    156c:	21 fd       	sbrc	r18, 1
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <fputc+0x16>
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	9f ef       	ldi	r25, 0xFF	; 255
    1574:	2c c0       	rjmp	.+88     	; 0x15ce <fputc+0x6e>
    1576:	22 ff       	sbrs	r18, 2
    1578:	16 c0       	rjmp	.+44     	; 0x15a6 <fputc+0x46>
    157a:	46 81       	ldd	r20, Z+6	; 0x06
    157c:	57 81       	ldd	r21, Z+7	; 0x07
    157e:	24 81       	ldd	r18, Z+4	; 0x04
    1580:	35 81       	ldd	r19, Z+5	; 0x05
    1582:	42 17       	cp	r20, r18
    1584:	53 07       	cpc	r21, r19
    1586:	44 f4       	brge	.+16     	; 0x1598 <fputc+0x38>
    1588:	a0 81       	ld	r26, Z
    158a:	b1 81       	ldd	r27, Z+1	; 0x01
    158c:	9d 01       	movw	r18, r26
    158e:	2f 5f       	subi	r18, 0xFF	; 255
    1590:	3f 4f       	sbci	r19, 0xFF	; 255
    1592:	31 83       	std	Z+1, r19	; 0x01
    1594:	20 83       	st	Z, r18
    1596:	8c 93       	st	X, r24
    1598:	26 81       	ldd	r18, Z+6	; 0x06
    159a:	37 81       	ldd	r19, Z+7	; 0x07
    159c:	2f 5f       	subi	r18, 0xFF	; 255
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	37 83       	std	Z+7, r19	; 0x07
    15a2:	26 83       	std	Z+6, r18	; 0x06
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <fputc+0x6e>
    15a6:	8b 01       	movw	r16, r22
    15a8:	ec 01       	movw	r28, r24
    15aa:	fb 01       	movw	r30, r22
    15ac:	00 84       	ldd	r0, Z+8	; 0x08
    15ae:	f1 85       	ldd	r31, Z+9	; 0x09
    15b0:	e0 2d       	mov	r30, r0
    15b2:	09 95       	icall
    15b4:	89 2b       	or	r24, r25
    15b6:	e1 f6       	brne	.-72     	; 0x1570 <fputc+0x10>
    15b8:	d8 01       	movw	r26, r16
    15ba:	16 96       	adiw	r26, 0x06	; 6
    15bc:	8d 91       	ld	r24, X+
    15be:	9c 91       	ld	r25, X
    15c0:	17 97       	sbiw	r26, 0x07	; 7
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	17 96       	adiw	r26, 0x07	; 7
    15c6:	9c 93       	st	X, r25
    15c8:	8e 93       	st	-X, r24
    15ca:	16 97       	sbiw	r26, 0x06	; 6
    15cc:	ce 01       	movw	r24, r28
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <__ultoa_invert>:
    15d8:	fa 01       	movw	r30, r20
    15da:	aa 27       	eor	r26, r26
    15dc:	28 30       	cpi	r18, 0x08	; 8
    15de:	51 f1       	breq	.+84     	; 0x1634 <__ultoa_invert+0x5c>
    15e0:	20 31       	cpi	r18, 0x10	; 16
    15e2:	81 f1       	breq	.+96     	; 0x1644 <__ultoa_invert+0x6c>
    15e4:	e8 94       	clt
    15e6:	6f 93       	push	r22
    15e8:	6e 7f       	andi	r22, 0xFE	; 254
    15ea:	6e 5f       	subi	r22, 0xFE	; 254
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	8f 4f       	sbci	r24, 0xFF	; 255
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	af 4f       	sbci	r26, 0xFF	; 255
    15f4:	b1 e0       	ldi	r27, 0x01	; 1
    15f6:	3e d0       	rcall	.+124    	; 0x1674 <__ultoa_invert+0x9c>
    15f8:	b4 e0       	ldi	r27, 0x04	; 4
    15fa:	3c d0       	rcall	.+120    	; 0x1674 <__ultoa_invert+0x9c>
    15fc:	67 0f       	add	r22, r23
    15fe:	78 1f       	adc	r23, r24
    1600:	89 1f       	adc	r24, r25
    1602:	9a 1f       	adc	r25, r26
    1604:	a1 1d       	adc	r26, r1
    1606:	68 0f       	add	r22, r24
    1608:	79 1f       	adc	r23, r25
    160a:	8a 1f       	adc	r24, r26
    160c:	91 1d       	adc	r25, r1
    160e:	a1 1d       	adc	r26, r1
    1610:	6a 0f       	add	r22, r26
    1612:	71 1d       	adc	r23, r1
    1614:	81 1d       	adc	r24, r1
    1616:	91 1d       	adc	r25, r1
    1618:	a1 1d       	adc	r26, r1
    161a:	20 d0       	rcall	.+64     	; 0x165c <__ultoa_invert+0x84>
    161c:	09 f4       	brne	.+2      	; 0x1620 <__ultoa_invert+0x48>
    161e:	68 94       	set
    1620:	3f 91       	pop	r19
    1622:	2a e0       	ldi	r18, 0x0A	; 10
    1624:	26 9f       	mul	r18, r22
    1626:	11 24       	eor	r1, r1
    1628:	30 19       	sub	r19, r0
    162a:	30 5d       	subi	r19, 0xD0	; 208
    162c:	31 93       	st	Z+, r19
    162e:	de f6       	brtc	.-74     	; 0x15e6 <__ultoa_invert+0xe>
    1630:	cf 01       	movw	r24, r30
    1632:	08 95       	ret
    1634:	46 2f       	mov	r20, r22
    1636:	47 70       	andi	r20, 0x07	; 7
    1638:	40 5d       	subi	r20, 0xD0	; 208
    163a:	41 93       	st	Z+, r20
    163c:	b3 e0       	ldi	r27, 0x03	; 3
    163e:	0f d0       	rcall	.+30     	; 0x165e <__ultoa_invert+0x86>
    1640:	c9 f7       	brne	.-14     	; 0x1634 <__ultoa_invert+0x5c>
    1642:	f6 cf       	rjmp	.-20     	; 0x1630 <__ultoa_invert+0x58>
    1644:	46 2f       	mov	r20, r22
    1646:	4f 70       	andi	r20, 0x0F	; 15
    1648:	40 5d       	subi	r20, 0xD0	; 208
    164a:	4a 33       	cpi	r20, 0x3A	; 58
    164c:	18 f0       	brcs	.+6      	; 0x1654 <__ultoa_invert+0x7c>
    164e:	49 5d       	subi	r20, 0xD9	; 217
    1650:	31 fd       	sbrc	r19, 1
    1652:	40 52       	subi	r20, 0x20	; 32
    1654:	41 93       	st	Z+, r20
    1656:	02 d0       	rcall	.+4      	; 0x165c <__ultoa_invert+0x84>
    1658:	a9 f7       	brne	.-22     	; 0x1644 <__ultoa_invert+0x6c>
    165a:	ea cf       	rjmp	.-44     	; 0x1630 <__ultoa_invert+0x58>
    165c:	b4 e0       	ldi	r27, 0x04	; 4
    165e:	a6 95       	lsr	r26
    1660:	97 95       	ror	r25
    1662:	87 95       	ror	r24
    1664:	77 95       	ror	r23
    1666:	67 95       	ror	r22
    1668:	ba 95       	dec	r27
    166a:	c9 f7       	brne	.-14     	; 0x165e <__ultoa_invert+0x86>
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	61 05       	cpc	r22, r1
    1670:	71 05       	cpc	r23, r1
    1672:	08 95       	ret
    1674:	9b 01       	movw	r18, r22
    1676:	ac 01       	movw	r20, r24
    1678:	0a 2e       	mov	r0, r26
    167a:	06 94       	lsr	r0
    167c:	57 95       	ror	r21
    167e:	47 95       	ror	r20
    1680:	37 95       	ror	r19
    1682:	27 95       	ror	r18
    1684:	ba 95       	dec	r27
    1686:	c9 f7       	brne	.-14     	; 0x167a <__ultoa_invert+0xa2>
    1688:	62 0f       	add	r22, r18
    168a:	73 1f       	adc	r23, r19
    168c:	84 1f       	adc	r24, r20
    168e:	95 1f       	adc	r25, r21
    1690:	a0 1d       	adc	r26, r0
    1692:	08 95       	ret

00001694 <__prologue_saves__>:
    1694:	2f 92       	push	r2
    1696:	3f 92       	push	r3
    1698:	4f 92       	push	r4
    169a:	5f 92       	push	r5
    169c:	6f 92       	push	r6
    169e:	7f 92       	push	r7
    16a0:	8f 92       	push	r8
    16a2:	9f 92       	push	r9
    16a4:	af 92       	push	r10
    16a6:	bf 92       	push	r11
    16a8:	cf 92       	push	r12
    16aa:	df 92       	push	r13
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	ca 1b       	sub	r28, r26
    16be:	db 0b       	sbc	r29, r27
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	09 94       	ijmp

000016cc <__epilogue_restores__>:
    16cc:	2a 88       	ldd	r2, Y+18	; 0x12
    16ce:	39 88       	ldd	r3, Y+17	; 0x11
    16d0:	48 88       	ldd	r4, Y+16	; 0x10
    16d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    16d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    16d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    16d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    16da:	9b 84       	ldd	r9, Y+11	; 0x0b
    16dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    16de:	b9 84       	ldd	r11, Y+9	; 0x09
    16e0:	c8 84       	ldd	r12, Y+8	; 0x08
    16e2:	df 80       	ldd	r13, Y+7	; 0x07
    16e4:	ee 80       	ldd	r14, Y+6	; 0x06
    16e6:	fd 80       	ldd	r15, Y+5	; 0x05
    16e8:	0c 81       	ldd	r16, Y+4	; 0x04
    16ea:	1b 81       	ldd	r17, Y+3	; 0x03
    16ec:	aa 81       	ldd	r26, Y+2	; 0x02
    16ee:	b9 81       	ldd	r27, Y+1	; 0x01
    16f0:	ce 0f       	add	r28, r30
    16f2:	d1 1d       	adc	r29, r1
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	ed 01       	movw	r28, r26
    1700:	08 95       	ret

00001702 <_exit>:
    1702:	f8 94       	cli

00001704 <__stop_program>:
    1704:	ff cf       	rjmp	.-2      	; 0x1704 <__stop_program>
