
lcd_interfacing_rnxg_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f9  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d8  00000000  00000000  0000098d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  00000f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036e  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000142  00000000  00000000  00001646  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 80 00 	call	0x100	; 0x100 <main>
  7a:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <command>:

void command()
{


	PORTB=PORTB & ~ (1<<RS);  
  82:	88 b3       	in	r24, 0x18	; 24
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~ (1<<RW) ;
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	8d 7f       	andi	r24, 0xFD	; 253
  8c:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB  | (1<<E);
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	84 60       	ori	r24, 0x04	; 4
  92:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~(1<<E);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e1       	ldi	r24, 0x1F	; 31
  9c:	9e e4       	ldi	r25, 0x4E	; 78
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <command+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <command+0x22>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <lcd_init>:
}

void lcd_init()
{
   
	DDRA = DDRB = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	87 bb       	out	0x17, r24	; 23
  ac:	8a bb       	out	0x1a, r24	; 26
	
	display=0x38;  // selecting the 2 line 5x7 matrix
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	8b bb       	out	0x1b, r24	; 27
	command();
  b2:	0e 94 41 00 	call	0x82	; 0x82 <command>

	display=0x01;  // clear the lcd display. 
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	8b bb       	out	0x1b, r24	; 27
	command();
  ba:	0e 94 41 00 	call	0x82	; 0x82 <command>

	display=0x0C;  // cursor off display on. 
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	8b bb       	out	0x1b, r24	; 27
	command();
  c2:	0e 94 41 00 	call	0x82	; 0x82 <command>

	display=0x06;  // increment cursor
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	8b bb       	out	0x1b, r24	; 27
	command();
  ca:	0e 94 41 00 	call	0x82	; 0x82 <command>

	display=0x80;  // cursor at beginning of first line. 
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	8b bb       	out	0x1b, r24	; 27
	command();
  d2:	0e 94 41 00 	call	0x82	; 0x82 <command>
  d6:	08 95       	ret

000000d8 <DISPLAY>:


void DISPLAY(char ch)
{
 
    display = ch;
  d8:	8b bb       	out	0x1b, r24	; 27

	PORTB=PORTB | (1<<RS);
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~ (1<<RW);
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	8d 7f       	andi	r24, 0xFD	; 253
  e4:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB  | (1<<E);
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~(1<<E);
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	8f e1       	ldi	r24, 0x1F	; 31
  f4:	9e e4       	ldi	r25, 0x4E	; 78
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <DISPLAY+0x1e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <DISPLAY+0x24>
  fc:	00 00       	nop
  fe:	08 95       	ret

00000100 <main>:
	_delay_ms(10);
}


int main()
{
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	2d 97       	sbiw	r28, 0x0d	; 13
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
	char z[] = "Hello World!";
 118:	8d e0       	ldi	r24, 0x0D	; 13
 11a:	e0 e6       	ldi	r30, 0x60	; 96
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	de 01       	movw	r26, r28
 120:	11 96       	adiw	r26, 0x01	; 1
 122:	01 90       	ld	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	8a 95       	dec	r24
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x22>
	int i  = 0;
	
	lcd_init();
 12a:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_init>


int main()
{
	char z[] = "Hello World!";
	int i  = 0;
 12e:	00 e0       	ldi	r16, 0x00	; 0
 130:	10 e0       	ldi	r17, 0x00	; 0
	
	lcd_init();
	
	while(z[i])
 132:	04 c0       	rjmp	.+8      	; 0x13c <main+0x3c>
	{
		DISPLAY(z[i]);
 134:	0e 94 6c 00 	call	0xd8	; 0xd8 <DISPLAY>
		i++;
 138:	0f 5f       	subi	r16, 0xFF	; 255
 13a:	1f 4f       	sbci	r17, 0xFF	; 255
	char z[] = "Hello World!";
	int i  = 0;
	
	lcd_init();
	
	while(z[i])
 13c:	e1 e0       	ldi	r30, 0x01	; 1
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	ec 0f       	add	r30, r28
 142:	fd 1f       	adc	r31, r29
 144:	e0 0f       	add	r30, r16
 146:	f1 1f       	adc	r31, r17
 148:	80 81       	ld	r24, Z
 14a:	81 11       	cpse	r24, r1
 14c:	f3 cf       	rjmp	.-26     	; 0x134 <main+0x34>
		DISPLAY(z[i]);
		i++;
	}
	
	
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	2d 96       	adiw	r28, 0x0d	; 13
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
