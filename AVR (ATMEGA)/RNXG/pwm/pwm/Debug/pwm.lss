
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000e20  00000eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064a  00800072  00800072  00000ec6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029d2  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2a  00000000  00000000  00003b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aa9  00000000  00000000  00004798  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000079c  00000000  00000000  00006244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001134  00000000  00000000  000069e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000264c  00000000  00000000  00007b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3b       	cpi	r26, 0xBC	; 188
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <main>
  8a:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vListInitialise>:
    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
  92:	fc 01       	movw	r30, r24
  94:	03 96       	adiw	r24, 0x03	; 3
  96:	92 83       	std	Z+2, r25	; 0x02
  98:	81 83       	std	Z+1, r24	; 0x01
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	3f ef       	ldi	r19, 0xFF	; 255
  9e:	34 83       	std	Z+4, r19	; 0x04
  a0:	23 83       	std	Z+3, r18	; 0x03
  a2:	96 83       	std	Z+6, r25	; 0x06
  a4:	85 83       	std	Z+5, r24	; 0x05
  a6:	90 87       	std	Z+8, r25	; 0x08
  a8:	87 83       	std	Z+7, r24	; 0x07
  aa:	10 82       	st	Z, r1
  ac:	08 95       	ret

000000ae <vListInitialiseItem>:
  ae:	fc 01       	movw	r30, r24
  b0:	11 86       	std	Z+9, r1	; 0x09
  b2:	10 86       	std	Z+8, r1	; 0x08
  b4:	08 95       	ret

000000b6 <vListInsertEnd>:
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	9c 01       	movw	r18, r24
  bc:	fb 01       	movw	r30, r22
  be:	dc 01       	movw	r26, r24
  c0:	11 96       	adiw	r26, 0x01	; 1
  c2:	cd 91       	ld	r28, X+
  c4:	dc 91       	ld	r29, X
  c6:	12 97       	sbiw	r26, 0x02	; 2
  c8:	d3 83       	std	Z+3, r29	; 0x03
  ca:	c2 83       	std	Z+2, r28	; 0x02
  cc:	8c 81       	ldd	r24, Y+4	; 0x04
  ce:	9d 81       	ldd	r25, Y+5	; 0x05
  d0:	95 83       	std	Z+5, r25	; 0x05
  d2:	84 83       	std	Z+4, r24	; 0x04
  d4:	8c 81       	ldd	r24, Y+4	; 0x04
  d6:	9d 81       	ldd	r25, Y+5	; 0x05
  d8:	dc 01       	movw	r26, r24
  da:	13 96       	adiw	r26, 0x03	; 3
  dc:	7c 93       	st	X, r23
  de:	6e 93       	st	-X, r22
  e0:	12 97       	sbiw	r26, 0x02	; 2
  e2:	7d 83       	std	Y+5, r23	; 0x05
  e4:	6c 83       	std	Y+4, r22	; 0x04
  e6:	31 87       	std	Z+9, r19	; 0x09
  e8:	20 87       	std	Z+8, r18	; 0x08
  ea:	f9 01       	movw	r30, r18
  ec:	80 81       	ld	r24, Z
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 83       	st	Z, r24
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
  fe:	a0 85       	ldd	r26, Z+8	; 0x08
 100:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 102:	c2 81       	ldd	r28, Z+2	; 0x02
 104:	d3 81       	ldd	r29, Z+3	; 0x03
 106:	84 81       	ldd	r24, Z+4	; 0x04
 108:	95 81       	ldd	r25, Z+5	; 0x05
 10a:	9d 83       	std	Y+5, r25	; 0x05
 10c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 10e:	c4 81       	ldd	r28, Z+4	; 0x04
 110:	d5 81       	ldd	r29, Z+5	; 0x05
 112:	82 81       	ldd	r24, Z+2	; 0x02
 114:	93 81       	ldd	r25, Z+3	; 0x03
 116:	9b 83       	std	Y+3, r25	; 0x03
 118:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 11a:	11 96       	adiw	r26, 0x01	; 1
 11c:	8d 91       	ld	r24, X+
 11e:	9c 91       	ld	r25, X
 120:	12 97       	sbiw	r26, 0x02	; 2
 122:	e8 17       	cp	r30, r24
 124:	f9 07       	cpc	r31, r25
 126:	31 f4       	brne	.+12     	; 0x134 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 128:	84 81       	ldd	r24, Z+4	; 0x04
 12a:	95 81       	ldd	r25, Z+5	; 0x05
 12c:	12 96       	adiw	r26, 0x02	; 2
 12e:	9c 93       	st	X, r25
 130:	8e 93       	st	-X, r24
 132:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 134:	11 86       	std	Z+9, r1	; 0x09
 136:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 138:	8c 91       	ld	r24, X
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 13e:	8c 91       	ld	r24, X
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 146:	1b bc       	out	0x2b, r1	; 43
 148:	8c e7       	ldi	r24, 0x7C	; 124
 14a:	8a bd       	out	0x2a, r24	; 42
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	8e bd       	out	0x2e, r24	; 46
 150:	89 b7       	in	r24, 0x39	; 57
 152:	80 61       	ori	r24, 0x10	; 16
 154:	89 bf       	out	0x39, r24	; 57
 156:	08 95       	ret

00000158 <pxPortInitialiseStack>:
 158:	31 e1       	ldi	r19, 0x11	; 17
 15a:	fc 01       	movw	r30, r24
 15c:	30 83       	st	Z, r19
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	22 e2       	ldi	r18, 0x22	; 34
 162:	20 83       	st	Z, r18
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	a3 e3       	ldi	r26, 0x33	; 51
 168:	a0 83       	st	Z, r26
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	60 83       	st	Z, r22
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	70 83       	st	Z, r23
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	10 82       	st	Z, r1
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	60 e8       	ldi	r22, 0x80	; 128
 17a:	60 83       	st	Z, r22
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	10 82       	st	Z, r1
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	60 83       	st	Z, r22
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	60 83       	st	Z, r22
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	60 83       	st	Z, r22
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	65 e0       	ldi	r22, 0x05	; 5
 196:	60 83       	st	Z, r22
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	66 e0       	ldi	r22, 0x06	; 6
 19c:	60 83       	st	Z, r22
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	67 e0       	ldi	r22, 0x07	; 7
 1a2:	60 83       	st	Z, r22
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	68 e0       	ldi	r22, 0x08	; 8
 1a8:	60 83       	st	Z, r22
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	69 e0       	ldi	r22, 0x09	; 9
 1ae:	60 83       	st	Z, r22
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	60 e1       	ldi	r22, 0x10	; 16
 1b4:	60 83       	st	Z, r22
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	30 83       	st	Z, r19
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	32 e1       	ldi	r19, 0x12	; 18
 1be:	30 83       	st	Z, r19
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	33 e1       	ldi	r19, 0x13	; 19
 1c4:	30 83       	st	Z, r19
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	34 e1       	ldi	r19, 0x14	; 20
 1ca:	30 83       	st	Z, r19
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	35 e1       	ldi	r19, 0x15	; 21
 1d0:	30 83       	st	Z, r19
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	36 e1       	ldi	r19, 0x16	; 22
 1d6:	30 83       	st	Z, r19
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	37 e1       	ldi	r19, 0x17	; 23
 1dc:	30 83       	st	Z, r19
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	38 e1       	ldi	r19, 0x18	; 24
 1e2:	30 83       	st	Z, r19
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	39 e1       	ldi	r19, 0x19	; 25
 1e8:	30 83       	st	Z, r19
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	30 e2       	ldi	r19, 0x20	; 32
 1ee:	30 83       	st	Z, r19
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	31 e2       	ldi	r19, 0x21	; 33
 1f4:	30 83       	st	Z, r19
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	20 83       	st	Z, r18
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	23 e2       	ldi	r18, 0x23	; 35
 1fe:	20 83       	st	Z, r18
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	40 83       	st	Z, r20
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	50 83       	st	Z, r21
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	26 e2       	ldi	r18, 0x26	; 38
 20c:	20 83       	st	Z, r18
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	27 e2       	ldi	r18, 0x27	; 39
 212:	20 83       	st	Z, r18
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	28 e2       	ldi	r18, 0x28	; 40
 218:	20 83       	st	Z, r18
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	29 e2       	ldi	r18, 0x29	; 41
 21e:	20 83       	st	Z, r18
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	20 e3       	ldi	r18, 0x30	; 48
 224:	20 83       	st	Z, r18
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	21 e3       	ldi	r18, 0x31	; 49
 22a:	20 83       	st	Z, r18
 22c:	86 97       	sbiw	r24, 0x26	; 38
 22e:	08 95       	ret

00000230 <xPortStartScheduler>:
 230:	0e 94 a3 00 	call	0x146	; 0x146 <prvSetupTimerInterrupt>
 234:	a0 91 ba 06 	lds	r26, 0x06BA	; 0x8006ba <pxCurrentTCB>
 238:	b0 91 bb 06 	lds	r27, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 23c:	cd 91       	ld	r28, X+
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	dd 91       	ld	r29, X+
 242:	de bf       	out	0x3e, r29	; 62
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	df 90       	pop	r13
 26a:	cf 90       	pop	r12
 26c:	bf 90       	pop	r11
 26e:	af 90       	pop	r10
 270:	9f 90       	pop	r9
 272:	8f 90       	pop	r8
 274:	7f 90       	pop	r7
 276:	6f 90       	pop	r6
 278:	5f 90       	pop	r5
 27a:	4f 90       	pop	r4
 27c:	3f 90       	pop	r3
 27e:	2f 90       	pop	r2
 280:	1f 90       	pop	r1
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	08 95       	ret
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	08 95       	ret

0000028e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	0f 92       	push	r0
 296:	1f 92       	push	r1
 298:	11 24       	eor	r1, r1
 29a:	2f 92       	push	r2
 29c:	3f 92       	push	r3
 29e:	4f 92       	push	r4
 2a0:	5f 92       	push	r5
 2a2:	6f 92       	push	r6
 2a4:	7f 92       	push	r7
 2a6:	8f 92       	push	r8
 2a8:	9f 92       	push	r9
 2aa:	af 92       	push	r10
 2ac:	bf 92       	push	r11
 2ae:	cf 92       	push	r12
 2b0:	df 92       	push	r13
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	4f 93       	push	r20
 2c0:	5f 93       	push	r21
 2c2:	6f 93       	push	r22
 2c4:	7f 93       	push	r23
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
 2cc:	bf 93       	push	r27
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
 2d6:	a0 91 ba 06 	lds	r26, 0x06BA	; 0x8006ba <pxCurrentTCB>
 2da:	b0 91 bb 06 	lds	r27, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 2de:	0d b6       	in	r0, 0x3d	; 61
 2e0:	0d 92       	st	X+, r0
 2e2:	0e b6       	in	r0, 0x3e	; 62
 2e4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 2e6:	0e 94 75 06 	call	0xcea	; 0xcea <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 2ea:	a0 91 ba 06 	lds	r26, 0x06BA	; 0x8006ba <pxCurrentTCB>
 2ee:	b0 91 bb 06 	lds	r27, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 2f2:	cd 91       	ld	r28, X+
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	dd 91       	ld	r29, X+
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	7f 91       	pop	r23
 30c:	6f 91       	pop	r22
 30e:	5f 91       	pop	r21
 310:	4f 91       	pop	r20
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	df 90       	pop	r13
 320:	cf 90       	pop	r12
 322:	bf 90       	pop	r11
 324:	af 90       	pop	r10
 326:	9f 90       	pop	r9
 328:	8f 90       	pop	r8
 32a:	7f 90       	pop	r7
 32c:	6f 90       	pop	r6
 32e:	5f 90       	pop	r5
 330:	4f 90       	pop	r4
 332:	3f 90       	pop	r3
 334:	2f 90       	pop	r2
 336:	1f 90       	pop	r1
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0

	asm volatile ( "ret" );
 33e:	08 95       	ret

00000340 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	0f 92       	push	r0
 348:	1f 92       	push	r1
 34a:	11 24       	eor	r1, r1
 34c:	2f 92       	push	r2
 34e:	3f 92       	push	r3
 350:	4f 92       	push	r4
 352:	5f 92       	push	r5
 354:	6f 92       	push	r6
 356:	7f 92       	push	r7
 358:	8f 92       	push	r8
 35a:	9f 92       	push	r9
 35c:	af 92       	push	r10
 35e:	bf 92       	push	r11
 360:	cf 92       	push	r12
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
 388:	a0 91 ba 06 	lds	r26, 0x06BA	; 0x8006ba <pxCurrentTCB>
 38c:	b0 91 bb 06 	lds	r27, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 390:	0d b6       	in	r0, 0x3d	; 61
 392:	0d 92       	st	X+, r0
 394:	0e b6       	in	r0, 0x3e	; 62
 396:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 398:	0e 94 41 05 	call	0xa82	; 0xa82 <xTaskIncrementTick>
 39c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 39e:	0e 94 75 06 	call	0xcea	; 0xcea <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 3a2:	a0 91 ba 06 	lds	r26, 0x06BA	; 0x8006ba <pxCurrentTCB>
 3a6:	b0 91 bb 06 	lds	r27, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 3aa:	cd 91       	ld	r28, X+
 3ac:	cd bf       	out	0x3d, r28	; 61
 3ae:	dd 91       	ld	r29, X+
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	df 90       	pop	r13
 3d8:	cf 90       	pop	r12
 3da:	bf 90       	pop	r11
 3dc:	af 90       	pop	r10
 3de:	9f 90       	pop	r9
 3e0:	8f 90       	pop	r8
 3e2:	7f 90       	pop	r7
 3e4:	6f 90       	pop	r6
 3e6:	5f 90       	pop	r5
 3e8:	4f 90       	pop	r4
 3ea:	3f 90       	pop	r3
 3ec:	2f 90       	pop	r2
 3ee:	1f 90       	pop	r1
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0

	asm volatile ( "ret" );
 3f6:	08 95       	ret

000003f8 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 3f8:	0e 94 a0 01 	call	0x340	; 0x340 <vPortYieldFromTick>
		asm volatile ( "reti" );
 3fc:	18 95       	reti

000003fe <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 3fe:	ee e7       	ldi	r30, 0x7E	; 126
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	a2 e8       	ldi	r26, 0x82	; 130
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	b1 83       	std	Z+1, r27	; 0x01
 408:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
 40a:	13 82       	std	Z+3, r1	; 0x03
 40c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
 40e:	ea e5       	ldi	r30, 0x5A	; 90
 410:	f6 e0       	ldi	r31, 0x06	; 6
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
 412:	f0 93 7d 00 	sts	0x007D, r31	; 0x80007d <pxEnd+0x1>
 416:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <pxEnd>
    pxEnd->xBlockSize = 0;
 41a:	13 82       	std	Z+3, r1	; 0x03
 41c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
 41e:	11 82       	std	Z+1, r1	; 0x01
 420:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 422:	88 ed       	ldi	r24, 0xD8	; 216
 424:	95 e0       	ldi	r25, 0x05	; 5
 426:	13 96       	adiw	r26, 0x03	; 3
 428:	9c 93       	st	X, r25
 42a:	8e 93       	st	-X, r24
 42c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 42e:	ed 93       	st	X+, r30
 430:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 432:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <xMinimumEverFreeBytesRemaining+0x1>
 436:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 43a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <xFreeBytesRemaining+0x1>
 43e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e8       	ldi	r25, 0x80	; 128
 446:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
 44a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 44e:	08 95       	ret

00000450 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 456:	ae e7       	ldi	r26, 0x7E	; 126
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	01 c0       	rjmp	.+2      	; 0x45e <prvInsertBlockIntoFreeList+0xe>
 45c:	df 01       	movw	r26, r30
 45e:	ed 91       	ld	r30, X+
 460:	fc 91       	ld	r31, X
 462:	11 97       	sbiw	r26, 0x01	; 1
 464:	ec 17       	cp	r30, r28
 466:	fd 07       	cpc	r31, r29
 468:	c8 f3       	brcs	.-14     	; 0x45c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 46a:	12 96       	adiw	r26, 0x02	; 2
 46c:	8d 91       	ld	r24, X+
 46e:	9c 91       	ld	r25, X
 470:	13 97       	sbiw	r26, 0x03	; 3
 472:	9d 01       	movw	r18, r26
 474:	28 0f       	add	r18, r24
 476:	39 1f       	adc	r19, r25
 478:	c2 17       	cp	r28, r18
 47a:	d3 07       	cpc	r29, r19
 47c:	49 f4       	brne	.+18     	; 0x490 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 47e:	2a 81       	ldd	r18, Y+2	; 0x02
 480:	3b 81       	ldd	r19, Y+3	; 0x03
 482:	82 0f       	add	r24, r18
 484:	93 1f       	adc	r25, r19
 486:	13 96       	adiw	r26, 0x03	; 3
 488:	9c 93       	st	X, r25
 48a:	8e 93       	st	-X, r24
 48c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
 48e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	9b 81       	ldd	r25, Y+3	; 0x03
 494:	9e 01       	movw	r18, r28
 496:	28 0f       	add	r18, r24
 498:	39 1f       	adc	r19, r25
 49a:	e2 17       	cp	r30, r18
 49c:	f3 07       	cpc	r31, r19
 49e:	c1 f4       	brne	.+48     	; 0x4d0 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 4a0:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <pxEnd>
 4a4:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <pxEnd+0x1>
 4a8:	e2 17       	cp	r30, r18
 4aa:	f3 07       	cpc	r31, r19
 4ac:	71 f0       	breq	.+28     	; 0x4ca <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 4ae:	22 81       	ldd	r18, Z+2	; 0x02
 4b0:	33 81       	ldd	r19, Z+3	; 0x03
 4b2:	82 0f       	add	r24, r18
 4b4:	93 1f       	adc	r25, r19
 4b6:	9b 83       	std	Y+3, r25	; 0x03
 4b8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 4ba:	ed 91       	ld	r30, X+
 4bc:	fc 91       	ld	r31, X
 4be:	11 97       	sbiw	r26, 0x01	; 1
 4c0:	80 81       	ld	r24, Z
 4c2:	91 81       	ldd	r25, Z+1	; 0x01
 4c4:	99 83       	std	Y+1, r25	; 0x01
 4c6:	88 83       	st	Y, r24
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 4ca:	39 83       	std	Y+1, r19	; 0x01
 4cc:	28 83       	st	Y, r18
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 4d0:	f9 83       	std	Y+1, r31	; 0x01
 4d2:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 4d4:	ca 17       	cp	r28, r26
 4d6:	db 07       	cpc	r29, r27
 4d8:	11 f0       	breq	.+4      	; 0x4de <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 4da:	cd 93       	st	X+, r28
 4dc:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 4e4:	ef 92       	push	r14
 4e6:	ff 92       	push	r15
 4e8:	0f 93       	push	r16
 4ea:	1f 93       	push	r17
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
 4f2:	0e 94 3b 05 	call	0xa76	; 0xa76 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 4f6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <pxEnd>
 4fa:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <pxEnd+0x1>
 4fe:	89 2b       	or	r24, r25
 500:	11 f4       	brne	.+4      	; 0x506 <pvPortMalloc+0x22>
        {
            prvHeapInit();
 502:	0e 94 ff 01 	call	0x3fe	; 0x3fe <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 506:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 50a:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 50e:	80 23       	and	r24, r16
 510:	91 23       	and	r25, r17
 512:	89 2b       	or	r24, r25
 514:	09 f0       	breq	.+2      	; 0x518 <pvPortMalloc+0x34>
 516:	77 c0       	rjmp	.+238    	; 0x606 <pvPortMalloc+0x122>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 518:	01 15       	cp	r16, r1
 51a:	11 05       	cpc	r17, r1
 51c:	49 f0       	breq	.+18     	; 0x530 <pvPortMalloc+0x4c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 51e:	c8 01       	movw	r24, r16
 520:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 522:	08 17       	cp	r16, r24
 524:	19 07       	cpc	r17, r25
 526:	18 f0       	brcs	.+6      	; 0x52e <pvPortMalloc+0x4a>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 528:	00 e0       	ldi	r16, 0x00	; 0
 52a:	10 e0       	ldi	r17, 0x00	; 0
 52c:	01 c0       	rjmp	.+2      	; 0x530 <pvPortMalloc+0x4c>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
 52e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 530:	01 15       	cp	r16, r1
 532:	11 05       	cpc	r17, r1
 534:	09 f4       	brne	.+2      	; 0x538 <pvPortMalloc+0x54>
 536:	6a c0       	rjmp	.+212    	; 0x60c <pvPortMalloc+0x128>
 538:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <xFreeBytesRemaining>
 53c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <xFreeBytesRemaining+0x1>
 540:	80 17       	cp	r24, r16
 542:	91 07       	cpc	r25, r17
 544:	08 f4       	brcc	.+2      	; 0x548 <pvPortMalloc+0x64>
 546:	65 c0       	rjmp	.+202    	; 0x612 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
 548:	c0 91 7e 00 	lds	r28, 0x007E	; 0x80007e <xStart>
 54c:	d0 91 7f 00 	lds	r29, 0x007F	; 0x80007f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 550:	ee e7       	ldi	r30, 0x7E	; 126
 552:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 554:	02 c0       	rjmp	.+4      	; 0x55a <pvPortMalloc+0x76>
                {
                    pxPreviousBlock = pxBlock;
 556:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
 558:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 55a:	8a 81       	ldd	r24, Y+2	; 0x02
 55c:	9b 81       	ldd	r25, Y+3	; 0x03
 55e:	80 17       	cp	r24, r16
 560:	91 07       	cpc	r25, r17
 562:	20 f4       	brcc	.+8      	; 0x56c <pvPortMalloc+0x88>
 564:	88 81       	ld	r24, Y
 566:	99 81       	ldd	r25, Y+1	; 0x01
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	a9 f7       	brne	.-22     	; 0x556 <pvPortMalloc+0x72>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 56c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <pxEnd>
 570:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <pxEnd+0x1>
 574:	c8 17       	cp	r28, r24
 576:	d9 07       	cpc	r29, r25
 578:	09 f4       	brne	.+2      	; 0x57c <pvPortMalloc+0x98>
 57a:	4e c0       	rjmp	.+156    	; 0x618 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 57c:	e0 80       	ld	r14, Z
 57e:	f1 80       	ldd	r15, Z+1	; 0x01
 580:	84 e0       	ldi	r24, 0x04	; 4
 582:	e8 0e       	add	r14, r24
 584:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 586:	88 81       	ld	r24, Y
 588:	99 81       	ldd	r25, Y+1	; 0x01
 58a:	91 83       	std	Z+1, r25	; 0x01
 58c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 58e:	2a 81       	ldd	r18, Y+2	; 0x02
 590:	3b 81       	ldd	r19, Y+3	; 0x03
 592:	20 1b       	sub	r18, r16
 594:	31 0b       	sbc	r19, r17
 596:	29 30       	cpi	r18, 0x09	; 9
 598:	31 05       	cpc	r19, r1
 59a:	50 f0       	brcs	.+20     	; 0x5b0 <pvPortMalloc+0xcc>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 59c:	ce 01       	movw	r24, r28
 59e:	80 0f       	add	r24, r16
 5a0:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 5a2:	fc 01       	movw	r30, r24
 5a4:	33 83       	std	Z+3, r19	; 0x03
 5a6:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
 5a8:	1b 83       	std	Y+3, r17	; 0x03
 5aa:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 5ac:	0e 94 28 02 	call	0x450	; 0x450 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 5b0:	2a 81       	ldd	r18, Y+2	; 0x02
 5b2:	3b 81       	ldd	r19, Y+3	; 0x03
 5b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <xFreeBytesRemaining>
 5b8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <xFreeBytesRemaining+0x1>
 5bc:	82 1b       	sub	r24, r18
 5be:	93 0b       	sbc	r25, r19
 5c0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <xFreeBytesRemaining+0x1>
 5c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 5c8:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <xMinimumEverFreeBytesRemaining>
 5cc:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <xMinimumEverFreeBytesRemaining+0x1>
 5d0:	84 17       	cp	r24, r20
 5d2:	95 07       	cpc	r25, r21
 5d4:	20 f4       	brcc	.+8      	; 0x5de <pvPortMalloc+0xfa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 5d6:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <xMinimumEverFreeBytesRemaining+0x1>
 5da:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 5de:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 5e2:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 5e6:	28 2b       	or	r18, r24
 5e8:	39 2b       	or	r19, r25
 5ea:	3b 83       	std	Y+3, r19	; 0x03
 5ec:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
 5ee:	19 82       	std	Y+1, r1	; 0x01
 5f0:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
 5f2:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <xNumberOfSuccessfulAllocations>
 5f6:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <xNumberOfSuccessfulAllocations+0x1>
 5fa:	01 96       	adiw	r24, 0x01	; 1
 5fc:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <xNumberOfSuccessfulAllocations+0x1>
 600:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <xNumberOfSuccessfulAllocations>
 604:	0b c0       	rjmp	.+22     	; 0x61c <pvPortMalloc+0x138>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 606:	e1 2c       	mov	r14, r1
 608:	f1 2c       	mov	r15, r1
 60a:	08 c0       	rjmp	.+16     	; 0x61c <pvPortMalloc+0x138>
 60c:	e1 2c       	mov	r14, r1
 60e:	f1 2c       	mov	r15, r1
 610:	05 c0       	rjmp	.+10     	; 0x61c <pvPortMalloc+0x138>
 612:	e1 2c       	mov	r14, r1
 614:	f1 2c       	mov	r15, r1
 616:	02 c0       	rjmp	.+4      	; 0x61c <pvPortMalloc+0x138>
 618:	e1 2c       	mov	r14, r1
 61a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 61c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <xTaskResumeAll>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
 620:	c7 01       	movw	r24, r14
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	1f 91       	pop	r17
 628:	0f 91       	pop	r16
 62a:	ff 90       	pop	r15
 62c:	ef 90       	pop	r14
 62e:	08 95       	ret

00000630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	99 f1       	breq	.+102    	; 0x6a2 <vPortFree+0x72>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 63c:	ec 01       	movw	r28, r24
 63e:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 640:	4a 81       	ldd	r20, Y+2	; 0x02
 642:	5b 81       	ldd	r21, Y+3	; 0x03
 644:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 648:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 64c:	ba 01       	movw	r22, r20
 64e:	62 23       	and	r22, r18
 650:	73 23       	and	r23, r19
 652:	67 2b       	or	r22, r23
 654:	31 f1       	breq	.+76     	; 0x6a2 <vPortFree+0x72>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 656:	68 81       	ld	r22, Y
 658:	79 81       	ldd	r23, Y+1	; 0x01
 65a:	67 2b       	or	r22, r23
 65c:	11 f5       	brne	.+68     	; 0x6a2 <vPortFree+0x72>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 65e:	20 95       	com	r18
 660:	30 95       	com	r19
 662:	24 23       	and	r18, r20
 664:	35 23       	and	r19, r21
 666:	3b 83       	std	Y+3, r19	; 0x03
 668:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
 66a:	0e 94 3b 05 	call	0xa76	; 0xa76 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	9b 81       	ldd	r25, Y+3	; 0x03
 672:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <xFreeBytesRemaining>
 676:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <xFreeBytesRemaining+0x1>
 67a:	82 0f       	add	r24, r18
 67c:	93 1f       	adc	r25, r19
 67e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <xFreeBytesRemaining+0x1>
 682:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 686:	ce 01       	movw	r24, r28
 688:	0e 94 28 02 	call	0x450	; 0x450 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 68c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <xNumberOfSuccessfulFrees>
 690:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <xNumberOfSuccessfulFrees+0x1>
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <xNumberOfSuccessfulFrees+0x1>
 69a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
 69e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	08 95       	ret

000006ac <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 6ac:	e0 91 82 06 	lds	r30, 0x0682	; 0x800682 <pxDelayedTaskList>
 6b0:	f0 91 83 06 	lds	r31, 0x0683	; 0x800683 <pxDelayedTaskList+0x1>
 6b4:	80 81       	ld	r24, Z
 6b6:	81 11       	cpse	r24, r1
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <prvResetNextTaskUnblockTime+0x1c>
 6ba:	8f ef       	ldi	r24, 0xFF	; 255
 6bc:	9f ef       	ldi	r25, 0xFF	; 255
 6be:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <xNextTaskUnblockTime+0x1>
 6c2:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xNextTaskUnblockTime>
 6c6:	08 95       	ret
 6c8:	e0 91 82 06 	lds	r30, 0x0682	; 0x800682 <pxDelayedTaskList>
 6cc:	f0 91 83 06 	lds	r31, 0x0683	; 0x800683 <pxDelayedTaskList+0x1>
 6d0:	05 80       	ldd	r0, Z+5	; 0x05
 6d2:	f6 81       	ldd	r31, Z+6	; 0x06
 6d4:	e0 2d       	mov	r30, r0
 6d6:	80 81       	ld	r24, Z
 6d8:	91 81       	ldd	r25, Z+1	; 0x01
 6da:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <xNextTaskUnblockTime+0x1>
 6de:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xNextTaskUnblockTime>
 6e2:	08 95       	ret

000006e4 <prvDeleteTCB>:
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	ec 01       	movw	r28, r24
 6ea:	8f 89       	ldd	r24, Y+23	; 0x17
 6ec:	98 8d       	ldd	r25, Y+24	; 0x18
 6ee:	0e 94 18 03 	call	0x630	; 0x630 <vPortFree>
 6f2:	ce 01       	movw	r24, r28
 6f4:	0e 94 18 03 	call	0x630	; 0x630 <vPortFree>
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

000006fe <prvInitialiseNewTask>:
 6fe:	6f 92       	push	r6
 700:	7f 92       	push	r7
 702:	8f 92       	push	r8
 704:	9f 92       	push	r9
 706:	af 92       	push	r10
 708:	bf 92       	push	r11
 70a:	cf 92       	push	r12
 70c:	df 92       	push	r13
 70e:	ef 92       	push	r14
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
 71c:	4c 01       	movw	r8, r24
 71e:	d5 01       	movw	r26, r10
 720:	57 96       	adiw	r26, 0x17	; 23
 722:	8d 91       	ld	r24, X+
 724:	9c 91       	ld	r25, X
 726:	58 97       	sbiw	r26, 0x18	; 24
 728:	21 50       	subi	r18, 0x01	; 1
 72a:	31 09       	sbc	r19, r1
 72c:	3c 01       	movw	r6, r24
 72e:	62 0e       	add	r6, r18
 730:	73 1e       	adc	r7, r19
 732:	61 15       	cp	r22, r1
 734:	71 05       	cpc	r23, r1
 736:	89 f4       	brne	.+34     	; 0x75a <prvInitialiseNewTask+0x5c>
 738:	16 c0       	rjmp	.+44     	; 0x766 <prvInitialiseNewTask+0x68>
 73a:	82 2f       	mov	r24, r18
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	fb 01       	movw	r30, r22
 740:	e8 0f       	add	r30, r24
 742:	f9 1f       	adc	r31, r25
 744:	30 81       	ld	r19, Z
 746:	d5 01       	movw	r26, r10
 748:	a8 0f       	add	r26, r24
 74a:	b9 1f       	adc	r27, r25
 74c:	59 96       	adiw	r26, 0x19	; 25
 74e:	3c 93       	st	X, r19
 750:	80 81       	ld	r24, Z
 752:	88 23       	and	r24, r24
 754:	29 f0       	breq	.+10     	; 0x760 <prvInitialiseNewTask+0x62>
 756:	2f 5f       	subi	r18, 0xFF	; 255
 758:	01 c0       	rjmp	.+2      	; 0x75c <prvInitialiseNewTask+0x5e>
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	28 30       	cpi	r18, 0x08	; 8
 75e:	68 f3       	brcs	.-38     	; 0x73a <prvInitialiseNewTask+0x3c>
 760:	f5 01       	movw	r30, r10
 762:	10 a2       	std	Z+32, r1	; 0x20
 764:	03 c0       	rjmp	.+6      	; 0x76c <prvInitialiseNewTask+0x6e>
 766:	d5 01       	movw	r26, r10
 768:	59 96       	adiw	r26, 0x19	; 25
 76a:	1c 92       	st	X, r1
 76c:	b3 e0       	ldi	r27, 0x03	; 3
 76e:	be 15       	cp	r27, r14
 770:	20 f4       	brcc	.+8      	; 0x77a <prvInitialiseNewTask+0x7c>
 772:	0f 2e       	mov	r0, r31
 774:	f3 e0       	ldi	r31, 0x03	; 3
 776:	ef 2e       	mov	r14, r31
 778:	f0 2d       	mov	r31, r0
 77a:	f5 01       	movw	r30, r10
 77c:	e6 8a       	std	Z+22, r14	; 0x16
 77e:	c5 01       	movw	r24, r10
 780:	02 96       	adiw	r24, 0x02	; 2
 782:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
 786:	c5 01       	movw	r24, r10
 788:	0c 96       	adiw	r24, 0x0c	; 12
 78a:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
 78e:	d5 01       	movw	r26, r10
 790:	19 96       	adiw	r26, 0x09	; 9
 792:	bc 92       	st	X, r11
 794:	ae 92       	st	-X, r10
 796:	18 97       	sbiw	r26, 0x08	; 8
 798:	84 e0       	ldi	r24, 0x04	; 4
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	8e 19       	sub	r24, r14
 79e:	91 09       	sbc	r25, r1
 7a0:	1d 96       	adiw	r26, 0x0d	; 13
 7a2:	9c 93       	st	X, r25
 7a4:	8e 93       	st	-X, r24
 7a6:	1c 97       	sbiw	r26, 0x0c	; 12
 7a8:	53 96       	adiw	r26, 0x13	; 19
 7aa:	bc 92       	st	X, r11
 7ac:	ae 92       	st	-X, r10
 7ae:	52 97       	sbiw	r26, 0x12	; 18
 7b0:	84 e0       	ldi	r24, 0x04	; 4
 7b2:	f5 01       	movw	r30, r10
 7b4:	b1 96       	adiw	r30, 0x21	; 33
 7b6:	df 01       	movw	r26, r30
 7b8:	1d 92       	st	X+, r1
 7ba:	8a 95       	dec	r24
 7bc:	e9 f7       	brne	.-6      	; 0x7b8 <prvInitialiseNewTask+0xba>
 7be:	f5 01       	movw	r30, r10
 7c0:	15 a2       	std	Z+37, r1	; 0x25
 7c2:	a8 01       	movw	r20, r16
 7c4:	b4 01       	movw	r22, r8
 7c6:	c3 01       	movw	r24, r6
 7c8:	0e 94 ac 00 	call	0x158	; 0x158 <pxPortInitialiseStack>
 7cc:	d5 01       	movw	r26, r10
 7ce:	8d 93       	st	X+, r24
 7d0:	9c 93       	st	X, r25
 7d2:	c1 14       	cp	r12, r1
 7d4:	d1 04       	cpc	r13, r1
 7d6:	19 f0       	breq	.+6      	; 0x7de <prvInitialiseNewTask+0xe0>
 7d8:	f6 01       	movw	r30, r12
 7da:	b1 82       	std	Z+1, r11	; 0x01
 7dc:	a0 82       	st	Z, r10
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	ef 90       	pop	r14
 7e8:	df 90       	pop	r13
 7ea:	cf 90       	pop	r12
 7ec:	bf 90       	pop	r11
 7ee:	af 90       	pop	r10
 7f0:	9f 90       	pop	r9
 7f2:	8f 90       	pop	r8
 7f4:	7f 90       	pop	r7
 7f6:	6f 90       	pop	r6
 7f8:	08 95       	ret

000007fa <prvInitialiseTaskLists>:
 7fa:	cf 93       	push	r28
 7fc:	c0 e0       	ldi	r28, 0x00	; 0
 7fe:	10 c0       	rjmp	.+32     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 800:	8c 2f       	mov	r24, r28
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	9c 01       	movw	r18, r24
 806:	22 0f       	add	r18, r18
 808:	33 1f       	adc	r19, r19
 80a:	22 0f       	add	r18, r18
 80c:	33 1f       	adc	r19, r19
 80e:	22 0f       	add	r18, r18
 810:	33 1f       	adc	r19, r19
 812:	82 0f       	add	r24, r18
 814:	93 1f       	adc	r25, r19
 816:	8a 56       	subi	r24, 0x6A	; 106
 818:	99 4f       	sbci	r25, 0xF9	; 249
 81a:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
 81e:	cf 5f       	subi	r28, 0xFF	; 255
 820:	c4 30       	cpi	r28, 0x04	; 4
 822:	70 f3       	brcs	.-36     	; 0x800 <__DATA_REGION_LENGTH__>
 824:	8d e8       	ldi	r24, 0x8D	; 141
 826:	96 e0       	ldi	r25, 0x06	; 6
 828:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
 82c:	84 e8       	ldi	r24, 0x84	; 132
 82e:	96 e0       	ldi	r25, 0x06	; 6
 830:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
 834:	87 e7       	ldi	r24, 0x77	; 119
 836:	96 e0       	ldi	r25, 0x06	; 6
 838:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
 83c:	8e e6       	ldi	r24, 0x6E	; 110
 83e:	96 e0       	ldi	r25, 0x06	; 6
 840:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
 844:	8d e8       	ldi	r24, 0x8D	; 141
 846:	96 e0       	ldi	r25, 0x06	; 6
 848:	90 93 83 06 	sts	0x0683, r25	; 0x800683 <pxDelayedTaskList+0x1>
 84c:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <pxDelayedTaskList>
 850:	84 e8       	ldi	r24, 0x84	; 132
 852:	96 e0       	ldi	r25, 0x06	; 6
 854:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <pxOverflowDelayedTaskList+0x1>
 858:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <pxOverflowDelayedTaskList>
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <prvAddNewTaskToReadyList>:
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	ec 01       	movw	r28, r24
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	f8 94       	cli
 86a:	0f 92       	push	r0
 86c:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxCurrentNumberOfTasks>
 870:	8f 5f       	subi	r24, 0xFF	; 255
 872:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxCurrentNumberOfTasks>
 876:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <pxCurrentTCB>
 87a:	90 91 bb 06 	lds	r25, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 87e:	89 2b       	or	r24, r25
 880:	59 f4       	brne	.+22     	; 0x898 <prvAddNewTaskToReadyList+0x38>
 882:	d0 93 bb 06 	sts	0x06BB, r29	; 0x8006bb <pxCurrentTCB+0x1>
 886:	c0 93 ba 06 	sts	0x06BA, r28	; 0x8006ba <pxCurrentTCB>
 88a:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxCurrentNumberOfTasks>
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	99 f4       	brne	.+38     	; 0x8b8 <prvAddNewTaskToReadyList+0x58>
 892:	0e 94 fd 03 	call	0x7fa	; 0x7fa <prvInitialiseTaskLists>
 896:	10 c0       	rjmp	.+32     	; 0x8b8 <prvAddNewTaskToReadyList+0x58>
 898:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <xSchedulerRunning>
 89c:	81 11       	cpse	r24, r1
 89e:	0c c0       	rjmp	.+24     	; 0x8b8 <prvAddNewTaskToReadyList+0x58>
 8a0:	e0 91 ba 06 	lds	r30, 0x06BA	; 0x8006ba <pxCurrentTCB>
 8a4:	f0 91 bb 06 	lds	r31, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 8a8:	96 89       	ldd	r25, Z+22	; 0x16
 8aa:	8e 89       	ldd	r24, Y+22	; 0x16
 8ac:	89 17       	cp	r24, r25
 8ae:	20 f0       	brcs	.+8      	; 0x8b8 <prvAddNewTaskToReadyList+0x58>
 8b0:	d0 93 bb 06 	sts	0x06BB, r29	; 0x8006bb <pxCurrentTCB+0x1>
 8b4:	c0 93 ba 06 	sts	0x06BA, r28	; 0x8006ba <pxCurrentTCB>
 8b8:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <uxTaskNumber>
 8bc:	8f 5f       	subi	r24, 0xFF	; 255
 8be:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <uxTaskNumber>
 8c2:	8e 89       	ldd	r24, Y+22	; 0x16
 8c4:	90 91 69 06 	lds	r25, 0x0669	; 0x800669 <uxTopReadyPriority>
 8c8:	98 17       	cp	r25, r24
 8ca:	10 f4       	brcc	.+4      	; 0x8d0 <prvAddNewTaskToReadyList+0x70>
 8cc:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <uxTopReadyPriority>
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	9c 01       	movw	r18, r24
 8d4:	22 0f       	add	r18, r18
 8d6:	33 1f       	adc	r19, r19
 8d8:	22 0f       	add	r18, r18
 8da:	33 1f       	adc	r19, r19
 8dc:	22 0f       	add	r18, r18
 8de:	33 1f       	adc	r19, r19
 8e0:	82 0f       	add	r24, r18
 8e2:	93 1f       	adc	r25, r19
 8e4:	be 01       	movw	r22, r28
 8e6:	6e 5f       	subi	r22, 0xFE	; 254
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8a 56       	subi	r24, 0x6A	; 106
 8ec:	99 4f       	sbci	r25, 0xF9	; 249
 8ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
 8f2:	0f 90       	pop	r0
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <xSchedulerRunning>
 8fa:	88 23       	and	r24, r24
 8fc:	51 f0       	breq	.+20     	; 0x912 <prvAddNewTaskToReadyList+0xb2>
 8fe:	e0 91 ba 06 	lds	r30, 0x06BA	; 0x8006ba <pxCurrentTCB>
 902:	f0 91 bb 06 	lds	r31, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 906:	96 89       	ldd	r25, Z+22	; 0x16
 908:	8e 89       	ldd	r24, Y+22	; 0x16
 90a:	98 17       	cp	r25, r24
 90c:	10 f4       	brcc	.+4      	; 0x912 <prvAddNewTaskToReadyList+0xb2>
 90e:	0e 94 47 01 	call	0x28e	; 0x28e <vPortYield>
 912:	df 91       	pop	r29
 914:	cf 91       	pop	r28
 916:	08 95       	ret

00000918 <prvCheckTasksWaitingTermination>:
 918:	cf 93       	push	r28
 91a:	df 93       	push	r29
 91c:	1c c0       	rjmp	.+56     	; 0x956 <prvCheckTasksWaitingTermination+0x3e>
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	f8 94       	cli
 922:	0f 92       	push	r0
 924:	e0 91 73 06 	lds	r30, 0x0673	; 0x800673 <xTasksWaitingTermination+0x5>
 928:	f0 91 74 06 	lds	r31, 0x0674	; 0x800674 <xTasksWaitingTermination+0x6>
 92c:	c6 81       	ldd	r28, Z+6	; 0x06
 92e:	d7 81       	ldd	r29, Z+7	; 0x07
 930:	ce 01       	movw	r24, r28
 932:	02 96       	adiw	r24, 0x02	; 2
 934:	0e 94 7c 00 	call	0xf8	; 0xf8 <uxListRemove>
 938:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxCurrentNumberOfTasks>
 93c:	81 50       	subi	r24, 0x01	; 1
 93e:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxCurrentNumberOfTasks>
 942:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <uxDeletedTasksWaitingCleanUp>
 946:	81 50       	subi	r24, 0x01	; 1
 948:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <uxDeletedTasksWaitingCleanUp>
 94c:	0f 90       	pop	r0
 94e:	0f be       	out	0x3f, r0	; 63
 950:	ce 01       	movw	r24, r28
 952:	0e 94 72 03 	call	0x6e4	; 0x6e4 <prvDeleteTCB>
 956:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <uxDeletedTasksWaitingCleanUp>
 95a:	81 11       	cpse	r24, r1
 95c:	e0 cf       	rjmp	.-64     	; 0x91e <prvCheckTasksWaitingTermination+0x6>
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	08 95       	ret

00000964 <prvIdleTask>:
 964:	0e 94 8c 04 	call	0x918	; 0x918 <prvCheckTasksWaitingTermination>
 968:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <pxReadyTasksLists>
 96c:	82 30       	cpi	r24, 0x02	; 2
 96e:	d0 f3       	brcs	.-12     	; 0x964 <prvIdleTask>
 970:	0e 94 47 01 	call	0x28e	; 0x28e <vPortYield>
 974:	f7 cf       	rjmp	.-18     	; 0x964 <prvIdleTask>

00000976 <xTaskCreate>:
 976:	2f 92       	push	r2
 978:	3f 92       	push	r3
 97a:	4f 92       	push	r4
 97c:	5f 92       	push	r5
 97e:	6f 92       	push	r6
 980:	7f 92       	push	r7
 982:	8f 92       	push	r8
 984:	9f 92       	push	r9
 986:	af 92       	push	r10
 988:	bf 92       	push	r11
 98a:	cf 92       	push	r12
 98c:	df 92       	push	r13
 98e:	ef 92       	push	r14
 990:	ff 92       	push	r15
 992:	0f 93       	push	r16
 994:	1f 93       	push	r17
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	3c 01       	movw	r6, r24
 99c:	1b 01       	movw	r2, r22
 99e:	5a 01       	movw	r10, r20
 9a0:	29 01       	movw	r4, r18
 9a2:	ca 01       	movw	r24, r20
 9a4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <pvPortMalloc>
 9a8:	6c 01       	movw	r12, r24
 9aa:	89 2b       	or	r24, r25
 9ac:	71 f0       	breq	.+28     	; 0x9ca <xTaskCreate+0x54>
 9ae:	86 e2       	ldi	r24, 0x26	; 38
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <pvPortMalloc>
 9b6:	ec 01       	movw	r28, r24
 9b8:	89 2b       	or	r24, r25
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <xTaskCreate+0x4c>
 9bc:	d8 8e       	std	Y+24, r13	; 0x18
 9be:	cf 8a       	std	Y+23, r12	; 0x17
 9c0:	06 c0       	rjmp	.+12     	; 0x9ce <xTaskCreate+0x58>
 9c2:	c6 01       	movw	r24, r12
 9c4:	0e 94 18 03 	call	0x630	; 0x630 <vPortFree>
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <xTaskCreate+0x58>
 9ca:	c0 e0       	ldi	r28, 0x00	; 0
 9cc:	d0 e0       	ldi	r29, 0x00	; 0
 9ce:	20 97       	sbiw	r28, 0x00	; 0
 9d0:	91 f0       	breq	.+36     	; 0x9f6 <xTaskCreate+0x80>
 9d2:	95 01       	movw	r18, r10
 9d4:	40 e0       	ldi	r20, 0x00	; 0
 9d6:	50 e0       	ldi	r21, 0x00	; 0
 9d8:	81 2c       	mov	r8, r1
 9da:	91 2c       	mov	r9, r1
 9dc:	5e 01       	movw	r10, r28
 9de:	67 01       	movw	r12, r14
 9e0:	e0 2e       	mov	r14, r16
 9e2:	82 01       	movw	r16, r4
 9e4:	b1 01       	movw	r22, r2
 9e6:	c3 01       	movw	r24, r6
 9e8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <prvInitialiseNewTask>
 9ec:	ce 01       	movw	r24, r28
 9ee:	0e 94 30 04 	call	0x860	; 0x860 <prvAddNewTaskToReadyList>
 9f2:	81 e0       	ldi	r24, 0x01	; 1
 9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <xTaskCreate+0x82>
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	1f 91       	pop	r17
 9fe:	0f 91       	pop	r16
 a00:	ff 90       	pop	r15
 a02:	ef 90       	pop	r14
 a04:	df 90       	pop	r13
 a06:	cf 90       	pop	r12
 a08:	bf 90       	pop	r11
 a0a:	af 90       	pop	r10
 a0c:	9f 90       	pop	r9
 a0e:	8f 90       	pop	r8
 a10:	7f 90       	pop	r7
 a12:	6f 90       	pop	r6
 a14:	5f 90       	pop	r5
 a16:	4f 90       	pop	r4
 a18:	3f 90       	pop	r3
 a1a:	2f 90       	pop	r2
 a1c:	08 95       	ret

00000a1e <vTaskStartScheduler>:
 a1e:	ef 92       	push	r14
 a20:	ff 92       	push	r15
 a22:	0f 93       	push	r16
 a24:	0f 2e       	mov	r0, r31
 a26:	ff e5       	ldi	r31, 0x5F	; 95
 a28:	ef 2e       	mov	r14, r31
 a2a:	f6 e0       	ldi	r31, 0x06	; 6
 a2c:	ff 2e       	mov	r15, r31
 a2e:	f0 2d       	mov	r31, r0
 a30:	00 e0       	ldi	r16, 0x00	; 0
 a32:	20 e0       	ldi	r18, 0x00	; 0
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	45 e5       	ldi	r20, 0x55	; 85
 a38:	50 e0       	ldi	r21, 0x00	; 0
 a3a:	61 e6       	ldi	r22, 0x61	; 97
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	82 eb       	ldi	r24, 0xB2	; 178
 a40:	94 e0       	ldi	r25, 0x04	; 4
 a42:	0e 94 bb 04 	call	0x976	; 0x976 <xTaskCreate>
 a46:	81 30       	cpi	r24, 0x01	; 1
 a48:	81 f4       	brne	.+32     	; 0xa6a <vTaskStartScheduler+0x4c>
 a4a:	f8 94       	cli
 a4c:	8f ef       	ldi	r24, 0xFF	; 255
 a4e:	9f ef       	ldi	r25, 0xFF	; 255
 a50:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <xNextTaskUnblockTime+0x1>
 a54:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xNextTaskUnblockTime>
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <xSchedulerRunning>
 a5e:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <xTickCount+0x1>
 a62:	10 92 6a 06 	sts	0x066A, r1	; 0x80066a <xTickCount>
 a66:	0e 94 18 01 	call	0x230	; 0x230 <xPortStartScheduler>
 a6a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 a6e:	0f 91       	pop	r16
 a70:	ff 90       	pop	r15
 a72:	ef 90       	pop	r14
 a74:	08 95       	ret

00000a76 <vTaskSuspendAll>:
 a76:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <uxSchedulerSuspended>
 a7a:	8f 5f       	subi	r24, 0xFF	; 255
 a7c:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <uxSchedulerSuspended>
 a80:	08 95       	ret

00000a82 <xTaskIncrementTick>:
 a82:	df 92       	push	r13
 a84:	ef 92       	push	r14
 a86:	ff 92       	push	r15
 a88:	0f 93       	push	r16
 a8a:	1f 93       	push	r17
 a8c:	cf 93       	push	r28
 a8e:	df 93       	push	r29
 a90:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <uxSchedulerSuspended>
 a94:	81 11       	cpse	r24, r1
 a96:	9d c0       	rjmp	.+314    	; 0xbd2 <xTaskIncrementTick+0x150>
 a98:	e0 90 6a 06 	lds	r14, 0x066A	; 0x80066a <xTickCount>
 a9c:	f0 90 6b 06 	lds	r15, 0x066B	; 0x80066b <xTickCount+0x1>
 aa0:	8f ef       	ldi	r24, 0xFF	; 255
 aa2:	e8 1a       	sub	r14, r24
 aa4:	f8 0a       	sbc	r15, r24
 aa6:	f0 92 6b 06 	sts	0x066B, r15	; 0x80066b <xTickCount+0x1>
 aaa:	e0 92 6a 06 	sts	0x066A, r14	; 0x80066a <xTickCount>
 aae:	e1 14       	cp	r14, r1
 ab0:	f1 04       	cpc	r15, r1
 ab2:	b9 f4       	brne	.+46     	; 0xae2 <xTaskIncrementTick+0x60>
 ab4:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <pxDelayedTaskList>
 ab8:	90 91 83 06 	lds	r25, 0x0683	; 0x800683 <pxDelayedTaskList+0x1>
 abc:	20 91 80 06 	lds	r18, 0x0680	; 0x800680 <pxOverflowDelayedTaskList>
 ac0:	30 91 81 06 	lds	r19, 0x0681	; 0x800681 <pxOverflowDelayedTaskList+0x1>
 ac4:	30 93 83 06 	sts	0x0683, r19	; 0x800683 <pxDelayedTaskList+0x1>
 ac8:	20 93 82 06 	sts	0x0682, r18	; 0x800682 <pxDelayedTaskList>
 acc:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <pxOverflowDelayedTaskList+0x1>
 ad0:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <pxOverflowDelayedTaskList>
 ad4:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <xNumOfOverflows>
 ad8:	8f 5f       	subi	r24, 0xFF	; 255
 ada:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <xNumOfOverflows>
 ade:	0e 94 56 03 	call	0x6ac	; 0x6ac <prvResetNextTaskUnblockTime>
 ae2:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <xNextTaskUnblockTime>
 ae6:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <xNextTaskUnblockTime+0x1>
 aea:	e8 16       	cp	r14, r24
 aec:	f9 06       	cpc	r15, r25
 aee:	28 f4       	brcc	.+10     	; 0xafa <xTaskIncrementTick+0x78>
 af0:	d1 2c       	mov	r13, r1
 af2:	53 c0       	rjmp	.+166    	; 0xb9a <xTaskIncrementTick+0x118>
 af4:	dd 24       	eor	r13, r13
 af6:	d3 94       	inc	r13
 af8:	01 c0       	rjmp	.+2      	; 0xafc <xTaskIncrementTick+0x7a>
 afa:	d1 2c       	mov	r13, r1
 afc:	e0 91 82 06 	lds	r30, 0x0682	; 0x800682 <pxDelayedTaskList>
 b00:	f0 91 83 06 	lds	r31, 0x0683	; 0x800683 <pxDelayedTaskList+0x1>
 b04:	80 81       	ld	r24, Z
 b06:	81 11       	cpse	r24, r1
 b08:	07 c0       	rjmp	.+14     	; 0xb18 <xTaskIncrementTick+0x96>
 b0a:	8f ef       	ldi	r24, 0xFF	; 255
 b0c:	9f ef       	ldi	r25, 0xFF	; 255
 b0e:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <xNextTaskUnblockTime+0x1>
 b12:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xNextTaskUnblockTime>
 b16:	41 c0       	rjmp	.+130    	; 0xb9a <xTaskIncrementTick+0x118>
 b18:	e0 91 82 06 	lds	r30, 0x0682	; 0x800682 <pxDelayedTaskList>
 b1c:	f0 91 83 06 	lds	r31, 0x0683	; 0x800683 <pxDelayedTaskList+0x1>
 b20:	05 80       	ldd	r0, Z+5	; 0x05
 b22:	f6 81       	ldd	r31, Z+6	; 0x06
 b24:	e0 2d       	mov	r30, r0
 b26:	c6 81       	ldd	r28, Z+6	; 0x06
 b28:	d7 81       	ldd	r29, Z+7	; 0x07
 b2a:	8a 81       	ldd	r24, Y+2	; 0x02
 b2c:	9b 81       	ldd	r25, Y+3	; 0x03
 b2e:	e8 16       	cp	r14, r24
 b30:	f9 06       	cpc	r15, r25
 b32:	28 f4       	brcc	.+10     	; 0xb3e <xTaskIncrementTick+0xbc>
 b34:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <xNextTaskUnblockTime+0x1>
 b38:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xNextTaskUnblockTime>
 b3c:	2e c0       	rjmp	.+92     	; 0xb9a <xTaskIncrementTick+0x118>
 b3e:	8e 01       	movw	r16, r28
 b40:	0e 5f       	subi	r16, 0xFE	; 254
 b42:	1f 4f       	sbci	r17, 0xFF	; 255
 b44:	c8 01       	movw	r24, r16
 b46:	0e 94 7c 00 	call	0xf8	; 0xf8 <uxListRemove>
 b4a:	8c 89       	ldd	r24, Y+20	; 0x14
 b4c:	9d 89       	ldd	r25, Y+21	; 0x15
 b4e:	89 2b       	or	r24, r25
 b50:	21 f0       	breq	.+8      	; 0xb5a <xTaskIncrementTick+0xd8>
 b52:	ce 01       	movw	r24, r28
 b54:	0c 96       	adiw	r24, 0x0c	; 12
 b56:	0e 94 7c 00 	call	0xf8	; 0xf8 <uxListRemove>
 b5a:	8e 89       	ldd	r24, Y+22	; 0x16
 b5c:	90 91 69 06 	lds	r25, 0x0669	; 0x800669 <uxTopReadyPriority>
 b60:	98 17       	cp	r25, r24
 b62:	10 f4       	brcc	.+4      	; 0xb68 <xTaskIncrementTick+0xe6>
 b64:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <uxTopReadyPriority>
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	9c 01       	movw	r18, r24
 b6c:	22 0f       	add	r18, r18
 b6e:	33 1f       	adc	r19, r19
 b70:	22 0f       	add	r18, r18
 b72:	33 1f       	adc	r19, r19
 b74:	22 0f       	add	r18, r18
 b76:	33 1f       	adc	r19, r19
 b78:	82 0f       	add	r24, r18
 b7a:	93 1f       	adc	r25, r19
 b7c:	b8 01       	movw	r22, r16
 b7e:	8a 56       	subi	r24, 0x6A	; 106
 b80:	99 4f       	sbci	r25, 0xF9	; 249
 b82:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
 b86:	9e 89       	ldd	r25, Y+22	; 0x16
 b88:	e0 91 ba 06 	lds	r30, 0x06BA	; 0x8006ba <pxCurrentTCB>
 b8c:	f0 91 bb 06 	lds	r31, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 b90:	86 89       	ldd	r24, Z+22	; 0x16
 b92:	98 17       	cp	r25, r24
 b94:	08 f0       	brcs	.+2      	; 0xb98 <xTaskIncrementTick+0x116>
 b96:	ae cf       	rjmp	.-164    	; 0xaf4 <xTaskIncrementTick+0x72>
 b98:	b1 cf       	rjmp	.-158    	; 0xafc <xTaskIncrementTick+0x7a>
 b9a:	e0 91 ba 06 	lds	r30, 0x06BA	; 0x8006ba <pxCurrentTCB>
 b9e:	f0 91 bb 06 	lds	r31, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 ba2:	86 89       	ldd	r24, Z+22	; 0x16
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	fc 01       	movw	r30, r24
 ba8:	ee 0f       	add	r30, r30
 baa:	ff 1f       	adc	r31, r31
 bac:	ee 0f       	add	r30, r30
 bae:	ff 1f       	adc	r31, r31
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	8e 0f       	add	r24, r30
 bb6:	9f 1f       	adc	r25, r31
 bb8:	fc 01       	movw	r30, r24
 bba:	ea 56       	subi	r30, 0x6A	; 106
 bbc:	f9 4f       	sbci	r31, 0xF9	; 249
 bbe:	80 81       	ld	r24, Z
 bc0:	82 30       	cpi	r24, 0x02	; 2
 bc2:	10 f0       	brcs	.+4      	; 0xbc8 <xTaskIncrementTick+0x146>
 bc4:	dd 24       	eor	r13, r13
 bc6:	d3 94       	inc	r13
 bc8:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <xYieldPending>
 bcc:	81 11       	cpse	r24, r1
 bce:	0c c0       	rjmp	.+24     	; 0xbe8 <xTaskIncrementTick+0x166>
 bd0:	0d c0       	rjmp	.+26     	; 0xbec <xTaskIncrementTick+0x16a>
 bd2:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <xPendedTicks>
 bd6:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <xPendedTicks+0x1>
 bda:	01 96       	adiw	r24, 0x01	; 1
 bdc:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <xPendedTicks+0x1>
 be0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <xPendedTicks>
 be4:	d1 2c       	mov	r13, r1
 be6:	02 c0       	rjmp	.+4      	; 0xbec <xTaskIncrementTick+0x16a>
 be8:	dd 24       	eor	r13, r13
 bea:	d3 94       	inc	r13
 bec:	8d 2d       	mov	r24, r13
 bee:	df 91       	pop	r29
 bf0:	cf 91       	pop	r28
 bf2:	1f 91       	pop	r17
 bf4:	0f 91       	pop	r16
 bf6:	ff 90       	pop	r15
 bf8:	ef 90       	pop	r14
 bfa:	df 90       	pop	r13
 bfc:	08 95       	ret

00000bfe <xTaskResumeAll>:
 bfe:	0f 93       	push	r16
 c00:	1f 93       	push	r17
 c02:	cf 93       	push	r28
 c04:	df 93       	push	r29
 c06:	0f b6       	in	r0, 0x3f	; 63
 c08:	f8 94       	cli
 c0a:	0f 92       	push	r0
 c0c:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <uxSchedulerSuspended>
 c10:	81 50       	subi	r24, 0x01	; 1
 c12:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <uxSchedulerSuspended>
 c16:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <uxSchedulerSuspended>
 c1a:	81 11       	cpse	r24, r1
 c1c:	5c c0       	rjmp	.+184    	; 0xcd6 <xTaskResumeAll+0xd8>
 c1e:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxCurrentNumberOfTasks>
 c22:	81 11       	cpse	r24, r1
 c24:	33 c0       	rjmp	.+102    	; 0xc8c <xTaskResumeAll+0x8e>
 c26:	5a c0       	rjmp	.+180    	; 0xcdc <xTaskResumeAll+0xde>
 c28:	e0 91 7c 06 	lds	r30, 0x067C	; 0x80067c <xPendingReadyList+0x5>
 c2c:	f0 91 7d 06 	lds	r31, 0x067D	; 0x80067d <xPendingReadyList+0x6>
 c30:	c6 81       	ldd	r28, Z+6	; 0x06
 c32:	d7 81       	ldd	r29, Z+7	; 0x07
 c34:	ce 01       	movw	r24, r28
 c36:	0c 96       	adiw	r24, 0x0c	; 12
 c38:	0e 94 7c 00 	call	0xf8	; 0xf8 <uxListRemove>
 c3c:	8e 01       	movw	r16, r28
 c3e:	0e 5f       	subi	r16, 0xFE	; 254
 c40:	1f 4f       	sbci	r17, 0xFF	; 255
 c42:	c8 01       	movw	r24, r16
 c44:	0e 94 7c 00 	call	0xf8	; 0xf8 <uxListRemove>
 c48:	8e 89       	ldd	r24, Y+22	; 0x16
 c4a:	90 91 69 06 	lds	r25, 0x0669	; 0x800669 <uxTopReadyPriority>
 c4e:	98 17       	cp	r25, r24
 c50:	10 f4       	brcc	.+4      	; 0xc56 <xTaskResumeAll+0x58>
 c52:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <uxTopReadyPriority>
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	9c 01       	movw	r18, r24
 c5a:	22 0f       	add	r18, r18
 c5c:	33 1f       	adc	r19, r19
 c5e:	22 0f       	add	r18, r18
 c60:	33 1f       	adc	r19, r19
 c62:	22 0f       	add	r18, r18
 c64:	33 1f       	adc	r19, r19
 c66:	82 0f       	add	r24, r18
 c68:	93 1f       	adc	r25, r19
 c6a:	b8 01       	movw	r22, r16
 c6c:	8a 56       	subi	r24, 0x6A	; 106
 c6e:	99 4f       	sbci	r25, 0xF9	; 249
 c70:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
 c74:	9e 89       	ldd	r25, Y+22	; 0x16
 c76:	e0 91 ba 06 	lds	r30, 0x06BA	; 0x8006ba <pxCurrentTCB>
 c7a:	f0 91 bb 06 	lds	r31, 0x06BB	; 0x8006bb <pxCurrentTCB+0x1>
 c7e:	86 89       	ldd	r24, Z+22	; 0x16
 c80:	98 17       	cp	r25, r24
 c82:	30 f0       	brcs	.+12     	; 0xc90 <xTaskResumeAll+0x92>
 c84:	81 e0       	ldi	r24, 0x01	; 1
 c86:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <xYieldPending>
 c8a:	02 c0       	rjmp	.+4      	; 0xc90 <xTaskResumeAll+0x92>
 c8c:	c0 e0       	ldi	r28, 0x00	; 0
 c8e:	d0 e0       	ldi	r29, 0x00	; 0
 c90:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xPendingReadyList>
 c94:	81 11       	cpse	r24, r1
 c96:	c8 cf       	rjmp	.-112    	; 0xc28 <xTaskResumeAll+0x2a>
 c98:	cd 2b       	or	r28, r29
 c9a:	11 f0       	breq	.+4      	; 0xca0 <xTaskResumeAll+0xa2>
 c9c:	0e 94 56 03 	call	0x6ac	; 0x6ac <prvResetNextTaskUnblockTime>
 ca0:	c0 91 66 06 	lds	r28, 0x0666	; 0x800666 <xPendedTicks>
 ca4:	d0 91 67 06 	lds	r29, 0x0667	; 0x800667 <xPendedTicks+0x1>
 ca8:	20 97       	sbiw	r28, 0x00	; 0
 caa:	69 f0       	breq	.+26     	; 0xcc6 <xTaskResumeAll+0xc8>
 cac:	0e 94 41 05 	call	0xa82	; 0xa82 <xTaskIncrementTick>
 cb0:	88 23       	and	r24, r24
 cb2:	19 f0       	breq	.+6      	; 0xcba <xTaskResumeAll+0xbc>
 cb4:	81 e0       	ldi	r24, 0x01	; 1
 cb6:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <xYieldPending>
 cba:	21 97       	sbiw	r28, 0x01	; 1
 cbc:	b9 f7       	brne	.-18     	; 0xcac <xTaskResumeAll+0xae>
 cbe:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <xPendedTicks+0x1>
 cc2:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <xPendedTicks>
 cc6:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <xYieldPending>
 cca:	88 23       	and	r24, r24
 ccc:	31 f0       	breq	.+12     	; 0xcda <xTaskResumeAll+0xdc>
 cce:	0e 94 47 01 	call	0x28e	; 0x28e <vPortYield>
 cd2:	81 e0       	ldi	r24, 0x01	; 1
 cd4:	03 c0       	rjmp	.+6      	; 0xcdc <xTaskResumeAll+0xde>
 cd6:	80 e0       	ldi	r24, 0x00	; 0
 cd8:	01 c0       	rjmp	.+2      	; 0xcdc <xTaskResumeAll+0xde>
 cda:	80 e0       	ldi	r24, 0x00	; 0
 cdc:	0f 90       	pop	r0
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	df 91       	pop	r29
 ce2:	cf 91       	pop	r28
 ce4:	1f 91       	pop	r17
 ce6:	0f 91       	pop	r16
 ce8:	08 95       	ret

00000cea <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 cea:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <uxSchedulerSuspended>
 cee:	88 23       	and	r24, r24
 cf0:	21 f0       	breq	.+8      	; 0xcfa <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 cf2:	81 e0       	ldi	r24, 0x01	; 1
 cf4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <xYieldPending>
 cf8:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 cfa:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 cfe:	20 91 69 06 	lds	r18, 0x0669	; 0x800669 <uxTopReadyPriority>
 d02:	01 c0       	rjmp	.+2      	; 0xd06 <vTaskSwitchContext+0x1c>
 d04:	21 50       	subi	r18, 0x01	; 1
 d06:	82 2f       	mov	r24, r18
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	fc 01       	movw	r30, r24
 d0c:	ee 0f       	add	r30, r30
 d0e:	ff 1f       	adc	r31, r31
 d10:	ee 0f       	add	r30, r30
 d12:	ff 1f       	adc	r31, r31
 d14:	ee 0f       	add	r30, r30
 d16:	ff 1f       	adc	r31, r31
 d18:	e8 0f       	add	r30, r24
 d1a:	f9 1f       	adc	r31, r25
 d1c:	ea 56       	subi	r30, 0x6A	; 106
 d1e:	f9 4f       	sbci	r31, 0xF9	; 249
 d20:	30 81       	ld	r19, Z
 d22:	33 23       	and	r19, r19
 d24:	79 f3       	breq	.-34     	; 0xd04 <vTaskSwitchContext+0x1a>
 d26:	ac 01       	movw	r20, r24
 d28:	44 0f       	add	r20, r20
 d2a:	55 1f       	adc	r21, r21
 d2c:	44 0f       	add	r20, r20
 d2e:	55 1f       	adc	r21, r21
 d30:	44 0f       	add	r20, r20
 d32:	55 1f       	adc	r21, r21
 d34:	48 0f       	add	r20, r24
 d36:	59 1f       	adc	r21, r25
 d38:	df 01       	movw	r26, r30
 d3a:	01 80       	ldd	r0, Z+1	; 0x01
 d3c:	f2 81       	ldd	r31, Z+2	; 0x02
 d3e:	e0 2d       	mov	r30, r0
 d40:	02 80       	ldd	r0, Z+2	; 0x02
 d42:	f3 81       	ldd	r31, Z+3	; 0x03
 d44:	e0 2d       	mov	r30, r0
 d46:	12 96       	adiw	r26, 0x02	; 2
 d48:	fc 93       	st	X, r31
 d4a:	ee 93       	st	-X, r30
 d4c:	11 97       	sbiw	r26, 0x01	; 1
 d4e:	47 56       	subi	r20, 0x67	; 103
 d50:	59 4f       	sbci	r21, 0xF9	; 249
 d52:	e4 17       	cp	r30, r20
 d54:	f5 07       	cpc	r31, r21
 d56:	29 f4       	brne	.+10     	; 0xd62 <vTaskSwitchContext+0x78>
 d58:	42 81       	ldd	r20, Z+2	; 0x02
 d5a:	53 81       	ldd	r21, Z+3	; 0x03
 d5c:	fd 01       	movw	r30, r26
 d5e:	52 83       	std	Z+2, r21	; 0x02
 d60:	41 83       	std	Z+1, r20	; 0x01
 d62:	fc 01       	movw	r30, r24
 d64:	ee 0f       	add	r30, r30
 d66:	ff 1f       	adc	r31, r31
 d68:	ee 0f       	add	r30, r30
 d6a:	ff 1f       	adc	r31, r31
 d6c:	ee 0f       	add	r30, r30
 d6e:	ff 1f       	adc	r31, r31
 d70:	8e 0f       	add	r24, r30
 d72:	9f 1f       	adc	r25, r31
 d74:	fc 01       	movw	r30, r24
 d76:	ea 56       	subi	r30, 0x6A	; 106
 d78:	f9 4f       	sbci	r31, 0xF9	; 249
 d7a:	01 80       	ldd	r0, Z+1	; 0x01
 d7c:	f2 81       	ldd	r31, Z+2	; 0x02
 d7e:	e0 2d       	mov	r30, r0
 d80:	86 81       	ldd	r24, Z+6	; 0x06
 d82:	97 81       	ldd	r25, Z+7	; 0x07
 d84:	90 93 bb 06 	sts	0x06BB, r25	; 0x8006bb <pxCurrentTCB+0x1>
 d88:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <pxCurrentTCB>
 d8c:	20 93 69 06 	sts	0x0669, r18	; 0x800669 <uxTopReadyPriority>
 d90:	08 95       	ret

00000d92 <Task1>:

void Task1(void *pvparam)
{
	(void) pvparam;
	int i = 0;
	OCR2 = 0;
 d92:	13 bc       	out	0x23, r1	; 35
	TCCR2 = 0x76;
 d94:	86 e7       	ldi	r24, 0x76	; 118
 d96:	85 bd       	out	0x25, r24	; 37
	
	while(1){
	for(i = 0; i<255; i++)
 d98:	80 e0       	ldi	r24, 0x00	; 0
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	02 c0       	rjmp	.+4      	; 0xda2 <Task1+0x10>
	{
		OCR2 = i;
 d9e:	83 bd       	out	0x23, r24	; 35
	int i = 0;
	OCR2 = 0;
	TCCR2 = 0x76;
	
	while(1){
	for(i = 0; i<255; i++)
 da0:	01 96       	adiw	r24, 0x01	; 1
 da2:	8f 3f       	cpi	r24, 0xFF	; 255
 da4:	91 05       	cpc	r25, r1
 da6:	dc f3       	brlt	.-10     	; 0xd9e <Task1+0xc>
 da8:	f7 cf       	rjmp	.-18     	; 0xd98 <Task1+0x6>

00000daa <Task2>:

void Task2(void *pvparam)
{
	(void) pvparam;
	int j = 0;
	OCR0 = 0;
 daa:	1c be       	out	0x3c, r1	; 60
	
	TCCR0 = 0x74;
 dac:	84 e7       	ldi	r24, 0x74	; 116
 dae:	83 bf       	out	0x33, r24	; 51
	while(1){
	for(j=0; j<255; ++j)
 db0:	80 e0       	ldi	r24, 0x00	; 0
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	02 c0       	rjmp	.+4      	; 0xdba <Task2+0x10>
	{
		OCR0 = j;
 db6:	8c bf       	out	0x3c, r24	; 60
	int j = 0;
	OCR0 = 0;
	
	TCCR0 = 0x74;
	while(1){
	for(j=0; j<255; ++j)
 db8:	01 96       	adiw	r24, 0x01	; 1
 dba:	8f 3f       	cpi	r24, 0xFF	; 255
 dbc:	91 05       	cpc	r25, r1
 dbe:	dc f3       	brlt	.-10     	; 0xdb6 <Task2+0xc>
 dc0:	f7 cf       	rjmp	.-18     	; 0xdb0 <Task2+0x6>

00000dc2 <main>:
#define in3 2
#define in4 3


int main(void)
{
 dc2:	ef 92       	push	r14
 dc4:	ff 92       	push	r15
 dc6:	0f 93       	push	r16
	DDRD |= (1<<ena2);
 dc8:	81 b3       	in	r24, 0x11	; 17
 dca:	80 68       	ori	r24, 0x80	; 128
 dcc:	81 bb       	out	0x11, r24	; 17
	DDRC |= (1<<in1) | (1<<in2) | (1<<in3) | (1<<in4);
 dce:	84 b3       	in	r24, 0x14	; 20
 dd0:	8f 60       	ori	r24, 0x0F	; 15
 dd2:	84 bb       	out	0x14, r24	; 20
	DDRB |=(1<<ena1);
 dd4:	87 b3       	in	r24, 0x17	; 23
 dd6:	88 60       	ori	r24, 0x08	; 8
 dd8:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0x05; 
 dda:	85 e0       	ldi	r24, 0x05	; 5
 ddc:	85 bb       	out	0x15, r24	; 21
	  
	
	xTaskCreate(Task1, "task1", 100,NULL, 1,NULL);
 dde:	e1 2c       	mov	r14, r1
 de0:	f1 2c       	mov	r15, r1
 de2:	01 e0       	ldi	r16, 0x01	; 1
 de4:	20 e0       	ldi	r18, 0x00	; 0
 de6:	30 e0       	ldi	r19, 0x00	; 0
 de8:	44 e6       	ldi	r20, 0x64	; 100
 dea:	50 e0       	ldi	r21, 0x00	; 0
 dec:	66 e6       	ldi	r22, 0x66	; 102
 dee:	70 e0       	ldi	r23, 0x00	; 0
 df0:	89 ec       	ldi	r24, 0xC9	; 201
 df2:	96 e0       	ldi	r25, 0x06	; 6
 df4:	0e 94 bb 04 	call	0x976	; 0x976 <xTaskCreate>
	xTaskCreate(Task2, "task2", 100,NULL,1,NULL);
 df8:	20 e0       	ldi	r18, 0x00	; 0
 dfa:	30 e0       	ldi	r19, 0x00	; 0
 dfc:	44 e6       	ldi	r20, 0x64	; 100
 dfe:	50 e0       	ldi	r21, 0x00	; 0
 e00:	6c e6       	ldi	r22, 0x6C	; 108
 e02:	70 e0       	ldi	r23, 0x00	; 0
 e04:	85 ed       	ldi	r24, 0xD5	; 213
 e06:	96 e0       	ldi	r25, 0x06	; 6
 e08:	0e 94 bb 04 	call	0x976	; 0x976 <xTaskCreate>
	
	vTaskStartScheduler();
 e0c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vTaskStartScheduler>
	
	return 0;
      
}
 e10:	80 e0       	ldi	r24, 0x00	; 0
 e12:	90 e0       	ldi	r25, 0x00	; 0
 e14:	0f 91       	pop	r16
 e16:	ff 90       	pop	r15
 e18:	ef 90       	pop	r14
 e1a:	08 95       	ret

00000e1c <_exit>:
 e1c:	f8 94       	cli

00000e1e <__stop_program>:
 e1e:	ff cf       	rjmp	.-2      	; 0xe1e <__stop_program>
