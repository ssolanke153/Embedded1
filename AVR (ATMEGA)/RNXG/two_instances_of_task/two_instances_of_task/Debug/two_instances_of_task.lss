
two_instances_of_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000f7a  0000100e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064e  0080009c  0080009c  0000104a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003027  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ccd  00000000  00000000  0000438f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d5a  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008b8  00000000  00000000  00006db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013bd  00000000  00000000  00007670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d94  00000000  00000000  00008a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000b7c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	ac e9       	ldi	r26, 0x9C	; 156
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3e       	cpi	r26, 0xEA	; 234
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 07 	call	0xf0a	; 0xf0a <main>
  8a:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
  92:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  94:	03 96       	adiw	r24, 0x03	; 3
  96:	92 83       	std	Z+2, r25	; 0x02
  98:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	3f ef       	ldi	r19, 0xFF	; 255
  9e:	34 83       	std	Z+4, r19	; 0x04
  a0:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  a2:	96 83       	std	Z+6, r25	; 0x06
  a4:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  a6:	90 87       	std	Z+8, r25	; 0x08
  a8:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  aa:	10 82       	st	Z, r1
  ac:	08 95       	ret

000000ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
  ae:	fc 01       	movw	r30, r24
  b0:	11 86       	std	Z+9, r1	; 0x09
  b2:	10 86       	std	Z+8, r1	; 0x08
  b4:	08 95       	ret

000000b6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	9c 01       	movw	r18, r24
  bc:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
  be:	dc 01       	movw	r26, r24
  c0:	11 96       	adiw	r26, 0x01	; 1
  c2:	cd 91       	ld	r28, X+
  c4:	dc 91       	ld	r29, X
  c6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
  c8:	d3 83       	std	Z+3, r29	; 0x03
  ca:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  cc:	8c 81       	ldd	r24, Y+4	; 0x04
  ce:	9d 81       	ldd	r25, Y+5	; 0x05
  d0:	95 83       	std	Z+5, r25	; 0x05
  d2:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
  d4:	8c 81       	ldd	r24, Y+4	; 0x04
  d6:	9d 81       	ldd	r25, Y+5	; 0x05
  d8:	dc 01       	movw	r26, r24
  da:	13 96       	adiw	r26, 0x03	; 3
  dc:	7c 93       	st	X, r23
  de:	6e 93       	st	-X, r22
  e0:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
  e2:	7d 83       	std	Y+5, r23	; 0x05
  e4:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
  e6:	31 87       	std	Z+9, r19	; 0x09
  e8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
  ea:	f9 01       	movw	r30, r18
  ec:	80 81       	ld	r24, Z
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 83       	st	Z, r24
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  fe:	48 81       	ld	r20, Y
 100:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 102:	4f 3f       	cpi	r20, 0xFF	; 255
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	52 07       	cpc	r21, r18
 108:	21 f4       	brne	.+8      	; 0x112 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 10a:	fc 01       	movw	r30, r24
 10c:	a7 81       	ldd	r26, Z+7	; 0x07
 10e:	b0 85       	ldd	r27, Z+8	; 0x08
 110:	0d c0       	rjmp	.+26     	; 0x12c <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 112:	dc 01       	movw	r26, r24
 114:	13 96       	adiw	r26, 0x03	; 3
 116:	01 c0       	rjmp	.+2      	; 0x11a <vListInsert+0x22>
 118:	df 01       	movw	r26, r30
 11a:	12 96       	adiw	r26, 0x02	; 2
 11c:	ed 91       	ld	r30, X+
 11e:	fc 91       	ld	r31, X
 120:	13 97       	sbiw	r26, 0x03	; 3
 122:	20 81       	ld	r18, Z
 124:	31 81       	ldd	r19, Z+1	; 0x01
 126:	42 17       	cp	r20, r18
 128:	53 07       	cpc	r21, r19
 12a:	b0 f7       	brcc	.-20     	; 0x118 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 12c:	12 96       	adiw	r26, 0x02	; 2
 12e:	ed 91       	ld	r30, X+
 130:	fc 91       	ld	r31, X
 132:	13 97       	sbiw	r26, 0x03	; 3
 134:	fb 83       	std	Y+3, r31	; 0x03
 136:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 138:	d5 83       	std	Z+5, r29	; 0x05
 13a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
 13c:	bd 83       	std	Y+5, r27	; 0x05
 13e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
 140:	13 96       	adiw	r26, 0x03	; 3
 142:	dc 93       	st	X, r29
 144:	ce 93       	st	-X, r28
 146:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 148:	99 87       	std	Y+9, r25	; 0x09
 14a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
 14c:	fc 01       	movw	r30, r24
 14e:	20 81       	ld	r18, Z
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	20 83       	st	Z, r18
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 160:	a0 85       	ldd	r26, Z+8	; 0x08
 162:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 164:	c2 81       	ldd	r28, Z+2	; 0x02
 166:	d3 81       	ldd	r29, Z+3	; 0x03
 168:	84 81       	ldd	r24, Z+4	; 0x04
 16a:	95 81       	ldd	r25, Z+5	; 0x05
 16c:	9d 83       	std	Y+5, r25	; 0x05
 16e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 170:	c4 81       	ldd	r28, Z+4	; 0x04
 172:	d5 81       	ldd	r29, Z+5	; 0x05
 174:	82 81       	ldd	r24, Z+2	; 0x02
 176:	93 81       	ldd	r25, Z+3	; 0x03
 178:	9b 83       	std	Y+3, r25	; 0x03
 17a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 17c:	11 96       	adiw	r26, 0x01	; 1
 17e:	8d 91       	ld	r24, X+
 180:	9c 91       	ld	r25, X
 182:	12 97       	sbiw	r26, 0x02	; 2
 184:	e8 17       	cp	r30, r24
 186:	f9 07       	cpc	r31, r25
 188:	31 f4       	brne	.+12     	; 0x196 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 18a:	84 81       	ldd	r24, Z+4	; 0x04
 18c:	95 81       	ldd	r25, Z+5	; 0x05
 18e:	12 96       	adiw	r26, 0x02	; 2
 190:	9c 93       	st	X, r25
 192:	8e 93       	st	-X, r24
 194:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 196:	11 86       	std	Z+9, r1	; 0x09
 198:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 19a:	8c 91       	ld	r24, X
 19c:	81 50       	subi	r24, 0x01	; 1
 19e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 1a0:	8c 91       	ld	r24, X
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 1a8:	1b bc       	out	0x2b, r1	; 43
 1aa:	8c e7       	ldi	r24, 0x7C	; 124
 1ac:	8a bd       	out	0x2a, r24	; 42
 1ae:	8b e0       	ldi	r24, 0x0B	; 11
 1b0:	8e bd       	out	0x2e, r24	; 46
 1b2:	89 b7       	in	r24, 0x39	; 57
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	89 bf       	out	0x39, r24	; 57
 1b8:	08 95       	ret

000001ba <pxPortInitialiseStack>:
 1ba:	31 e1       	ldi	r19, 0x11	; 17
 1bc:	fc 01       	movw	r30, r24
 1be:	30 83       	st	Z, r19
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	22 e2       	ldi	r18, 0x22	; 34
 1c4:	20 83       	st	Z, r18
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	a3 e3       	ldi	r26, 0x33	; 51
 1ca:	a0 83       	st	Z, r26
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	60 83       	st	Z, r22
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	70 83       	st	Z, r23
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	10 82       	st	Z, r1
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	60 e8       	ldi	r22, 0x80	; 128
 1dc:	60 83       	st	Z, r22
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	10 82       	st	Z, r1
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	60 83       	st	Z, r22
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	63 e0       	ldi	r22, 0x03	; 3
 1ec:	60 83       	st	Z, r22
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	64 e0       	ldi	r22, 0x04	; 4
 1f2:	60 83       	st	Z, r22
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	65 e0       	ldi	r22, 0x05	; 5
 1f8:	60 83       	st	Z, r22
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	66 e0       	ldi	r22, 0x06	; 6
 1fe:	60 83       	st	Z, r22
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	67 e0       	ldi	r22, 0x07	; 7
 204:	60 83       	st	Z, r22
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	68 e0       	ldi	r22, 0x08	; 8
 20a:	60 83       	st	Z, r22
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	69 e0       	ldi	r22, 0x09	; 9
 210:	60 83       	st	Z, r22
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	60 e1       	ldi	r22, 0x10	; 16
 216:	60 83       	st	Z, r22
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	30 83       	st	Z, r19
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	32 e1       	ldi	r19, 0x12	; 18
 220:	30 83       	st	Z, r19
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	33 e1       	ldi	r19, 0x13	; 19
 226:	30 83       	st	Z, r19
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	34 e1       	ldi	r19, 0x14	; 20
 22c:	30 83       	st	Z, r19
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	35 e1       	ldi	r19, 0x15	; 21
 232:	30 83       	st	Z, r19
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	36 e1       	ldi	r19, 0x16	; 22
 238:	30 83       	st	Z, r19
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	37 e1       	ldi	r19, 0x17	; 23
 23e:	30 83       	st	Z, r19
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	38 e1       	ldi	r19, 0x18	; 24
 244:	30 83       	st	Z, r19
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	39 e1       	ldi	r19, 0x19	; 25
 24a:	30 83       	st	Z, r19
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	30 e2       	ldi	r19, 0x20	; 32
 250:	30 83       	st	Z, r19
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	31 e2       	ldi	r19, 0x21	; 33
 256:	30 83       	st	Z, r19
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	20 83       	st	Z, r18
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	23 e2       	ldi	r18, 0x23	; 35
 260:	20 83       	st	Z, r18
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	40 83       	st	Z, r20
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	50 83       	st	Z, r21
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	26 e2       	ldi	r18, 0x26	; 38
 26e:	20 83       	st	Z, r18
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	27 e2       	ldi	r18, 0x27	; 39
 274:	20 83       	st	Z, r18
 276:	31 97       	sbiw	r30, 0x01	; 1
 278:	28 e2       	ldi	r18, 0x28	; 40
 27a:	20 83       	st	Z, r18
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	29 e2       	ldi	r18, 0x29	; 41
 280:	20 83       	st	Z, r18
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	20 e3       	ldi	r18, 0x30	; 48
 286:	20 83       	st	Z, r18
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	21 e3       	ldi	r18, 0x31	; 49
 28c:	20 83       	st	Z, r18
 28e:	86 97       	sbiw	r24, 0x26	; 38
 290:	08 95       	ret

00000292 <xPortStartScheduler>:
 292:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <prvSetupTimerInterrupt>
 296:	a0 91 e4 06 	lds	r26, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 29a:	b0 91 e5 06 	lds	r27, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 29e:	cd 91       	ld	r28, X+
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	dd 91       	ld	r29, X+
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	bf 90       	pop	r11
 2d0:	af 90       	pop	r10
 2d2:	9f 90       	pop	r9
 2d4:	8f 90       	pop	r8
 2d6:	7f 90       	pop	r7
 2d8:	6f 90       	pop	r6
 2da:	5f 90       	pop	r5
 2dc:	4f 90       	pop	r4
 2de:	3f 90       	pop	r3
 2e0:	2f 90       	pop	r2
 2e2:	1f 90       	pop	r1
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	08 95       	ret
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	08 95       	ret

000002f0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	0f 92       	push	r0
 2f8:	1f 92       	push	r1
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 92       	push	r2
 2fe:	3f 92       	push	r3
 300:	4f 92       	push	r4
 302:	5f 92       	push	r5
 304:	6f 92       	push	r6
 306:	7f 92       	push	r7
 308:	8f 92       	push	r8
 30a:	9f 92       	push	r9
 30c:	af 92       	push	r10
 30e:	bf 92       	push	r11
 310:	cf 92       	push	r12
 312:	df 92       	push	r13
 314:	ef 92       	push	r14
 316:	ff 92       	push	r15
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
 338:	a0 91 e4 06 	lds	r26, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 33c:	b0 91 e5 06 	lds	r27, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 340:	0d b6       	in	r0, 0x3d	; 61
 342:	0d 92       	st	X+, r0
 344:	0e b6       	in	r0, 0x3e	; 62
 346:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 348:	0e 94 0e 07 	call	0xe1c	; 0xe1c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 34c:	a0 91 e4 06 	lds	r26, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 350:	b0 91 e5 06 	lds	r27, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 354:	cd 91       	ld	r28, X+
 356:	cd bf       	out	0x3d, r28	; 61
 358:	dd 91       	ld	r29, X+
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	bf 90       	pop	r11
 386:	af 90       	pop	r10
 388:	9f 90       	pop	r9
 38a:	8f 90       	pop	r8
 38c:	7f 90       	pop	r7
 38e:	6f 90       	pop	r6
 390:	5f 90       	pop	r5
 392:	4f 90       	pop	r4
 394:	3f 90       	pop	r3
 396:	2f 90       	pop	r2
 398:	1f 90       	pop	r1
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0

	asm volatile ( "ret" );
 3a0:	08 95       	ret

000003a2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	0f 92       	push	r0
 3aa:	1f 92       	push	r1
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 92       	push	r2
 3b0:	3f 92       	push	r3
 3b2:	4f 92       	push	r4
 3b4:	5f 92       	push	r5
 3b6:	6f 92       	push	r6
 3b8:	7f 92       	push	r7
 3ba:	8f 92       	push	r8
 3bc:	9f 92       	push	r9
 3be:	af 92       	push	r10
 3c0:	bf 92       	push	r11
 3c2:	cf 92       	push	r12
 3c4:	df 92       	push	r13
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	4f 93       	push	r20
 3d4:	5f 93       	push	r21
 3d6:	6f 93       	push	r22
 3d8:	7f 93       	push	r23
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	af 93       	push	r26
 3e0:	bf 93       	push	r27
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
 3ea:	a0 91 e4 06 	lds	r26, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 3ee:	b0 91 e5 06 	lds	r27, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 3f2:	0d b6       	in	r0, 0x3d	; 61
 3f4:	0d 92       	st	X+, r0
 3f6:	0e b6       	in	r0, 0x3e	; 62
 3f8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 3fa:	0e 94 c4 05 	call	0xb88	; 0xb88 <xTaskIncrementTick>
 3fe:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 400:	0e 94 0e 07 	call	0xe1c	; 0xe1c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 404:	a0 91 e4 06 	lds	r26, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 408:	b0 91 e5 06 	lds	r27, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 40c:	cd 91       	ld	r28, X+
 40e:	cd bf       	out	0x3d, r28	; 61
 410:	dd 91       	ld	r29, X+
 412:	de bf       	out	0x3e, r29	; 62
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	bf 90       	pop	r11
 43e:	af 90       	pop	r10
 440:	9f 90       	pop	r9
 442:	8f 90       	pop	r8
 444:	7f 90       	pop	r7
 446:	6f 90       	pop	r6
 448:	5f 90       	pop	r5
 44a:	4f 90       	pop	r4
 44c:	3f 90       	pop	r3
 44e:	2f 90       	pop	r2
 450:	1f 90       	pop	r1
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0

	asm volatile ( "ret" );
 458:	08 95       	ret

0000045a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 45a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <vPortYieldFromTick>
		asm volatile ( "reti" );
 45e:	18 95       	reti

00000460 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 460:	e8 ea       	ldi	r30, 0xA8	; 168
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	ac ea       	ldi	r26, 0xAC	; 172
 466:	b0 e0       	ldi	r27, 0x00	; 0
 468:	b1 83       	std	Z+1, r27	; 0x01
 46a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
 46c:	13 82       	std	Z+3, r1	; 0x03
 46e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
 470:	e4 e8       	ldi	r30, 0x84	; 132
 472:	f6 e0       	ldi	r31, 0x06	; 6
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
 474:	f0 93 a7 00 	sts	0x00A7, r31	; 0x8000a7 <pxEnd+0x1>
 478:	e0 93 a6 00 	sts	0x00A6, r30	; 0x8000a6 <pxEnd>
    pxEnd->xBlockSize = 0;
 47c:	13 82       	std	Z+3, r1	; 0x03
 47e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
 480:	11 82       	std	Z+1, r1	; 0x01
 482:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 484:	88 ed       	ldi	r24, 0xD8	; 216
 486:	95 e0       	ldi	r25, 0x05	; 5
 488:	13 96       	adiw	r26, 0x03	; 3
 48a:	9c 93       	st	X, r25
 48c:	8e 93       	st	-X, r24
 48e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 490:	ed 93       	st	X+, r30
 492:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 494:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <xMinimumEverFreeBytesRemaining+0x1>
 498:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 49c:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <xFreeBytesRemaining+0x1>
 4a0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	90 e8       	ldi	r25, 0x80	; 128
 4a8:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__data_end+0x1>
 4ac:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__data_end>
 4b0:	08 95       	ret

000004b2 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 4b8:	a8 ea       	ldi	r26, 0xA8	; 168
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <prvInsertBlockIntoFreeList+0xe>
 4be:	df 01       	movw	r26, r30
 4c0:	ed 91       	ld	r30, X+
 4c2:	fc 91       	ld	r31, X
 4c4:	11 97       	sbiw	r26, 0x01	; 1
 4c6:	ec 17       	cp	r30, r28
 4c8:	fd 07       	cpc	r31, r29
 4ca:	c8 f3       	brcs	.-14     	; 0x4be <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 4cc:	12 96       	adiw	r26, 0x02	; 2
 4ce:	8d 91       	ld	r24, X+
 4d0:	9c 91       	ld	r25, X
 4d2:	13 97       	sbiw	r26, 0x03	; 3
 4d4:	9d 01       	movw	r18, r26
 4d6:	28 0f       	add	r18, r24
 4d8:	39 1f       	adc	r19, r25
 4da:	c2 17       	cp	r28, r18
 4dc:	d3 07       	cpc	r29, r19
 4de:	49 f4       	brne	.+18     	; 0x4f2 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 4e0:	2a 81       	ldd	r18, Y+2	; 0x02
 4e2:	3b 81       	ldd	r19, Y+3	; 0x03
 4e4:	82 0f       	add	r24, r18
 4e6:	93 1f       	adc	r25, r19
 4e8:	13 96       	adiw	r26, 0x03	; 3
 4ea:	9c 93       	st	X, r25
 4ec:	8e 93       	st	-X, r24
 4ee:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
 4f0:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	9b 81       	ldd	r25, Y+3	; 0x03
 4f6:	9e 01       	movw	r18, r28
 4f8:	28 0f       	add	r18, r24
 4fa:	39 1f       	adc	r19, r25
 4fc:	e2 17       	cp	r30, r18
 4fe:	f3 07       	cpc	r31, r19
 500:	c1 f4       	brne	.+48     	; 0x532 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 502:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <pxEnd>
 506:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <pxEnd+0x1>
 50a:	e2 17       	cp	r30, r18
 50c:	f3 07       	cpc	r31, r19
 50e:	71 f0       	breq	.+28     	; 0x52c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 510:	22 81       	ldd	r18, Z+2	; 0x02
 512:	33 81       	ldd	r19, Z+3	; 0x03
 514:	82 0f       	add	r24, r18
 516:	93 1f       	adc	r25, r19
 518:	9b 83       	std	Y+3, r25	; 0x03
 51a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 51c:	ed 91       	ld	r30, X+
 51e:	fc 91       	ld	r31, X
 520:	11 97       	sbiw	r26, 0x01	; 1
 522:	80 81       	ld	r24, Z
 524:	91 81       	ldd	r25, Z+1	; 0x01
 526:	99 83       	std	Y+1, r25	; 0x01
 528:	88 83       	st	Y, r24
 52a:	05 c0       	rjmp	.+10     	; 0x536 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 52c:	39 83       	std	Y+1, r19	; 0x01
 52e:	28 83       	st	Y, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 532:	f9 83       	std	Y+1, r31	; 0x01
 534:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 536:	ca 17       	cp	r28, r26
 538:	db 07       	cpc	r29, r27
 53a:	11 f0       	breq	.+4      	; 0x540 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 53c:	cd 93       	st	X+, r28
 53e:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 546:	ef 92       	push	r14
 548:	ff 92       	push	r15
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
 554:	0e 94 be 05 	call	0xb7c	; 0xb7c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 558:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <pxEnd>
 55c:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <pxEnd+0x1>
 560:	89 2b       	or	r24, r25
 562:	11 f4       	brne	.+4      	; 0x568 <pvPortMalloc+0x22>
        {
            prvHeapInit();
 564:	0e 94 30 02 	call	0x460	; 0x460 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 568:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 56c:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 570:	80 23       	and	r24, r16
 572:	91 23       	and	r25, r17
 574:	89 2b       	or	r24, r25
 576:	09 f0       	breq	.+2      	; 0x57a <pvPortMalloc+0x34>
 578:	77 c0       	rjmp	.+238    	; 0x668 <pvPortMalloc+0x122>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 57a:	01 15       	cp	r16, r1
 57c:	11 05       	cpc	r17, r1
 57e:	49 f0       	breq	.+18     	; 0x592 <pvPortMalloc+0x4c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 580:	c8 01       	movw	r24, r16
 582:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 584:	08 17       	cp	r16, r24
 586:	19 07       	cpc	r17, r25
 588:	18 f0       	brcs	.+6      	; 0x590 <pvPortMalloc+0x4a>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 58a:	00 e0       	ldi	r16, 0x00	; 0
 58c:	10 e0       	ldi	r17, 0x00	; 0
 58e:	01 c0       	rjmp	.+2      	; 0x592 <pvPortMalloc+0x4c>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
 590:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 592:	01 15       	cp	r16, r1
 594:	11 05       	cpc	r17, r1
 596:	09 f4       	brne	.+2      	; 0x59a <pvPortMalloc+0x54>
 598:	6a c0       	rjmp	.+212    	; 0x66e <pvPortMalloc+0x128>
 59a:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <xFreeBytesRemaining>
 59e:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <xFreeBytesRemaining+0x1>
 5a2:	80 17       	cp	r24, r16
 5a4:	91 07       	cpc	r25, r17
 5a6:	08 f4       	brcc	.+2      	; 0x5aa <pvPortMalloc+0x64>
 5a8:	65 c0       	rjmp	.+202    	; 0x674 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
 5aa:	c0 91 a8 00 	lds	r28, 0x00A8	; 0x8000a8 <xStart>
 5ae:	d0 91 a9 00 	lds	r29, 0x00A9	; 0x8000a9 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 5b2:	e8 ea       	ldi	r30, 0xA8	; 168
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <pvPortMalloc+0x76>
                {
                    pxPreviousBlock = pxBlock;
 5b8:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
 5ba:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	9b 81       	ldd	r25, Y+3	; 0x03
 5c0:	80 17       	cp	r24, r16
 5c2:	91 07       	cpc	r25, r17
 5c4:	20 f4       	brcc	.+8      	; 0x5ce <pvPortMalloc+0x88>
 5c6:	88 81       	ld	r24, Y
 5c8:	99 81       	ldd	r25, Y+1	; 0x01
 5ca:	00 97       	sbiw	r24, 0x00	; 0
 5cc:	a9 f7       	brne	.-22     	; 0x5b8 <pvPortMalloc+0x72>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 5ce:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <pxEnd>
 5d2:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <pxEnd+0x1>
 5d6:	c8 17       	cp	r28, r24
 5d8:	d9 07       	cpc	r29, r25
 5da:	09 f4       	brne	.+2      	; 0x5de <pvPortMalloc+0x98>
 5dc:	4e c0       	rjmp	.+156    	; 0x67a <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 5de:	e0 80       	ld	r14, Z
 5e0:	f1 80       	ldd	r15, Z+1	; 0x01
 5e2:	84 e0       	ldi	r24, 0x04	; 4
 5e4:	e8 0e       	add	r14, r24
 5e6:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 5e8:	88 81       	ld	r24, Y
 5ea:	99 81       	ldd	r25, Y+1	; 0x01
 5ec:	91 83       	std	Z+1, r25	; 0x01
 5ee:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 5f0:	2a 81       	ldd	r18, Y+2	; 0x02
 5f2:	3b 81       	ldd	r19, Y+3	; 0x03
 5f4:	20 1b       	sub	r18, r16
 5f6:	31 0b       	sbc	r19, r17
 5f8:	29 30       	cpi	r18, 0x09	; 9
 5fa:	31 05       	cpc	r19, r1
 5fc:	50 f0       	brcs	.+20     	; 0x612 <pvPortMalloc+0xcc>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 5fe:	ce 01       	movw	r24, r28
 600:	80 0f       	add	r24, r16
 602:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 604:	fc 01       	movw	r30, r24
 606:	33 83       	std	Z+3, r19	; 0x03
 608:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
 60a:	1b 83       	std	Y+3, r17	; 0x03
 60c:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 60e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 612:	2a 81       	ldd	r18, Y+2	; 0x02
 614:	3b 81       	ldd	r19, Y+3	; 0x03
 616:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <xFreeBytesRemaining>
 61a:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <xFreeBytesRemaining+0x1>
 61e:	82 1b       	sub	r24, r18
 620:	93 0b       	sbc	r25, r19
 622:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <xFreeBytesRemaining+0x1>
 626:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 62a:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <xMinimumEverFreeBytesRemaining>
 62e:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <xMinimumEverFreeBytesRemaining+0x1>
 632:	84 17       	cp	r24, r20
 634:	95 07       	cpc	r25, r21
 636:	20 f4       	brcc	.+8      	; 0x640 <pvPortMalloc+0xfa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 638:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <xMinimumEverFreeBytesRemaining+0x1>
 63c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 640:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 644:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 648:	28 2b       	or	r18, r24
 64a:	39 2b       	or	r19, r25
 64c:	3b 83       	std	Y+3, r19	; 0x03
 64e:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
 650:	19 82       	std	Y+1, r1	; 0x01
 652:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
 654:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <xNumberOfSuccessfulAllocations>
 658:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <xNumberOfSuccessfulAllocations+0x1>
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <xNumberOfSuccessfulAllocations+0x1>
 662:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <xNumberOfSuccessfulAllocations>
 666:	0b c0       	rjmp	.+22     	; 0x67e <pvPortMalloc+0x138>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 668:	e1 2c       	mov	r14, r1
 66a:	f1 2c       	mov	r15, r1
 66c:	08 c0       	rjmp	.+16     	; 0x67e <pvPortMalloc+0x138>
 66e:	e1 2c       	mov	r14, r1
 670:	f1 2c       	mov	r15, r1
 672:	05 c0       	rjmp	.+10     	; 0x67e <pvPortMalloc+0x138>
 674:	e1 2c       	mov	r14, r1
 676:	f1 2c       	mov	r15, r1
 678:	02 c0       	rjmp	.+4      	; 0x67e <pvPortMalloc+0x138>
 67a:	e1 2c       	mov	r14, r1
 67c:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 67e:	0e 94 82 06 	call	0xd04	; 0xd04 <xTaskResumeAll>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
 682:	c7 01       	movw	r24, r14
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	1f 91       	pop	r17
 68a:	0f 91       	pop	r16
 68c:	ff 90       	pop	r15
 68e:	ef 90       	pop	r14
 690:	08 95       	ret

00000692 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
 69a:	00 97       	sbiw	r24, 0x00	; 0
 69c:	99 f1       	breq	.+102    	; 0x704 <vPortFree+0x72>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 69e:	ec 01       	movw	r28, r24
 6a0:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 6a2:	4a 81       	ldd	r20, Y+2	; 0x02
 6a4:	5b 81       	ldd	r21, Y+3	; 0x03
 6a6:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <__data_end>
 6aa:	30 91 9d 00 	lds	r19, 0x009D	; 0x80009d <__data_end+0x1>
 6ae:	ba 01       	movw	r22, r20
 6b0:	62 23       	and	r22, r18
 6b2:	73 23       	and	r23, r19
 6b4:	67 2b       	or	r22, r23
 6b6:	31 f1       	breq	.+76     	; 0x704 <vPortFree+0x72>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 6b8:	68 81       	ld	r22, Y
 6ba:	79 81       	ldd	r23, Y+1	; 0x01
 6bc:	67 2b       	or	r22, r23
 6be:	11 f5       	brne	.+68     	; 0x704 <vPortFree+0x72>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 6c0:	20 95       	com	r18
 6c2:	30 95       	com	r19
 6c4:	24 23       	and	r18, r20
 6c6:	35 23       	and	r19, r21
 6c8:	3b 83       	std	Y+3, r19	; 0x03
 6ca:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
 6cc:	0e 94 be 05 	call	0xb7c	; 0xb7c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 6d0:	8a 81       	ldd	r24, Y+2	; 0x02
 6d2:	9b 81       	ldd	r25, Y+3	; 0x03
 6d4:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <xFreeBytesRemaining>
 6d8:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <xFreeBytesRemaining+0x1>
 6dc:	82 0f       	add	r24, r18
 6de:	93 1f       	adc	r25, r19
 6e0:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <xFreeBytesRemaining+0x1>
 6e4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 6e8:	ce 01       	movw	r24, r28
 6ea:	0e 94 59 02 	call	0x4b2	; 0x4b2 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 6ee:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <xNumberOfSuccessfulFrees>
 6f2:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <xNumberOfSuccessfulFrees+0x1>
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <xNumberOfSuccessfulFrees+0x1>
 6fc:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
 700:	0e 94 82 06 	call	0xd04	; 0xd04 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	08 95       	ret

0000070e <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 70e:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxDelayedTaskList>
 712:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
 716:	80 81       	ld	r24, Z
 718:	81 11       	cpse	r24, r1
 71a:	07 c0       	rjmp	.+14     	; 0x72a <prvResetNextTaskUnblockTime+0x1c>
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <xNextTaskUnblockTime+0x1>
 724:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xNextTaskUnblockTime>
 728:	08 95       	ret
 72a:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxDelayedTaskList>
 72e:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
 732:	05 80       	ldd	r0, Z+5	; 0x05
 734:	f6 81       	ldd	r31, Z+6	; 0x06
 736:	e0 2d       	mov	r30, r0
 738:	80 81       	ld	r24, Z
 73a:	91 81       	ldd	r25, Z+1	; 0x01
 73c:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <xNextTaskUnblockTime+0x1>
 740:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xNextTaskUnblockTime>
 744:	08 95       	ret

00000746 <prvDeleteTCB>:
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	ec 01       	movw	r28, r24
 74c:	8f 89       	ldd	r24, Y+23	; 0x17
 74e:	98 8d       	ldd	r25, Y+24	; 0x18
 750:	0e 94 49 03 	call	0x692	; 0x692 <vPortFree>
 754:	ce 01       	movw	r24, r28
 756:	0e 94 49 03 	call	0x692	; 0x692 <vPortFree>
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	08 95       	ret

00000760 <prvInitialiseNewTask>:
 760:	2f 92       	push	r2
 762:	3f 92       	push	r3
 764:	4f 92       	push	r4
 766:	5f 92       	push	r5
 768:	6f 92       	push	r6
 76a:	7f 92       	push	r7
 76c:	8f 92       	push	r8
 76e:	9f 92       	push	r9
 770:	af 92       	push	r10
 772:	bf 92       	push	r11
 774:	cf 92       	push	r12
 776:	df 92       	push	r13
 778:	ef 92       	push	r14
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	1c 01       	movw	r2, r24
 788:	4b 01       	movw	r8, r22
 78a:	29 01       	movw	r4, r18
 78c:	3a 01       	movw	r6, r20
 78e:	a9 01       	movw	r20, r18
 790:	65 ea       	ldi	r22, 0xA5	; 165
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	d5 01       	movw	r26, r10
 796:	57 96       	adiw	r26, 0x17	; 23
 798:	8d 91       	ld	r24, X+
 79a:	9c 91       	ld	r25, X
 79c:	58 97       	sbiw	r26, 0x18	; 24
 79e:	0e 94 b4 07 	call	0xf68	; 0xf68 <memset>
 7a2:	f5 01       	movw	r30, r10
 7a4:	87 89       	ldd	r24, Z+23	; 0x17
 7a6:	90 8d       	ldd	r25, Z+24	; 0x18
 7a8:	f1 e0       	ldi	r31, 0x01	; 1
 7aa:	4f 1a       	sub	r4, r31
 7ac:	51 08       	sbc	r5, r1
 7ae:	48 0e       	add	r4, r24
 7b0:	59 1e       	adc	r5, r25
 7b2:	81 14       	cp	r8, r1
 7b4:	91 04       	cpc	r9, r1
 7b6:	89 f4       	brne	.+34     	; 0x7da <prvInitialiseNewTask+0x7a>
 7b8:	17 c0       	rjmp	.+46     	; 0x7e8 <prvInitialiseNewTask+0x88>
 7ba:	82 2f       	mov	r24, r18
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	f4 01       	movw	r30, r8
 7c0:	e8 0f       	add	r30, r24
 7c2:	f9 1f       	adc	r31, r25
 7c4:	30 81       	ld	r19, Z
 7c6:	d5 01       	movw	r26, r10
 7c8:	a8 0f       	add	r26, r24
 7ca:	b9 1f       	adc	r27, r25
 7cc:	59 96       	adiw	r26, 0x19	; 25
 7ce:	3c 93       	st	X, r19
 7d0:	80 81       	ld	r24, Z
 7d2:	88 23       	and	r24, r24
 7d4:	29 f0       	breq	.+10     	; 0x7e0 <prvInitialiseNewTask+0x80>
 7d6:	2f 5f       	subi	r18, 0xFF	; 255
 7d8:	01 c0       	rjmp	.+2      	; 0x7dc <prvInitialiseNewTask+0x7c>
 7da:	20 e0       	ldi	r18, 0x00	; 0
 7dc:	28 30       	cpi	r18, 0x08	; 8
 7de:	68 f3       	brcs	.-38     	; 0x7ba <prvInitialiseNewTask+0x5a>
 7e0:	d5 01       	movw	r26, r10
 7e2:	90 96       	adiw	r26, 0x20	; 32
 7e4:	1c 92       	st	X, r1
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <prvInitialiseNewTask+0x8c>
 7e8:	f5 01       	movw	r30, r10
 7ea:	11 8e       	std	Z+25, r1	; 0x19
 7ec:	f3 e0       	ldi	r31, 0x03	; 3
 7ee:	fe 15       	cp	r31, r14
 7f0:	20 f4       	brcc	.+8      	; 0x7fa <prvInitialiseNewTask+0x9a>
 7f2:	0f 2e       	mov	r0, r31
 7f4:	f3 e0       	ldi	r31, 0x03	; 3
 7f6:	ef 2e       	mov	r14, r31
 7f8:	f0 2d       	mov	r31, r0
 7fa:	d5 01       	movw	r26, r10
 7fc:	56 96       	adiw	r26, 0x16	; 22
 7fe:	ec 92       	st	X, r14
 800:	c5 01       	movw	r24, r10
 802:	02 96       	adiw	r24, 0x02	; 2
 804:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
 808:	c5 01       	movw	r24, r10
 80a:	0c 96       	adiw	r24, 0x0c	; 12
 80c:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
 810:	f5 01       	movw	r30, r10
 812:	b1 86       	std	Z+9, r11	; 0x09
 814:	a0 86       	std	Z+8, r10	; 0x08
 816:	84 e0       	ldi	r24, 0x04	; 4
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	8e 19       	sub	r24, r14
 81c:	91 09       	sbc	r25, r1
 81e:	95 87       	std	Z+13, r25	; 0x0d
 820:	84 87       	std	Z+12, r24	; 0x0c
 822:	b3 8a       	std	Z+19, r11	; 0x13
 824:	a2 8a       	std	Z+18, r10	; 0x12
 826:	84 e0       	ldi	r24, 0x04	; 4
 828:	b3 96       	adiw	r30, 0x23	; 35
 82a:	df 01       	movw	r26, r30
 82c:	1d 92       	st	X+, r1
 82e:	8a 95       	dec	r24
 830:	e9 f7       	brne	.-6      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 832:	f5 01       	movw	r30, r10
 834:	17 a2       	std	Z+39, r1	; 0x27
 836:	a8 01       	movw	r20, r16
 838:	b1 01       	movw	r22, r2
 83a:	c2 01       	movw	r24, r4
 83c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <pxPortInitialiseStack>
 840:	d5 01       	movw	r26, r10
 842:	8d 93       	st	X+, r24
 844:	9c 93       	st	X, r25
 846:	c1 14       	cp	r12, r1
 848:	d1 04       	cpc	r13, r1
 84a:	19 f0       	breq	.+6      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 84c:	f6 01       	movw	r30, r12
 84e:	b1 82       	std	Z+1, r11	; 0x01
 850:	a0 82       	st	Z, r10
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	ef 90       	pop	r14
 85c:	df 90       	pop	r13
 85e:	cf 90       	pop	r12
 860:	bf 90       	pop	r11
 862:	af 90       	pop	r10
 864:	9f 90       	pop	r9
 866:	8f 90       	pop	r8
 868:	7f 90       	pop	r7
 86a:	6f 90       	pop	r6
 86c:	5f 90       	pop	r5
 86e:	4f 90       	pop	r4
 870:	3f 90       	pop	r3
 872:	2f 90       	pop	r2
 874:	08 95       	ret

00000876 <prvInitialiseTaskLists>:
 876:	cf 93       	push	r28
 878:	c0 e0       	ldi	r28, 0x00	; 0
 87a:	10 c0       	rjmp	.+32     	; 0x89c <prvInitialiseTaskLists+0x26>
 87c:	8c 2f       	mov	r24, r28
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	9c 01       	movw	r18, r24
 882:	22 0f       	add	r18, r18
 884:	33 1f       	adc	r19, r19
 886:	22 0f       	add	r18, r18
 888:	33 1f       	adc	r19, r19
 88a:	22 0f       	add	r18, r18
 88c:	33 1f       	adc	r19, r19
 88e:	82 0f       	add	r24, r18
 890:	93 1f       	adc	r25, r19
 892:	80 54       	subi	r24, 0x40	; 64
 894:	99 4f       	sbci	r25, 0xF9	; 249
 896:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
 89a:	cf 5f       	subi	r28, 0xFF	; 255
 89c:	c4 30       	cpi	r28, 0x04	; 4
 89e:	70 f3       	brcs	.-36     	; 0x87c <prvInitialiseTaskLists+0x6>
 8a0:	87 eb       	ldi	r24, 0xB7	; 183
 8a2:	96 e0       	ldi	r25, 0x06	; 6
 8a4:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
 8a8:	8e ea       	ldi	r24, 0xAE	; 174
 8aa:	96 e0       	ldi	r25, 0x06	; 6
 8ac:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
 8b0:	81 ea       	ldi	r24, 0xA1	; 161
 8b2:	96 e0       	ldi	r25, 0x06	; 6
 8b4:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
 8b8:	88 e9       	ldi	r24, 0x98	; 152
 8ba:	96 e0       	ldi	r25, 0x06	; 6
 8bc:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
 8c0:	87 eb       	ldi	r24, 0xB7	; 183
 8c2:	96 e0       	ldi	r25, 0x06	; 6
 8c4:	90 93 ad 06 	sts	0x06AD, r25	; 0x8006ad <pxDelayedTaskList+0x1>
 8c8:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <pxDelayedTaskList>
 8cc:	8e ea       	ldi	r24, 0xAE	; 174
 8ce:	96 e0       	ldi	r25, 0x06	; 6
 8d0:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <pxOverflowDelayedTaskList+0x1>
 8d4:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <pxOverflowDelayedTaskList>
 8d8:	cf 91       	pop	r28
 8da:	08 95       	ret

000008dc <prvAddNewTaskToReadyList>:
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	ec 01       	movw	r28, r24
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	f8 94       	cli
 8e6:	0f 92       	push	r0
 8e8:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <uxCurrentNumberOfTasks>
 8ec:	8f 5f       	subi	r24, 0xFF	; 255
 8ee:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxCurrentNumberOfTasks>
 8f2:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 8f6:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 8fa:	89 2b       	or	r24, r25
 8fc:	59 f4       	brne	.+22     	; 0x914 <prvAddNewTaskToReadyList+0x38>
 8fe:	d0 93 e5 06 	sts	0x06E5, r29	; 0x8006e5 <pxCurrentTCB+0x1>
 902:	c0 93 e4 06 	sts	0x06E4, r28	; 0x8006e4 <pxCurrentTCB>
 906:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <uxCurrentNumberOfTasks>
 90a:	81 30       	cpi	r24, 0x01	; 1
 90c:	99 f4       	brne	.+38     	; 0x934 <prvAddNewTaskToReadyList+0x58>
 90e:	0e 94 3b 04 	call	0x876	; 0x876 <prvInitialiseTaskLists>
 912:	10 c0       	rjmp	.+32     	; 0x934 <prvAddNewTaskToReadyList+0x58>
 914:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <xSchedulerRunning>
 918:	81 11       	cpse	r24, r1
 91a:	0c c0       	rjmp	.+24     	; 0x934 <prvAddNewTaskToReadyList+0x58>
 91c:	e0 91 e4 06 	lds	r30, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 920:	f0 91 e5 06 	lds	r31, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 924:	96 89       	ldd	r25, Z+22	; 0x16
 926:	8e 89       	ldd	r24, Y+22	; 0x16
 928:	89 17       	cp	r24, r25
 92a:	20 f0       	brcs	.+8      	; 0x934 <prvAddNewTaskToReadyList+0x58>
 92c:	d0 93 e5 06 	sts	0x06E5, r29	; 0x8006e5 <pxCurrentTCB+0x1>
 930:	c0 93 e4 06 	sts	0x06E4, r28	; 0x8006e4 <pxCurrentTCB>
 934:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <uxTaskNumber>
 938:	8f 5f       	subi	r24, 0xFF	; 255
 93a:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <uxTaskNumber>
 93e:	89 a3       	std	Y+33, r24	; 0x21
 940:	8e 89       	ldd	r24, Y+22	; 0x16
 942:	90 91 93 06 	lds	r25, 0x0693	; 0x800693 <uxTopReadyPriority>
 946:	98 17       	cp	r25, r24
 948:	10 f4       	brcc	.+4      	; 0x94e <prvAddNewTaskToReadyList+0x72>
 94a:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxTopReadyPriority>
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	9c 01       	movw	r18, r24
 952:	22 0f       	add	r18, r18
 954:	33 1f       	adc	r19, r19
 956:	22 0f       	add	r18, r18
 958:	33 1f       	adc	r19, r19
 95a:	22 0f       	add	r18, r18
 95c:	33 1f       	adc	r19, r19
 95e:	82 0f       	add	r24, r18
 960:	93 1f       	adc	r25, r19
 962:	be 01       	movw	r22, r28
 964:	6e 5f       	subi	r22, 0xFE	; 254
 966:	7f 4f       	sbci	r23, 0xFF	; 255
 968:	80 54       	subi	r24, 0x40	; 64
 96a:	99 4f       	sbci	r25, 0xF9	; 249
 96c:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
 970:	0f 90       	pop	r0
 972:	0f be       	out	0x3f, r0	; 63
 974:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <xSchedulerRunning>
 978:	88 23       	and	r24, r24
 97a:	51 f0       	breq	.+20     	; 0x990 <prvAddNewTaskToReadyList+0xb4>
 97c:	e0 91 e4 06 	lds	r30, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 980:	f0 91 e5 06 	lds	r31, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 984:	96 89       	ldd	r25, Z+22	; 0x16
 986:	8e 89       	ldd	r24, Y+22	; 0x16
 988:	98 17       	cp	r25, r24
 98a:	10 f4       	brcc	.+4      	; 0x990 <prvAddNewTaskToReadyList+0xb4>
 98c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
 990:	df 91       	pop	r29
 992:	cf 91       	pop	r28
 994:	08 95       	ret

00000996 <prvCheckTasksWaitingTermination>:
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	1c c0       	rjmp	.+56     	; 0x9d4 <prvCheckTasksWaitingTermination+0x3e>
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	f8 94       	cli
 9a0:	0f 92       	push	r0
 9a2:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <xTasksWaitingTermination+0x5>
 9a6:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <xTasksWaitingTermination+0x6>
 9aa:	c6 81       	ldd	r28, Z+6	; 0x06
 9ac:	d7 81       	ldd	r29, Z+7	; 0x07
 9ae:	ce 01       	movw	r24, r28
 9b0:	02 96       	adiw	r24, 0x02	; 2
 9b2:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
 9b6:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <uxCurrentNumberOfTasks>
 9ba:	81 50       	subi	r24, 0x01	; 1
 9bc:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxCurrentNumberOfTasks>
 9c0:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <uxDeletedTasksWaitingCleanUp>
 9c4:	81 50       	subi	r24, 0x01	; 1
 9c6:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <uxDeletedTasksWaitingCleanUp>
 9ca:	0f 90       	pop	r0
 9cc:	0f be       	out	0x3f, r0	; 63
 9ce:	ce 01       	movw	r24, r28
 9d0:	0e 94 a3 03 	call	0x746	; 0x746 <prvDeleteTCB>
 9d4:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <uxDeletedTasksWaitingCleanUp>
 9d8:	81 11       	cpse	r24, r1
 9da:	e0 cf       	rjmp	.-64     	; 0x99c <prvCheckTasksWaitingTermination+0x6>
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	08 95       	ret

000009e2 <prvIdleTask>:
 9e2:	0e 94 cb 04 	call	0x996	; 0x996 <prvCheckTasksWaitingTermination>
 9e6:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <pxReadyTasksLists>
 9ea:	82 30       	cpi	r24, 0x02	; 2
 9ec:	d0 f3       	brcs	.-12     	; 0x9e2 <prvIdleTask>
 9ee:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
 9f2:	f7 cf       	rjmp	.-18     	; 0x9e2 <prvIdleTask>

000009f4 <prvAddCurrentTaskToDelayedList>:
 9f4:	0f 93       	push	r16
 9f6:	1f 93       	push	r17
 9f8:	cf 93       	push	r28
 9fa:	df 93       	push	r29
 9fc:	ec 01       	movw	r28, r24
 9fe:	00 91 94 06 	lds	r16, 0x0694	; 0x800694 <xTickCount>
 a02:	10 91 95 06 	lds	r17, 0x0695	; 0x800695 <xTickCount+0x1>
 a06:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 a0a:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 a0e:	02 96       	adiw	r24, 0x02	; 2
 a10:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
 a14:	c0 0f       	add	r28, r16
 a16:	d1 1f       	adc	r29, r17
 a18:	e0 91 e4 06 	lds	r30, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 a1c:	f0 91 e5 06 	lds	r31, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 a20:	d3 83       	std	Z+3, r29	; 0x03
 a22:	c2 83       	std	Z+2, r28	; 0x02
 a24:	c0 17       	cp	r28, r16
 a26:	d1 07       	cpc	r29, r17
 a28:	68 f4       	brcc	.+26     	; 0xa44 <prvAddCurrentTaskToDelayedList+0x50>
 a2a:	60 91 e4 06 	lds	r22, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 a2e:	70 91 e5 06 	lds	r23, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 a32:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <pxOverflowDelayedTaskList>
 a36:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <pxOverflowDelayedTaskList+0x1>
 a3a:	6e 5f       	subi	r22, 0xFE	; 254
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255
 a3e:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
 a42:	17 c0       	rjmp	.+46     	; 0xa72 <prvAddCurrentTaskToDelayedList+0x7e>
 a44:	60 91 e4 06 	lds	r22, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 a48:	70 91 e5 06 	lds	r23, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 a4c:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <pxDelayedTaskList>
 a50:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
 a54:	6e 5f       	subi	r22, 0xFE	; 254
 a56:	7f 4f       	sbci	r23, 0xFF	; 255
 a58:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
 a5c:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <xNextTaskUnblockTime>
 a60:	90 91 8c 06 	lds	r25, 0x068C	; 0x80068c <xNextTaskUnblockTime+0x1>
 a64:	c8 17       	cp	r28, r24
 a66:	d9 07       	cpc	r29, r25
 a68:	20 f4       	brcc	.+8      	; 0xa72 <prvAddCurrentTaskToDelayedList+0x7e>
 a6a:	d0 93 8c 06 	sts	0x068C, r29	; 0x80068c <xNextTaskUnblockTime+0x1>
 a6e:	c0 93 8b 06 	sts	0x068B, r28	; 0x80068b <xNextTaskUnblockTime>
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	1f 91       	pop	r17
 a78:	0f 91       	pop	r16
 a7a:	08 95       	ret

00000a7c <xTaskCreate>:
 a7c:	2f 92       	push	r2
 a7e:	3f 92       	push	r3
 a80:	4f 92       	push	r4
 a82:	5f 92       	push	r5
 a84:	6f 92       	push	r6
 a86:	7f 92       	push	r7
 a88:	8f 92       	push	r8
 a8a:	9f 92       	push	r9
 a8c:	af 92       	push	r10
 a8e:	bf 92       	push	r11
 a90:	cf 92       	push	r12
 a92:	df 92       	push	r13
 a94:	ef 92       	push	r14
 a96:	ff 92       	push	r15
 a98:	0f 93       	push	r16
 a9a:	1f 93       	push	r17
 a9c:	cf 93       	push	r28
 a9e:	df 93       	push	r29
 aa0:	3c 01       	movw	r6, r24
 aa2:	1b 01       	movw	r2, r22
 aa4:	5a 01       	movw	r10, r20
 aa6:	29 01       	movw	r4, r18
 aa8:	ca 01       	movw	r24, r20
 aaa:	0e 94 a3 02 	call	0x546	; 0x546 <pvPortMalloc>
 aae:	6c 01       	movw	r12, r24
 ab0:	89 2b       	or	r24, r25
 ab2:	71 f0       	breq	.+28     	; 0xad0 <xTaskCreate+0x54>
 ab4:	88 e2       	ldi	r24, 0x28	; 40
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 a3 02 	call	0x546	; 0x546 <pvPortMalloc>
 abc:	ec 01       	movw	r28, r24
 abe:	89 2b       	or	r24, r25
 ac0:	19 f0       	breq	.+6      	; 0xac8 <xTaskCreate+0x4c>
 ac2:	d8 8e       	std	Y+24, r13	; 0x18
 ac4:	cf 8a       	std	Y+23, r12	; 0x17
 ac6:	06 c0       	rjmp	.+12     	; 0xad4 <xTaskCreate+0x58>
 ac8:	c6 01       	movw	r24, r12
 aca:	0e 94 49 03 	call	0x692	; 0x692 <vPortFree>
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <xTaskCreate+0x58>
 ad0:	c0 e0       	ldi	r28, 0x00	; 0
 ad2:	d0 e0       	ldi	r29, 0x00	; 0
 ad4:	20 97       	sbiw	r28, 0x00	; 0
 ad6:	91 f0       	breq	.+36     	; 0xafc <xTaskCreate+0x80>
 ad8:	95 01       	movw	r18, r10
 ada:	40 e0       	ldi	r20, 0x00	; 0
 adc:	50 e0       	ldi	r21, 0x00	; 0
 ade:	81 2c       	mov	r8, r1
 ae0:	91 2c       	mov	r9, r1
 ae2:	5e 01       	movw	r10, r28
 ae4:	67 01       	movw	r12, r14
 ae6:	e0 2e       	mov	r14, r16
 ae8:	82 01       	movw	r16, r4
 aea:	b1 01       	movw	r22, r2
 aec:	c3 01       	movw	r24, r6
 aee:	0e 94 b0 03 	call	0x760	; 0x760 <prvInitialiseNewTask>
 af2:	ce 01       	movw	r24, r28
 af4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <prvAddNewTaskToReadyList>
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	01 c0       	rjmp	.+2      	; 0xafe <xTaskCreate+0x82>
 afc:	8f ef       	ldi	r24, 0xFF	; 255
 afe:	df 91       	pop	r29
 b00:	cf 91       	pop	r28
 b02:	1f 91       	pop	r17
 b04:	0f 91       	pop	r16
 b06:	ff 90       	pop	r15
 b08:	ef 90       	pop	r14
 b0a:	df 90       	pop	r13
 b0c:	cf 90       	pop	r12
 b0e:	bf 90       	pop	r11
 b10:	af 90       	pop	r10
 b12:	9f 90       	pop	r9
 b14:	8f 90       	pop	r8
 b16:	7f 90       	pop	r7
 b18:	6f 90       	pop	r6
 b1a:	5f 90       	pop	r5
 b1c:	4f 90       	pop	r4
 b1e:	3f 90       	pop	r3
 b20:	2f 90       	pop	r2
 b22:	08 95       	ret

00000b24 <vTaskStartScheduler>:
 b24:	ef 92       	push	r14
 b26:	ff 92       	push	r15
 b28:	0f 93       	push	r16
 b2a:	0f 2e       	mov	r0, r31
 b2c:	f9 e8       	ldi	r31, 0x89	; 137
 b2e:	ef 2e       	mov	r14, r31
 b30:	f6 e0       	ldi	r31, 0x06	; 6
 b32:	ff 2e       	mov	r15, r31
 b34:	f0 2d       	mov	r31, r0
 b36:	00 e0       	ldi	r16, 0x00	; 0
 b38:	20 e0       	ldi	r18, 0x00	; 0
 b3a:	30 e0       	ldi	r19, 0x00	; 0
 b3c:	45 e5       	ldi	r20, 0x55	; 85
 b3e:	50 e0       	ldi	r21, 0x00	; 0
 b40:	61 e6       	ldi	r22, 0x61	; 97
 b42:	70 e0       	ldi	r23, 0x00	; 0
 b44:	81 ef       	ldi	r24, 0xF1	; 241
 b46:	94 e0       	ldi	r25, 0x04	; 4
 b48:	0e 94 3e 05 	call	0xa7c	; 0xa7c <xTaskCreate>
 b4c:	81 30       	cpi	r24, 0x01	; 1
 b4e:	81 f4       	brne	.+32     	; 0xb70 <vTaskStartScheduler+0x4c>
 b50:	f8 94       	cli
 b52:	8f ef       	ldi	r24, 0xFF	; 255
 b54:	9f ef       	ldi	r25, 0xFF	; 255
 b56:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <xNextTaskUnblockTime+0x1>
 b5a:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xNextTaskUnblockTime>
 b5e:	81 e0       	ldi	r24, 0x01	; 1
 b60:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <xSchedulerRunning>
 b64:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <xTickCount+0x1>
 b68:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <xTickCount>
 b6c:	0e 94 49 01 	call	0x292	; 0x292 <xPortStartScheduler>
 b70:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 b74:	0f 91       	pop	r16
 b76:	ff 90       	pop	r15
 b78:	ef 90       	pop	r14
 b7a:	08 95       	ret

00000b7c <vTaskSuspendAll>:
 b7c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <uxSchedulerSuspended>
 b80:	8f 5f       	subi	r24, 0xFF	; 255
 b82:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <uxSchedulerSuspended>
 b86:	08 95       	ret

00000b88 <xTaskIncrementTick>:
 b88:	df 92       	push	r13
 b8a:	ef 92       	push	r14
 b8c:	ff 92       	push	r15
 b8e:	0f 93       	push	r16
 b90:	1f 93       	push	r17
 b92:	cf 93       	push	r28
 b94:	df 93       	push	r29
 b96:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <uxSchedulerSuspended>
 b9a:	81 11       	cpse	r24, r1
 b9c:	9d c0       	rjmp	.+314    	; 0xcd8 <xTaskIncrementTick+0x150>
 b9e:	e0 90 94 06 	lds	r14, 0x0694	; 0x800694 <xTickCount>
 ba2:	f0 90 95 06 	lds	r15, 0x0695	; 0x800695 <xTickCount+0x1>
 ba6:	8f ef       	ldi	r24, 0xFF	; 255
 ba8:	e8 1a       	sub	r14, r24
 baa:	f8 0a       	sbc	r15, r24
 bac:	f0 92 95 06 	sts	0x0695, r15	; 0x800695 <xTickCount+0x1>
 bb0:	e0 92 94 06 	sts	0x0694, r14	; 0x800694 <xTickCount>
 bb4:	e1 14       	cp	r14, r1
 bb6:	f1 04       	cpc	r15, r1
 bb8:	b9 f4       	brne	.+46     	; 0xbe8 <xTaskIncrementTick+0x60>
 bba:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <pxDelayedTaskList>
 bbe:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
 bc2:	20 91 aa 06 	lds	r18, 0x06AA	; 0x8006aa <pxOverflowDelayedTaskList>
 bc6:	30 91 ab 06 	lds	r19, 0x06AB	; 0x8006ab <pxOverflowDelayedTaskList+0x1>
 bca:	30 93 ad 06 	sts	0x06AD, r19	; 0x8006ad <pxDelayedTaskList+0x1>
 bce:	20 93 ac 06 	sts	0x06AC, r18	; 0x8006ac <pxDelayedTaskList>
 bd2:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <pxOverflowDelayedTaskList+0x1>
 bd6:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <pxOverflowDelayedTaskList>
 bda:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <xNumOfOverflows>
 bde:	8f 5f       	subi	r24, 0xFF	; 255
 be0:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xNumOfOverflows>
 be4:	0e 94 87 03 	call	0x70e	; 0x70e <prvResetNextTaskUnblockTime>
 be8:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <xNextTaskUnblockTime>
 bec:	90 91 8c 06 	lds	r25, 0x068C	; 0x80068c <xNextTaskUnblockTime+0x1>
 bf0:	e8 16       	cp	r14, r24
 bf2:	f9 06       	cpc	r15, r25
 bf4:	28 f4       	brcc	.+10     	; 0xc00 <xTaskIncrementTick+0x78>
 bf6:	d1 2c       	mov	r13, r1
 bf8:	53 c0       	rjmp	.+166    	; 0xca0 <xTaskIncrementTick+0x118>
 bfa:	dd 24       	eor	r13, r13
 bfc:	d3 94       	inc	r13
 bfe:	01 c0       	rjmp	.+2      	; 0xc02 <xTaskIncrementTick+0x7a>
 c00:	d1 2c       	mov	r13, r1
 c02:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxDelayedTaskList>
 c06:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
 c0a:	80 81       	ld	r24, Z
 c0c:	81 11       	cpse	r24, r1
 c0e:	07 c0       	rjmp	.+14     	; 0xc1e <xTaskIncrementTick+0x96>
 c10:	8f ef       	ldi	r24, 0xFF	; 255
 c12:	9f ef       	ldi	r25, 0xFF	; 255
 c14:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <xNextTaskUnblockTime+0x1>
 c18:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xNextTaskUnblockTime>
 c1c:	41 c0       	rjmp	.+130    	; 0xca0 <xTaskIncrementTick+0x118>
 c1e:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxDelayedTaskList>
 c22:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxDelayedTaskList+0x1>
 c26:	05 80       	ldd	r0, Z+5	; 0x05
 c28:	f6 81       	ldd	r31, Z+6	; 0x06
 c2a:	e0 2d       	mov	r30, r0
 c2c:	c6 81       	ldd	r28, Z+6	; 0x06
 c2e:	d7 81       	ldd	r29, Z+7	; 0x07
 c30:	8a 81       	ldd	r24, Y+2	; 0x02
 c32:	9b 81       	ldd	r25, Y+3	; 0x03
 c34:	e8 16       	cp	r14, r24
 c36:	f9 06       	cpc	r15, r25
 c38:	28 f4       	brcc	.+10     	; 0xc44 <xTaskIncrementTick+0xbc>
 c3a:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <xNextTaskUnblockTime+0x1>
 c3e:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xNextTaskUnblockTime>
 c42:	2e c0       	rjmp	.+92     	; 0xca0 <xTaskIncrementTick+0x118>
 c44:	8e 01       	movw	r16, r28
 c46:	0e 5f       	subi	r16, 0xFE	; 254
 c48:	1f 4f       	sbci	r17, 0xFF	; 255
 c4a:	c8 01       	movw	r24, r16
 c4c:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
 c50:	8c 89       	ldd	r24, Y+20	; 0x14
 c52:	9d 89       	ldd	r25, Y+21	; 0x15
 c54:	89 2b       	or	r24, r25
 c56:	21 f0       	breq	.+8      	; 0xc60 <xTaskIncrementTick+0xd8>
 c58:	ce 01       	movw	r24, r28
 c5a:	0c 96       	adiw	r24, 0x0c	; 12
 c5c:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
 c60:	8e 89       	ldd	r24, Y+22	; 0x16
 c62:	90 91 93 06 	lds	r25, 0x0693	; 0x800693 <uxTopReadyPriority>
 c66:	98 17       	cp	r25, r24
 c68:	10 f4       	brcc	.+4      	; 0xc6e <xTaskIncrementTick+0xe6>
 c6a:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxTopReadyPriority>
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	9c 01       	movw	r18, r24
 c72:	22 0f       	add	r18, r18
 c74:	33 1f       	adc	r19, r19
 c76:	22 0f       	add	r18, r18
 c78:	33 1f       	adc	r19, r19
 c7a:	22 0f       	add	r18, r18
 c7c:	33 1f       	adc	r19, r19
 c7e:	82 0f       	add	r24, r18
 c80:	93 1f       	adc	r25, r19
 c82:	b8 01       	movw	r22, r16
 c84:	80 54       	subi	r24, 0x40	; 64
 c86:	99 4f       	sbci	r25, 0xF9	; 249
 c88:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
 c8c:	9e 89       	ldd	r25, Y+22	; 0x16
 c8e:	e0 91 e4 06 	lds	r30, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 c92:	f0 91 e5 06 	lds	r31, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 c96:	86 89       	ldd	r24, Z+22	; 0x16
 c98:	98 17       	cp	r25, r24
 c9a:	08 f0       	brcs	.+2      	; 0xc9e <xTaskIncrementTick+0x116>
 c9c:	ae cf       	rjmp	.-164    	; 0xbfa <xTaskIncrementTick+0x72>
 c9e:	b1 cf       	rjmp	.-158    	; 0xc02 <xTaskIncrementTick+0x7a>
 ca0:	e0 91 e4 06 	lds	r30, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 ca4:	f0 91 e5 06 	lds	r31, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 ca8:	86 89       	ldd	r24, Z+22	; 0x16
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	fc 01       	movw	r30, r24
 cae:	ee 0f       	add	r30, r30
 cb0:	ff 1f       	adc	r31, r31
 cb2:	ee 0f       	add	r30, r30
 cb4:	ff 1f       	adc	r31, r31
 cb6:	ee 0f       	add	r30, r30
 cb8:	ff 1f       	adc	r31, r31
 cba:	8e 0f       	add	r24, r30
 cbc:	9f 1f       	adc	r25, r31
 cbe:	fc 01       	movw	r30, r24
 cc0:	e0 54       	subi	r30, 0x40	; 64
 cc2:	f9 4f       	sbci	r31, 0xF9	; 249
 cc4:	80 81       	ld	r24, Z
 cc6:	82 30       	cpi	r24, 0x02	; 2
 cc8:	10 f0       	brcs	.+4      	; 0xcce <xTaskIncrementTick+0x146>
 cca:	dd 24       	eor	r13, r13
 ccc:	d3 94       	inc	r13
 cce:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <xYieldPending>
 cd2:	81 11       	cpse	r24, r1
 cd4:	0c c0       	rjmp	.+24     	; 0xcee <xTaskIncrementTick+0x166>
 cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <xTaskIncrementTick+0x16a>
 cd8:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <xPendedTicks>
 cdc:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <xPendedTicks+0x1>
 ce0:	01 96       	adiw	r24, 0x01	; 1
 ce2:	90 93 91 06 	sts	0x0691, r25	; 0x800691 <xPendedTicks+0x1>
 ce6:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <xPendedTicks>
 cea:	d1 2c       	mov	r13, r1
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <xTaskIncrementTick+0x16a>
 cee:	dd 24       	eor	r13, r13
 cf0:	d3 94       	inc	r13
 cf2:	8d 2d       	mov	r24, r13
 cf4:	df 91       	pop	r29
 cf6:	cf 91       	pop	r28
 cf8:	1f 91       	pop	r17
 cfa:	0f 91       	pop	r16
 cfc:	ff 90       	pop	r15
 cfe:	ef 90       	pop	r14
 d00:	df 90       	pop	r13
 d02:	08 95       	ret

00000d04 <xTaskResumeAll>:
 d04:	0f 93       	push	r16
 d06:	1f 93       	push	r17
 d08:	cf 93       	push	r28
 d0a:	df 93       	push	r29
 d0c:	0f b6       	in	r0, 0x3f	; 63
 d0e:	f8 94       	cli
 d10:	0f 92       	push	r0
 d12:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <uxSchedulerSuspended>
 d16:	81 50       	subi	r24, 0x01	; 1
 d18:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <uxSchedulerSuspended>
 d1c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <uxSchedulerSuspended>
 d20:	81 11       	cpse	r24, r1
 d22:	5c c0       	rjmp	.+184    	; 0xddc <xTaskResumeAll+0xd8>
 d24:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <uxCurrentNumberOfTasks>
 d28:	81 11       	cpse	r24, r1
 d2a:	33 c0       	rjmp	.+102    	; 0xd92 <xTaskResumeAll+0x8e>
 d2c:	5a c0       	rjmp	.+180    	; 0xde2 <xTaskResumeAll+0xde>
 d2e:	e0 91 a6 06 	lds	r30, 0x06A6	; 0x8006a6 <xPendingReadyList+0x5>
 d32:	f0 91 a7 06 	lds	r31, 0x06A7	; 0x8006a7 <xPendingReadyList+0x6>
 d36:	c6 81       	ldd	r28, Z+6	; 0x06
 d38:	d7 81       	ldd	r29, Z+7	; 0x07
 d3a:	ce 01       	movw	r24, r28
 d3c:	0c 96       	adiw	r24, 0x0c	; 12
 d3e:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
 d42:	8e 01       	movw	r16, r28
 d44:	0e 5f       	subi	r16, 0xFE	; 254
 d46:	1f 4f       	sbci	r17, 0xFF	; 255
 d48:	c8 01       	movw	r24, r16
 d4a:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
 d4e:	8e 89       	ldd	r24, Y+22	; 0x16
 d50:	90 91 93 06 	lds	r25, 0x0693	; 0x800693 <uxTopReadyPriority>
 d54:	98 17       	cp	r25, r24
 d56:	10 f4       	brcc	.+4      	; 0xd5c <xTaskResumeAll+0x58>
 d58:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxTopReadyPriority>
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	9c 01       	movw	r18, r24
 d60:	22 0f       	add	r18, r18
 d62:	33 1f       	adc	r19, r19
 d64:	22 0f       	add	r18, r18
 d66:	33 1f       	adc	r19, r19
 d68:	22 0f       	add	r18, r18
 d6a:	33 1f       	adc	r19, r19
 d6c:	82 0f       	add	r24, r18
 d6e:	93 1f       	adc	r25, r19
 d70:	b8 01       	movw	r22, r16
 d72:	80 54       	subi	r24, 0x40	; 64
 d74:	99 4f       	sbci	r25, 0xF9	; 249
 d76:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
 d7a:	9e 89       	ldd	r25, Y+22	; 0x16
 d7c:	e0 91 e4 06 	lds	r30, 0x06E4	; 0x8006e4 <pxCurrentTCB>
 d80:	f0 91 e5 06 	lds	r31, 0x06E5	; 0x8006e5 <pxCurrentTCB+0x1>
 d84:	86 89       	ldd	r24, Z+22	; 0x16
 d86:	98 17       	cp	r25, r24
 d88:	30 f0       	brcs	.+12     	; 0xd96 <xTaskResumeAll+0x92>
 d8a:	81 e0       	ldi	r24, 0x01	; 1
 d8c:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <xYieldPending>
 d90:	02 c0       	rjmp	.+4      	; 0xd96 <xTaskResumeAll+0x92>
 d92:	c0 e0       	ldi	r28, 0x00	; 0
 d94:	d0 e0       	ldi	r29, 0x00	; 0
 d96:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <xPendingReadyList>
 d9a:	81 11       	cpse	r24, r1
 d9c:	c8 cf       	rjmp	.-112    	; 0xd2e <xTaskResumeAll+0x2a>
 d9e:	cd 2b       	or	r28, r29
 da0:	11 f0       	breq	.+4      	; 0xda6 <xTaskResumeAll+0xa2>
 da2:	0e 94 87 03 	call	0x70e	; 0x70e <prvResetNextTaskUnblockTime>
 da6:	c0 91 90 06 	lds	r28, 0x0690	; 0x800690 <xPendedTicks>
 daa:	d0 91 91 06 	lds	r29, 0x0691	; 0x800691 <xPendedTicks+0x1>
 dae:	20 97       	sbiw	r28, 0x00	; 0
 db0:	69 f0       	breq	.+26     	; 0xdcc <xTaskResumeAll+0xc8>
 db2:	0e 94 c4 05 	call	0xb88	; 0xb88 <xTaskIncrementTick>
 db6:	88 23       	and	r24, r24
 db8:	19 f0       	breq	.+6      	; 0xdc0 <xTaskResumeAll+0xbc>
 dba:	81 e0       	ldi	r24, 0x01	; 1
 dbc:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <xYieldPending>
 dc0:	21 97       	sbiw	r28, 0x01	; 1
 dc2:	b9 f7       	brne	.-18     	; 0xdb2 <xTaskResumeAll+0xae>
 dc4:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <xPendedTicks+0x1>
 dc8:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <xPendedTicks>
 dcc:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <xYieldPending>
 dd0:	88 23       	and	r24, r24
 dd2:	31 f0       	breq	.+12     	; 0xde0 <xTaskResumeAll+0xdc>
 dd4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
 dd8:	81 e0       	ldi	r24, 0x01	; 1
 dda:	03 c0       	rjmp	.+6      	; 0xde2 <xTaskResumeAll+0xde>
 ddc:	80 e0       	ldi	r24, 0x00	; 0
 dde:	01 c0       	rjmp	.+2      	; 0xde2 <xTaskResumeAll+0xde>
 de0:	80 e0       	ldi	r24, 0x00	; 0
 de2:	0f 90       	pop	r0
 de4:	0f be       	out	0x3f, r0	; 63
 de6:	df 91       	pop	r29
 de8:	cf 91       	pop	r28
 dea:	1f 91       	pop	r17
 dec:	0f 91       	pop	r16
 dee:	08 95       	ret

00000df0 <vTaskDelay>:
 df0:	cf 93       	push	r28
 df2:	df 93       	push	r29
 df4:	ec 01       	movw	r28, r24
 df6:	89 2b       	or	r24, r25
 df8:	49 f0       	breq	.+18     	; 0xe0c <vTaskDelay+0x1c>
 dfa:	0e 94 be 05 	call	0xb7c	; 0xb7c <vTaskSuspendAll>
 dfe:	60 e0       	ldi	r22, 0x00	; 0
 e00:	ce 01       	movw	r24, r28
 e02:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <prvAddCurrentTaskToDelayedList>
 e06:	0e 94 82 06 	call	0xd04	; 0xd04 <xTaskResumeAll>
 e0a:	01 c0       	rjmp	.+2      	; 0xe0e <vTaskDelay+0x1e>
 e0c:	80 e0       	ldi	r24, 0x00	; 0
 e0e:	81 11       	cpse	r24, r1
 e10:	02 c0       	rjmp	.+4      	; 0xe16 <vTaskDelay+0x26>
 e12:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
 e16:	df 91       	pop	r29
 e18:	cf 91       	pop	r28
 e1a:	08 95       	ret

00000e1c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 e1c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <uxSchedulerSuspended>
 e20:	88 23       	and	r24, r24
 e22:	21 f0       	breq	.+8      	; 0xe2c <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 e24:	81 e0       	ldi	r24, 0x01	; 1
 e26:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <xYieldPending>
 e2a:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 e2c:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 e30:	20 91 93 06 	lds	r18, 0x0693	; 0x800693 <uxTopReadyPriority>
 e34:	01 c0       	rjmp	.+2      	; 0xe38 <vTaskSwitchContext+0x1c>
 e36:	21 50       	subi	r18, 0x01	; 1
 e38:	82 2f       	mov	r24, r18
 e3a:	90 e0       	ldi	r25, 0x00	; 0
 e3c:	fc 01       	movw	r30, r24
 e3e:	ee 0f       	add	r30, r30
 e40:	ff 1f       	adc	r31, r31
 e42:	ee 0f       	add	r30, r30
 e44:	ff 1f       	adc	r31, r31
 e46:	ee 0f       	add	r30, r30
 e48:	ff 1f       	adc	r31, r31
 e4a:	e8 0f       	add	r30, r24
 e4c:	f9 1f       	adc	r31, r25
 e4e:	e0 54       	subi	r30, 0x40	; 64
 e50:	f9 4f       	sbci	r31, 0xF9	; 249
 e52:	30 81       	ld	r19, Z
 e54:	33 23       	and	r19, r19
 e56:	79 f3       	breq	.-34     	; 0xe36 <vTaskSwitchContext+0x1a>
 e58:	ac 01       	movw	r20, r24
 e5a:	44 0f       	add	r20, r20
 e5c:	55 1f       	adc	r21, r21
 e5e:	44 0f       	add	r20, r20
 e60:	55 1f       	adc	r21, r21
 e62:	44 0f       	add	r20, r20
 e64:	55 1f       	adc	r21, r21
 e66:	48 0f       	add	r20, r24
 e68:	59 1f       	adc	r21, r25
 e6a:	df 01       	movw	r26, r30
 e6c:	01 80       	ldd	r0, Z+1	; 0x01
 e6e:	f2 81       	ldd	r31, Z+2	; 0x02
 e70:	e0 2d       	mov	r30, r0
 e72:	02 80       	ldd	r0, Z+2	; 0x02
 e74:	f3 81       	ldd	r31, Z+3	; 0x03
 e76:	e0 2d       	mov	r30, r0
 e78:	12 96       	adiw	r26, 0x02	; 2
 e7a:	fc 93       	st	X, r31
 e7c:	ee 93       	st	-X, r30
 e7e:	11 97       	sbiw	r26, 0x01	; 1
 e80:	4d 53       	subi	r20, 0x3D	; 61
 e82:	59 4f       	sbci	r21, 0xF9	; 249
 e84:	e4 17       	cp	r30, r20
 e86:	f5 07       	cpc	r31, r21
 e88:	29 f4       	brne	.+10     	; 0xe94 <vTaskSwitchContext+0x78>
 e8a:	42 81       	ldd	r20, Z+2	; 0x02
 e8c:	53 81       	ldd	r21, Z+3	; 0x03
 e8e:	fd 01       	movw	r30, r26
 e90:	52 83       	std	Z+2, r21	; 0x02
 e92:	41 83       	std	Z+1, r20	; 0x01
 e94:	fc 01       	movw	r30, r24
 e96:	ee 0f       	add	r30, r30
 e98:	ff 1f       	adc	r31, r31
 e9a:	ee 0f       	add	r30, r30
 e9c:	ff 1f       	adc	r31, r31
 e9e:	ee 0f       	add	r30, r30
 ea0:	ff 1f       	adc	r31, r31
 ea2:	8e 0f       	add	r24, r30
 ea4:	9f 1f       	adc	r25, r31
 ea6:	fc 01       	movw	r30, r24
 ea8:	e0 54       	subi	r30, 0x40	; 64
 eaa:	f9 4f       	sbci	r31, 0xF9	; 249
 eac:	01 80       	ldd	r0, Z+1	; 0x01
 eae:	f2 81       	ldd	r31, Z+2	; 0x02
 eb0:	e0 2d       	mov	r30, r0
 eb2:	86 81       	ldd	r24, Z+6	; 0x06
 eb4:	97 81       	ldd	r25, Z+7	; 0x07
 eb6:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <pxCurrentTCB+0x1>
 eba:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <pxCurrentTCB>
 ebe:	20 93 93 06 	sts	0x0693, r18	; 0x800693 <uxTopReadyPriority>
 ec2:	08 95       	ret

00000ec4 <usart_init>:
 

void usart_init(void)
{

	UCSRB = (1<<TXEN);
 ec4:	88 e0       	ldi	r24, 0x08	; 8
 ec6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ1) | (1<<UCSZ0) | (1<<URSEL);
 ec8:	86 e8       	ldi	r24, 0x86	; 134
 eca:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33;
 ecc:	83 e3       	ldi	r24, 0x33	; 51
 ece:	89 b9       	out	0x09, r24	; 9
 ed0:	08 95       	ret

00000ed2 <usart_send>:
}

void usart_send(void *ch)
{
 ed2:	fc 01       	movw	r30, r24
	
	ch1 = (char*) ch;
	
	
	
	while(*ch1)
 ed4:	04 c0       	rjmp	.+8      	; 0xede <usart_send+0xc>
	{
		
		while(!(UCSRA & (1<<UDRE)));
 ed6:	5d 9b       	sbis	0x0b, 5	; 11
 ed8:	fe cf       	rjmp	.-4      	; 0xed6 <usart_send+0x4>
		
		
		UDR = *ch1;
 eda:	8c b9       	out	0x0c, r24	; 12
		
		ch1++;
 edc:	31 96       	adiw	r30, 0x01	; 1
	
	ch1 = (char*) ch;
	
	
	
	while(*ch1)
 ede:	80 81       	ld	r24, Z
 ee0:	81 11       	cpse	r24, r1
 ee2:	f9 cf       	rjmp	.-14     	; 0xed6 <usart_send+0x4>
		ch1++;
	}
	
	
	
}
 ee4:	08 95       	ret

00000ee6 <vTask1>:
void vTask1(void *pvParameters)
{
	(void) pvParameters;
	while(1)
	{
   	usart_send((char*)"6");
 ee6:	86 e6       	ldi	r24, 0x66	; 102
 ee8:	90 e0       	ldi	r25, 0x00	; 0
 eea:	0e 94 69 07 	call	0xed2	; 0xed2 <usart_send>
	vTaskDelay(1000);
 eee:	88 ee       	ldi	r24, 0xE8	; 232
 ef0:	93 e0       	ldi	r25, 0x03	; 3
 ef2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <vTaskDelay>
 ef6:	f7 cf       	rjmp	.-18     	; 0xee6 <vTask1>

00000ef8 <vTask2>:
void vTask2(void *pvParameters)
{
	(void) pvParameters;
        while(1)
		{
		usart_send((char*)"5");
 ef8:	88 e6       	ldi	r24, 0x68	; 104
 efa:	90 e0       	ldi	r25, 0x00	; 0
 efc:	0e 94 69 07 	call	0xed2	; 0xed2 <usart_send>
		vTaskDelay(1000);
 f00:	88 ee       	ldi	r24, 0xE8	; 232
 f02:	93 e0       	ldi	r25, 0x03	; 3
 f04:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <vTaskDelay>
 f08:	f7 cf       	rjmp	.-18     	; 0xef8 <vTask2>

00000f0a <main>:
TaskHandle_t Task_Handle1;
TaskHandle_t Task_Handle2;


portSHORT main(void)
{
 f0a:	ef 92       	push	r14
 f0c:	ff 92       	push	r15
 f0e:	0f 93       	push	r16
	usart_init();
 f10:	0e 94 62 07 	call	0xec4	; 0xec4 <usart_init>
	xTaskCreate(vTask1, "task1", 1000, NULL, 0,&Task_Handle1);
 f14:	0f 2e       	mov	r0, r31
 f16:	f6 ee       	ldi	r31, 0xE6	; 230
 f18:	ef 2e       	mov	r14, r31
 f1a:	f6 e0       	ldi	r31, 0x06	; 6
 f1c:	ff 2e       	mov	r15, r31
 f1e:	f0 2d       	mov	r31, r0
 f20:	00 e0       	ldi	r16, 0x00	; 0
 f22:	20 e0       	ldi	r18, 0x00	; 0
 f24:	30 e0       	ldi	r19, 0x00	; 0
 f26:	48 ee       	ldi	r20, 0xE8	; 232
 f28:	53 e0       	ldi	r21, 0x03	; 3
 f2a:	6a e6       	ldi	r22, 0x6A	; 106
 f2c:	70 e0       	ldi	r23, 0x00	; 0
 f2e:	83 e7       	ldi	r24, 0x73	; 115
 f30:	97 e0       	ldi	r25, 0x07	; 7
 f32:	0e 94 3e 05 	call	0xa7c	; 0xa7c <xTaskCreate>
	xTaskCreate(vTask2, "task2", 1000,NULL, 1,&Task_Handle2);
 f36:	0f 2e       	mov	r0, r31
 f38:	f8 ee       	ldi	r31, 0xE8	; 232
 f3a:	ef 2e       	mov	r14, r31
 f3c:	f6 e0       	ldi	r31, 0x06	; 6
 f3e:	ff 2e       	mov	r15, r31
 f40:	f0 2d       	mov	r31, r0
 f42:	01 e0       	ldi	r16, 0x01	; 1
 f44:	20 e0       	ldi	r18, 0x00	; 0
 f46:	30 e0       	ldi	r19, 0x00	; 0
 f48:	48 ee       	ldi	r20, 0xE8	; 232
 f4a:	53 e0       	ldi	r21, 0x03	; 3
 f4c:	60 e7       	ldi	r22, 0x70	; 112
 f4e:	70 e0       	ldi	r23, 0x00	; 0
 f50:	8c e7       	ldi	r24, 0x7C	; 124
 f52:	97 e0       	ldi	r25, 0x07	; 7
 f54:	0e 94 3e 05 	call	0xa7c	; 0xa7c <xTaskCreate>

	vTaskStartScheduler();
 f58:	0e 94 92 05 	call	0xb24	; 0xb24 <vTaskStartScheduler>
	
 
}
 f5c:	80 e0       	ldi	r24, 0x00	; 0
 f5e:	90 e0       	ldi	r25, 0x00	; 0
 f60:	0f 91       	pop	r16
 f62:	ff 90       	pop	r15
 f64:	ef 90       	pop	r14
 f66:	08 95       	ret

00000f68 <memset>:
 f68:	dc 01       	movw	r26, r24
 f6a:	01 c0       	rjmp	.+2      	; 0xf6e <memset+0x6>
 f6c:	6d 93       	st	X+, r22
 f6e:	41 50       	subi	r20, 0x01	; 1
 f70:	50 40       	sbci	r21, 0x00	; 0
 f72:	e0 f7       	brcc	.-8      	; 0xf6c <memset+0x4>
 f74:	08 95       	ret

00000f76 <_exit>:
 f76:	f8 94       	cli

00000f78 <__stop_program>:
 f78:	ff cf       	rjmp	.-2      	; 0xf78 <__stop_program>
