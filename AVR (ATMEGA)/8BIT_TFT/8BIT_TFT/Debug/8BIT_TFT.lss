
8BIT_TFT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007fc  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000354  00000000  00000000  00001033  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000103  00000000  00000000  0000170d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <writebyte>:
#define  display PORTD


void writebyte(byte b, byte d)
{
	PORTB |= (1<<SS);
  6c:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1<<SS);
  6e:	c4 98       	cbi	0x18, 4	; 24
	PORTB |= (1<<DCX);
  70:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |=(1<<RDX);
  72:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1<<WRX);
  74:	c2 98       	cbi	0x18, 2	; 24
    display = b;
  76:	82 bb       	out	0x12, r24	; 18
	PORTB |= (1<<WRX);
  78:	c2 9a       	sbi	0x18, 2	; 24
	PORTB &=(1<<WRX);
  7a:	88 b3       	in	r24, 0x18	; 24
  7c:	84 70       	andi	r24, 0x04	; 4
  7e:	88 bb       	out	0x18, r24	; 24
	 
	display = d;
  80:	62 bb       	out	0x12, r22	; 18
	PORTB |=(1<<WRX);
  82:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<SS);
  84:	c4 9a       	sbi	0x18, 4	; 24
  86:	08 95       	ret

00000088 <writecmd>:
}

void writecmd(byte cmd)
{
	PORTB &= ~(1<<SS);
  88:	c4 98       	cbi	0x18, 4	; 24
	 
	PORTB &= ~(1<<DCX);
  8a:	c1 98       	cbi	0x18, 1	; 24
	PORTB |=(1<<RDX); 
  8c:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1<<WRX);
  8e:	c2 98       	cbi	0x18, 2	; 24
	
	display = cmd;
  90:	82 bb       	out	0x12, r24	; 18
	PORTB |=(1<<WRX);
  92:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<DCX);  
  94:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<SS); 
  96:	c4 9a       	sbi	0x18, 4	; 24
  98:	08 95       	ret

0000009a <rst>:
}

void rst()
{
	clearbit(PORTB, 0);
  9a:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f ec       	ldi	r24, 0xCF	; 207
  9e:	97 e0       	ldi	r25, 0x07	; 7
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <rst+0x6>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <rst+0xc>
  a6:	00 00       	nop
	
	_delay_ms(1);
setbit(PORTB, 0);
  a8:	c0 9a       	sbi	0x18, 0	; 24
  aa:	9f ef       	ldi	r25, 0xFF	; 255
  ac:	21 ee       	ldi	r18, 0xE1	; 225
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	91 50       	subi	r25, 0x01	; 1
  b2:	20 40       	sbci	r18, 0x00	; 0
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <rst+0x16>
  b8:	00 c0       	rjmp	.+0      	; 0xba <rst+0x20>
  ba:	00 00       	nop
  bc:	08 95       	ret

000000be <init>:
}

void init()

{
	rst();
  be:	0e 94 4d 00 	call	0x9a	; 0x9a <rst>
	writecmd(0x11);
  c2:	81 e1       	ldi	r24, 0x11	; 17
  c4:	0e 94 44 00 	call	0x88	; 0x88 <writecmd>
  c8:	8f e2       	ldi	r24, 0x2F	; 47
  ca:	95 e7       	ldi	r25, 0x75	; 117
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <init+0xe>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <init+0x14>
  d2:	00 00       	nop
	_delay_ms(15);
	writecmd(0x29);
  d4:	89 e2       	ldi	r24, 0x29	; 41
  d6:	0e 94 44 00 	call	0x88	; 0x88 <writecmd>
  da:	08 95       	ret

000000dc <main>:
	 
	 
}
int main(void)
{
	 DDRB=DDRD = 0xFF;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	81 bb       	out	0x11, r24	; 17
  e0:	87 bb       	out	0x17, r24	; 23
    
	
	init();
  e2:	0e 94 5f 00 	call	0xbe	; 0xbe <init>
 
	writecmd(0x2A); // send Column Address Set command (DC line low)
  e6:	8a e2       	ldi	r24, 0x2A	; 42
  e8:	0e 94 44 00 	call	0x88	; 0x88 <writecmd>
	writebyte(0x00,0x00 ); // send 1st Parameter, SC[15:8] (DC line high)
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 36 00 	call	0x6c	; 0x6c <writebyte>
	                      // send 2st Parameter, SC[7:0]
	writebyte(0x00, 0xEF); // send 3st Parameter, EC[15:8]
  f4:	6f ee       	ldi	r22, 0xEF	; 239
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 36 00 	call	0x6c	; 0x6c <writebyte>
	 
	
	writecmd(0x2B);
  fc:	8b e2       	ldi	r24, 0x2B	; 43
  fe:	0e 94 44 00 	call	0x88	; 0x88 <writecmd>
	writebyte(0x00,0x00);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 36 00 	call	0x6c	; 0x6c <writebyte>
	 
	writebyte(0x00, 0x3F);
 10a:	6f e3       	ldi	r22, 0x3F	; 63
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 36 00 	call	0x6c	; 0x6c <writebyte>
	 
	
	writecmd(0x2C);
 112:	8c e2       	ldi	r24, 0x2C	; 44
 114:	0e 94 44 00 	call	0x88	; 0x88 <writecmd>
 while(1)
 {
	writebyte(0xF8, 0x00);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	88 ef       	ldi	r24, 0xF8	; 248
 11c:	0e 94 36 00 	call	0x6c	; 0x6c <writebyte>
	writebyte(0xF9, 0x00); 
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	0e 94 36 00 	call	0x6c	; 0x6c <writebyte>
 128:	f7 cf       	rjmp	.-18     	; 0x118 <main+0x3c>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
