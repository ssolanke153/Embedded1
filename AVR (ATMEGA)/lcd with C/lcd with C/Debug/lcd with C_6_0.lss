
lcd with C_6_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000168  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000938  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000454  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000155  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035f  00000000  00000000  00000f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011a  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000083  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8a:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <command>:

void command()
{


	PORTD=PORTD & ~ (1<<4);
  92:	94 98       	cbi	0x12, 4	; 18
	PORTD=PORTD & ~ (1<<5) ;
  94:	95 98       	cbi	0x12, 5	; 18
	PORTD=PORTD  | (1<<6);
  96:	96 9a       	sbi	0x12, 6	; 18
	PORTD=PORTD & ~(1<<6);
  98:	96 98       	cbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	83 ec       	ldi	r24, 0xC3	; 195
  9c:	99 e0       	ldi	r25, 0x09	; 9
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <command+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <command+0x12>
  a4:	00 00       	nop
	_delay_ms(10);

}
  a6:	08 95       	ret

000000a8 <DISPLAY>:
void DISPLAY()
{



PORTD=PORTD | (1<<4);
  a8:	94 9a       	sbi	0x12, 4	; 18
PORTD=PORTD & ~ (1<<5) ;
  aa:	95 98       	cbi	0x12, 5	; 18
PORTD=PORTD  | (1<<6);
  ac:	96 9a       	sbi	0x12, 6	; 18
PORTD=PORTD & ~(1<<6);
  ae:	96 98       	cbi	0x12, 6	; 18
  b0:	8f e3       	ldi	r24, 0x3F	; 63
  b2:	9d e0       	ldi	r25, 0x0D	; 13
  b4:	a3 e0       	ldi	r26, 0x03	; 3
  b6:	81 50       	subi	r24, 0x01	; 1
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	a0 40       	sbci	r26, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <DISPLAY+0xe>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <DISPLAY+0x18>
  c0:	00 00       	nop
	 _delay_ms(1000);
}
  c2:	08 95       	ret

000000c4 <main>:


int main(void)
{
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	28 97       	sbiw	r28, 0x08	; 8
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61

 unsigned char name[]= {'s','h','r','i','k','a','n','t'};
  e0:	de 01       	movw	r26, r28
  e2:	11 96       	adiw	r26, 0x01	; 1
  e4:	e0 e6       	ldi	r30, 0x60	; 96
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	01 90       	ld	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x26>
unsigned char  z=0;


	DDRB=0xFF;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	87 bb       	out	0x17, r24	; 23

	DDRD=0xFF;
  f6:	81 bb       	out	0x11, r24	; 17




	display=0x38;
  f8:	88 e3       	ldi	r24, 0x38	; 56
  fa:	88 bb       	out	0x18, r24	; 24
	command();
  fc:	0e 94 49 00 	call	0x92	; 0x92 <command>

	display=0x01;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	88 bb       	out	0x18, r24	; 24
	command();
 104:	0e 94 49 00 	call	0x92	; 0x92 <command>

	display=0x0C;
 108:	8c e0       	ldi	r24, 0x0C	; 12
 10a:	88 bb       	out	0x18, r24	; 24
	command();
 10c:	0e 94 49 00 	call	0x92	; 0x92 <command>

	display=0x06;
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	88 bb       	out	0x18, r24	; 24
	command();
 114:	0e 94 49 00 	call	0x92	; 0x92 <command>

	display=0x80;
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	88 bb       	out	0x18, r24	; 24
	command();
 11c:	0e 94 49 00 	call	0x92	; 0x92 <command>
 120:	8e 01       	movw	r16, r28
 122:	0f 5f       	subi	r16, 0xFF	; 255
 124:	1f 4f       	sbci	r17, 0xFF	; 255
PORTD=PORTD & ~(1<<6);
	 _delay_ms(1000);
}


int main(void)
 126:	0f 2e       	mov	r0, r31
 128:	f9 e0       	ldi	r31, 0x09	; 9
 12a:	ef 2e       	mov	r14, r31
 12c:	ff 24       	eor	r15, r15
 12e:	f0 2d       	mov	r31, r0
 130:	ec 0e       	add	r14, r28
 132:	fd 1e       	adc	r15, r29
	display=0x80;
	command();

for (z=0;z<=7;z++)
{
	display = name[z];
 134:	f8 01       	movw	r30, r16
 136:	81 91       	ld	r24, Z+
 138:	8f 01       	movw	r16, r30
 13a:	88 bb       	out	0x18, r24	; 24
	DISPLAY();
 13c:	0e 94 54 00 	call	0xa8	; 0xa8 <DISPLAY>
	command();

	display=0x80;
	command();

for (z=0;z<=7;z++)
 140:	0e 15       	cp	r16, r14
 142:	1f 05       	cpc	r17, r15
 144:	b9 f7       	brne	.-18     	; 0x134 <main+0x70>
	display = name[z];
	DISPLAY();
}


 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	28 96       	adiw	r28, 0x08	; 8
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	08 95       	ret

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
