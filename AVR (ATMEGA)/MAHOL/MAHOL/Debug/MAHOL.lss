
MAHOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc8  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000680  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d8  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003af  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000486  00000000  00000000  00001fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 09 01 	call	0x212	; 0x212 <main>
  64:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <execute>:
#define SS 4


void execute(unsigned char cmd, unsigned char data)
{
	PORTB &= ~(1<<SS);
  6c:	c4 98       	cbi	0x18, 4	; 24
	SPDR = cmd;
  6e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  70:	77 9b       	sbis	0x0e, 7	; 14
  72:	fe cf       	rjmp	.-4      	; 0x70 <execute+0x4>
	
	SPDR = data;
  74:	6f b9       	out	0x0f, r22	; 15
	
	while(!(SPSR & (1<<SPIF)));
  76:	77 9b       	sbis	0x0e, 7	; 14
  78:	fe cf       	rjmp	.-4      	; 0x76 <execute+0xa>
	
	PORTB |= (1<<SS);
  7a:	c4 9a       	sbi	0x18, 4	; 24
  7c:	08 95       	ret

0000007e <segment_init>:
	
}

void segment_init(void)
{
	 DDRB = (1<<MOSI) | (1<<SCK) | (1<<SS);
  7e:	80 eb       	ldi	r24, 0xB0	; 176
  80:	87 bb       	out	0x17, r24	; 23
	 SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  82:	81 e5       	ldi	r24, 0x51	; 81
  84:	8d b9       	out	0x0d, r24	; 13
	 execute(0x09, 0xFF);
  86:	6f ef       	ldi	r22, 0xFF	; 255
  88:	89 e0       	ldi	r24, 0x09	; 9
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
	 execute(0x0B, 0x03);
  8e:	63 e0       	ldi	r22, 0x03	; 3
  90:	8b e0       	ldi	r24, 0x0B	; 11
  92:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
	 execute(0x0C, 0x0F);
  96:	6f e0       	ldi	r22, 0x0F	; 15
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
	 execute(0x0A, 9);
  9e:	69 e0       	ldi	r22, 0x09	; 9
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
  a6:	08 95       	ret

000000a8 <usart_send_packedBCD>:
}

void usart_send_packedBCD(unsigned char min)
{
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	unsigned char min1, min2;
	/*min1 = 0x;
	min2 = min1>>4;*/
	execute(0x02, 0x05);
  ac:	65 e0       	ldi	r22, 0x05	; 5
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f e1       	ldi	r24, 0x1F	; 31
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <usart_send_packedBCD+0x10>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <usart_send_packedBCD+0x16>
  be:	00 00       	nop
	_delay_ms(10);
	execute(0x03, (0x0F&min));
  c0:	6c 2f       	mov	r22, r28
  c2:	6f 70       	andi	r22, 0x0F	; 15
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <usart_send_packedBCD+0x26>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <usart_send_packedBCD+0x2c>
  d4:	00 00       	nop
	_delay_ms(1);
	
}
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <usart_send_packedBCD1>:

void usart_send_packedBCD1(unsigned char data)
{
  da:	cf 93       	push	r28
  dc:	c8 2f       	mov	r28, r24
	unsigned char data1 = data;
	data = data>>4;
	execute(0x01, data);
  de:	68 2f       	mov	r22, r24
  e0:	62 95       	swap	r22
  e2:	6f 70       	andi	r22, 0x0F	; 15
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
  ea:	8f ec       	ldi	r24, 0xCF	; 207
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <usart_send_packedBCD1+0x14>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <usart_send_packedBCD1+0x1a>
  f4:	00 00       	nop
	_delay_ms(1);
	execute(0x02, (0x0F&data1));
  f6:	6c 2f       	mov	r22, r28
  f8:	6f 70       	andi	r22, 0x0F	; 15
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
 100:	8f ec       	ldi	r24, 0xCF	; 207
 102:	97 e0       	ldi	r25, 0x07	; 7
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <usart_send_packedBCD1+0x2a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <usart_send_packedBCD1+0x30>
 10a:	00 00       	nop
	_delay_ms(1);
	
	
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <i2c_init>:

void i2c_init(void)
{
	TWSR = 0x00;
 110:	11 b8       	out	0x01, r1	; 1
	TWBR = 0x47;
 112:	87 e4       	ldi	r24, 0x47	; 71
 114:	80 b9       	out	0x00, r24	; 0
	TWCR = 0x04;	
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	86 bf       	out	0x36, r24	; 54
 11a:	08 95       	ret

0000011c <i2c_start>:
}

void i2c_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 11c:	84 ea       	ldi	r24, 0xA4	; 164
 11e:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));	
 120:	06 b6       	in	r0, 0x36	; 54
 122:	07 fe       	sbrs	r0, 7
 124:	fd cf       	rjmp	.-6      	; 0x120 <i2c_start+0x4>
}
 126:	08 95       	ret

00000128 <i2c_write>:

void i2c_write(unsigned char data)
{
	TWDR = data;
 128:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 12a:	84 e8       	ldi	r24, 0x84	; 132
 12c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 12e:	06 b6       	in	r0, 0x36	; 54
 130:	07 fe       	sbrs	r0, 7
 132:	fd cf       	rjmp	.-6      	; 0x12e <i2c_write+0x6>
}
 134:	08 95       	ret

00000136 <i2c_read>:

unsigned char i2c_read(unsigned char ackval)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (ackval<<TWEA);
 136:	20 e4       	ldi	r18, 0x40	; 64
 138:	82 9f       	mul	r24, r18
 13a:	c0 01       	movw	r24, r0
 13c:	11 24       	eor	r1, r1
 13e:	84 68       	ori	r24, 0x84	; 132
 140:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR &(1<<TWINT)));
 142:	06 b6       	in	r0, 0x36	; 54
 144:	07 fe       	sbrs	r0, 7
 146:	fd cf       	rjmp	.-6      	; 0x142 <i2c_read+0xc>
	return TWDR;	
 148:	83 b1       	in	r24, 0x03	; 3
}
 14a:	08 95       	ret

0000014c <i2c_stop>:

void i2c_stop()
{
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 14c:	84 e9       	ldi	r24, 0x94	; 148
 14e:	86 bf       	out	0x36, r24	; 54
 150:	84 e6       	ldi	r24, 0x64	; 100
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 97       	sbiw	r24, 0x01	; 1
  for (int k = 0; k<100; k++)
 156:	f1 f7       	brne	.-4      	; 0x154 <i2c_stop+0x8>
  {
	  
  }
}
 158:	08 95       	ret

0000015a <rtc_init>:

void rtc_init(void)
{
	i2c_init();
 15a:	0e 94 88 00 	call	0x110	; 0x110 <i2c_init>
	i2c_start();
 15e:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_start>
	i2c_write(0xD0);
 162:	80 ed       	ldi	r24, 0xD0	; 208
 164:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	i2c_write(0x07);
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	i2c_write(0x00);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	i2c_stop();
 174:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
 178:	08 95       	ret

0000017a <rtc_setTime>:

}

void rtc_setTime(unsigned char h, unsigned char m, unsigned char s)
{
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	c8 2f       	mov	r28, r24
 182:	d6 2f       	mov	r29, r22
 184:	14 2f       	mov	r17, r20
	i2c_start();
 186:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_start>
	i2c_write(0xD0);
 18a:	80 ed       	ldi	r24, 0xD0	; 208
 18c:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	i2c_write(0x00);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	i2c_write(s);
 196:	81 2f       	mov	r24, r17
 198:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	i2c_write(m);
 19c:	8d 2f       	mov	r24, r29
 19e:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	i2c_write(h);
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	i2c_stop();
 1a8:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
	
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	08 95       	ret

000001b4 <rtc_getTime>:

 


void rtc_getTime(unsigned char *h, unsigned char *m, unsigned char *s)
{
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	ec 01       	movw	r28, r24
 1c2:	8b 01       	movw	r16, r22
 1c4:	7a 01       	movw	r14, r20
	i2c_start();
 1c6:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_start>
	i2c_write(0xD0);
 1ca:	80 ed       	ldi	r24, 0xD0	; 208
 1cc:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	i2c_write(0);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	i2c_stop();
 1d6:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
    
	i2c_start();
 1da:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_start>
    i2c_write(0xD1);
 1de:	81 ed       	ldi	r24, 0xD1	; 209
 1e0:	0e 94 94 00 	call	0x128	; 0x128 <i2c_write>
	*s = i2c_read(1);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_read>
 1ea:	f7 01       	movw	r30, r14
 1ec:	80 83       	st	Z, r24
	*m = i2c_read(1);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_read>
 1f4:	f8 01       	movw	r30, r16
 1f6:	80 83       	st	Z, r24
	*h = i2c_read(0);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_read>
 1fe:	88 83       	st	Y, r24
	i2c_stop();	
 200:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	08 95       	ret

00000212 <main>:

 


int main()
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	00 d0       	rcall	.+0      	; 0x218 <main+0x6>
 218:	1f 92       	push	r1
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
	 unsigned char i,j,k;
	 
	 rtc_init();
 21e:	0e 94 ad 00 	call	0x15a	; 0x15a <rtc_init>
	 segment_init();
 222:	0e 94 3f 00 	call	0x7e	; 0x7e <segment_init>
	 rtc_setTime(0x10, 0x18, 0x55);
 226:	45 e5       	ldi	r20, 0x55	; 85
 228:	68 e1       	ldi	r22, 0x18	; 24
 22a:	80 e1       	ldi	r24, 0x10	; 16
 22c:	0e 94 bd 00 	call	0x17a	; 0x17a <rtc_setTime>
	  
	   
	 rtc_getTime(&i, &j, &k);
 230:	ae 01       	movw	r20, r28
 232:	4d 5f       	subi	r20, 0xFD	; 253
 234:	5f 4f       	sbci	r21, 0xFF	; 255
 236:	be 01       	movw	r22, r28
 238:	6e 5f       	subi	r22, 0xFE	; 254
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	ce 01       	movw	r24, r28
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	0e 94 da 00 	call	0x1b4	; 0x1b4 <rtc_getTime>
	 //usart_send_packedBCD(i);
	  
	 usart_send_packedBCD(j);
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_send_packedBCD>
	  
	 segment_init();
 24a:	0e 94 3f 00 	call	0x7e	; 0x7e <segment_init>
	while(1)
	{
		
	do
	 {
		rtc_getTime(&i, &j, &k);
 24e:	ae 01       	movw	r20, r28
 250:	4d 5f       	subi	r20, 0xFD	; 253
 252:	5f 4f       	sbci	r21, 0xFF	; 255
 254:	be 01       	movw	r22, r28
 256:	6e 5f       	subi	r22, 0xFE	; 254
 258:	7f 4f       	sbci	r23, 0xFF	; 255
 25a:	ce 01       	movw	r24, r28
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <rtc_getTime>
		 usart_send_packedBCD1(k);
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	0e 94 6d 00 	call	0xda	; 0xda <usart_send_packedBCD1>
		   
	 }while(k != 0x00);
	
	
	 if (k==0x00)
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	81 11       	cpse	r24, r1
 26c:	f0 cf       	rjmp	.-32     	; 0x24e <main+0x3c>
	 {
		 usart_send_packedBCD(j); 
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_send_packedBCD>
 274:	ec cf       	rjmp	.-40     	; 0x24e <main+0x3c>

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
