
MAX7227_IN_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ee  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d8  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a8  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031e  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000046  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <execute>:
#define SCK 7
#define SS 4

void execute(unsigned char cmd, unsigned char data)
{
	PORTB &= ~(1<<SS);
  6c:	c4 98       	cbi	0x18, 4	; 24
	SPDR = cmd;
  6e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  70:	77 9b       	sbis	0x0e, 7	; 14
  72:	fe cf       	rjmp	.-4      	; 0x70 <execute+0x4>
	
	SPDR = data;
  74:	6f b9       	out	0x0f, r22	; 15
	
	while(!(SPSR & (1<<SPIF)));
  76:	77 9b       	sbis	0x0e, 7	; 14
  78:	fe cf       	rjmp	.-4      	; 0x76 <execute+0xa>
	
	PORTB |= (1<<SS);
  7a:	c4 9a       	sbi	0x18, 4	; 24
  7c:	08 95       	ret

0000007e <main>:


int main(void)
{
   
   DDRB = (1<<MOSI) | (1<<SCK) | (1<<SS);
  7e:	80 eb       	ldi	r24, 0xB0	; 176
  80:	87 bb       	out	0x17, r24	; 23
   SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  82:	81 e5       	ldi	r24, 0x51	; 81
  84:	8d b9       	out	0x0d, r24	; 13
   execute(0x09, 0xFF);
  86:	6f ef       	ldi	r22, 0xFF	; 255
  88:	89 e0       	ldi	r24, 0x09	; 9
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
   execute(0x0B, 0x02);
  8e:	62 e0       	ldi	r22, 0x02	; 2
  90:	8b e0       	ldi	r24, 0x0B	; 11
  92:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
   execute(0x0C, 1);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
   execute(0x0A, 9);
  9e:	69 e0       	ldi	r22, 0x09	; 9
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
   
    
   
    while (1) 
    {
	   execute(0x01, 0x09);
  a6:	69 e0       	ldi	r22, 0x09	; 9
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e9       	ldi	r24, 0x9F	; 159
  b0:	9f e0       	ldi	r25, 0x0F	; 15
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x34>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x3a>
  b8:	00 00       	nop
	   _delay_ms(1);
	   execute(0x02, 0x07);
  ba:	67 e0       	ldi	r22, 0x07	; 7
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
  c2:	8f e9       	ldi	r24, 0x9F	; 159
  c4:	9f e0       	ldi	r25, 0x0F	; 15
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x48>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4e>
  cc:	00 00       	nop
  ce:	eb cf       	rjmp	.-42     	; 0xa6 <main+0x28>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
